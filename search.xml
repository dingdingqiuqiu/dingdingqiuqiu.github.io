<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Archlinux双系统及其软件生态配置</title>
    <url>/2023/11/07/Archlinux%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E8%BD%AF%E4%BB%B6%E7%94%9F%E6%80%81%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>本文主要记录了双系统安装的过程以及clash,pycharm,vim,zsh等软件相关安装配置<br><span id="more"></span></p>
<h3 id="双系统安装"><a href="#双系统安装" class="headerlink" title="双系统安装"></a>双系统安装</h3><p>照着下面这个up主装就行。</p>
<p><a href="https://www.bilibili.com/video/BV1fk4y1w7wq/?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1fk4y1w7wq/?spm_id_from=333.999.0.0</a></p>
<p>主要记录期间遇到的几个问题</p>
<p>1.<code>iwctl</code>中<code>WIFI</code>连接遇到问题？</p>
<p>有可能是无线网络被锁住了，在进入<code>iwctl</code>前运行以下命令即可解锁</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip <span class="built_in">link</span></span><br><span class="line">rfkill unblock wifi</span><br></pre></td></tr></table></figure>
<p>2.一个电脑两个磁盘，一个磁盘放<code>Windows</code>,另一个磁盘放<code>Archlinux</code>是否可行？</p>
<p>在<code>Windows</code>磁盘管理工具中将第二个磁盘所有盘符删除，整个第二块磁盘状态为未分配，在使用<code>cfdisk</code>时新建<code>EIF</code>分区（当然与第一块磁盘中的<code>Windows</code>共用<code>EIF</code>分区同样可行），<code>GRUB</code>在开了多系统检测之后可以检测多个磁盘上的系统。注意用<code>mkfs</code>对<code>FIF</code>分区格式化即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/EIF所在磁盘区域</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：<code>nvme</code>开头是使用<code>NVMe</code>接口标准的存储设备</p>
<p><code>sda</code>开头是使用<code>SATA</code>接口标准的存储设备</p>
<p><code>SSD</code>是固态硬盘（Solid State Drive）的简称</p>
<p><code>NVMe</code>接口速度更快延迟更低，主要用于高性能<code>SSD</code></p>
<p><code>SATA</code>接口标准主要用于机械硬盘和<code>SSD</code></p>
</blockquote>
<p>3.对自用用户赋权root组，不然权限好低，一点也不方便</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpasswd -a P4yl04d root    </span><br></pre></td></tr></table></figure>
<h4 id="启动盘制作及分区"><a href="#启动盘制作及分区" class="headerlink" title="启动盘制作及分区"></a>启动盘制作及分区</h4><p><code>iso</code>镜像下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/</span><br></pre></td></tr></table></figure>
<p>启动盘制作工具下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://ventoy.net/cn/download.html</span><br></pre></td></tr></table></figure>
<p><code>ventoy</code>下载解压后，打开<code>Ventory2Disk</code>，设置分区类型为<code>GPT</code>(这里可供选择的有<code>MBR</code>和<code>GPT</code>,详细介绍在《鸟哥的linux私房菜》P131)</p>
<blockquote>
<p>关于分区各种格式的详细介绍可以参考这篇<a href="https://dingdingqiuqiu.github.io/2024/10/08/%E7%94%B5%E8%84%91%E6%98%AF%E6%80%8E%E4%B9%88%E5%BC%80%E6%9C%BA%E7%9A%84(x86">电脑是怎么开机的</a>/#more)</p>
<p>MBR: 早期的，最大2.2TB,开头扇区记录分区信息及开机启动项，且开机管理程序区块仅446Bytes,较小</p>
<p>GPT: 新兴的，补充下，fdisk工具目前支持gpt分区的识别（Linux和Windows磁盘均使用的gpt），使用grub引导似乎也没啥问题</p>
<p>相关知识速览: <a href="https://segmentfault.com/a/1190000020850901">https://segmentfault.com/a/1190000020850901</a></p>
</blockquote>
<p>分区文件系统类型为<code>exFAt</code>即可(后面反正要重新格式化，其实无所凋萎)，分区4kb对齐，簇大小默认。</p>
<p>点击安装，即可格式化原USB,拖入下载的<code>iso</code>镜像文件,完成启动盘制作。</p>
<p>使用windos里的磁盘管理工具可查看磁盘状态，未分配的都是可用的，删除卷，压缩卷均可腾出未分配空间</p>
<p>启动前记得去<code>UEFI/BIOS</code>里关闭安全启动选项</p>
<h4 id="启动盘启动"><a href="#启动盘启动" class="headerlink" title="启动盘启动"></a>启动盘启动</h4><p>插上USB,进入<code>UEFI/BIOS</code>里，选择<code>从USB启动</code>。</p>
<p>页面一:选择要安装的镜像后回车(ventory支持多镜像启动盘)。</p>
<p>页面二:选择<code>Boot in normal mode</code>（第一个选项），即grub引导方式安装。</p>
<p>页面三:进入<code>grub</code>页面，选择<code>Archlinux install...</code>（第一个选项）即可。</p>
<blockquote>
<p>由于archlinux安装在命令行下，live环境中，所以我们后面更换主板找回grub时，不用像别的系统一样还要找<code>try un** without install</code>的选项。</p>
</blockquote>
<h4 id="WIFI连接"><a href="#WIFI连接" class="headerlink" title="WIFI连接"></a>WIFI连接</h4><p>解锁<code>wifi</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip <span class="built_in">link</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rfkill unblock wifi</span><br></pre></td></tr></table></figure>
<p>使用<code>iwctl</code>连接（<code>wlan0</code>是我的网卡设备名，<code>Link</code>是我的<code>WIFI</code>名）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iwctl</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">device list</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">station wlan0 scan</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">station wlan0 get-networks</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">station wlan0 connect Link</span><br></pre></td></tr></table></figure>
<p>输入密码，ctrl+d退出<code>iwctl</code>后，检测连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure>
<h4 id="分区及安装系统"><a href="#分区及安装系统" class="headerlink" title="分区及安装系统"></a>分区及安装系统</h4><p>更新系统时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl</span><br></pre></td></tr></table></figure>
<p>查看分区（图片这里是分好后的效果）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7m0DYiq30zod2xxZG?embed=1&width=1660&height=1648" width="1660" height="" /></p>
<p>如图<code>/dev/nvme0n1</code>开头是<code>windows</code>下的，不用动;我们所有操作都在第二块固态上，即<code>/dev/nvme1n1</code>开头</p>
<p>进入操作页面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cfdisk dev/nvme1n1</span><br></pre></td></tr></table></figure>
<p>可以看到都是未分配的，我们在上方选中<code>Free space</code>,下方选中<code>New</code>，输入文件大小，创建四个分区，分别留作efi分区，根分区，home分区，swap分区，大小建议为<code>0.3G</code>，<code>随便</code>，<code>随便</code>，<code>内存*2G</code></p>
<p>然后分别在上方选中四个分区，下方选中<code>Type</code>,分区类型为分别为<code>EFI System</code>,<code>Linux filename</code>,<code>Linux home</code>,<code>Linux swap</code>。</p>
<p>执行分区类型写入，分别在上方选中四个分区，下方选中<code>Write</code>，分别对四个分区写入。</p>
<p>写入后，下方选中<code>Quit</code>退出即可。</p>
<p>再次执行<code>fdisk -l</code>，检查分区情况，没问题就可以继续了，后面我们进行格式化分区。</p>
<p>格式化<code>EFI分区</code>(位置在<code>/dev/nvme1n1p2</code>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs.fat -F 32 /dev/nvme1n1p2</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建了一个FAT32文件系统，等价命令为<code>mkfs.vfat /dev/nvme1n1p2</code></p>
</blockquote>
<p>格式化<code>根分区</code>(位置在<code>/dev/nvme1n1p3</code>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/nvme1n1p3</span><br></pre></td></tr></table></figure>
<p>格式化<code>home分区</code>(位置在<code>/dev/nvme1n1p4</code>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/nvme1n1p4</span><br></pre></td></tr></table></figure>
<p>格式化<code>swap分区</code>(位置在<code>/dev/nvme1n1p5</code>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkswap /dev/nvme1n1p5</span><br></pre></td></tr></table></figure>
<p>挂载分区(一定要先挂载根分区)</p>
<p>挂载根分区（位置在<code>/dev/nvme1n1p3</code>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount /dev/nvme1n1p3 /mnt</span><br></pre></td></tr></table></figure>
<p>挂载home分区（位置在<code>/dev/nvme1n1p4</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount --mkdir /dev/nvme1n1p4 /mnt/home</span><br></pre></td></tr></table></figure>
<p>挂载efi分区(位置在<code>/dev/nvme1n1p2</code>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount --mkdir /dev/nvme1n1p2 /mnt/efi</span><br></pre></td></tr></table></figure>
<p>挂载交换分区（位置在<code>/dev/nvme1n1p5</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">swapon /dev/nvme1n1p5</span><br></pre></td></tr></table></figure>
<p>配置<code>pacman</code>国内源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>
<p>第一行添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span><br></pre></td></tr></table></figure>
<p>保存退出，刷新缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -Syyu</span><br></pre></td></tr></table></figure>
<p>重新安装密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S archlinux-keyring</span><br></pre></td></tr></table></figure>
<p>安装基本操作系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt base base-devel linux-zen linux-zen-headers linux-firmware networkmanager grub os-prober efibootmgr ntfs-3g amd-ucode bluez bluez-utils nano</span><br></pre></td></tr></table></figure>
<blockquote>
<p>base：基础系统</p>
<p>base-devel: 工具包</p>
<p>linux-zen: 高性能内核</p>
<p>linux-zen-headers: 高性能内核头文件</p>
<p>linux-firmware: linux固件</p>
<p>networkmanager: 网络</p>
<p>grub: 引导</p>
<p>os-prober: 多系统检测</p>
<p>efibootmgr: efi启动项管理</p>
<p>ntfs-3g: ntfs可读写</p>
<p>amd-ucode: cpu编码，如果是cpu为intel的，那就intel-ucode</p>
<p>bluez bluez-utils: 蓝牙</p>
<p>nano: 文本编辑器</p>
</blockquote>
<p>一路回车安装即可。</p>
<p>创建fstab（自动挂载配置文件）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>
<p><code>arch-chroot</code>进入系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure>
<p>设置时区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
<p>设置硬件时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure>
<p>本地化</p>
<p>编辑<code>/etc/locale.gen</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/locale.gen</span><br></pre></td></tr></table></figure>
<p>删除<code>en_US.UTF-8 UTF-8</code>和<code>zh_CN.UTF-8 UTF-8</code>前的<code>#</code></p>
<p>生成<code>locale</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure>
<p>编辑<code>/etc/locale.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/locale.conf</span><br></pre></td></tr></table></figure>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>
<p>保存退出</p>
<p>设置主机名</p>
<p>编辑<code>/etc/hostname</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/hosthome</span><br></pre></td></tr></table></figure>
<p>就叫<code>Arch</code>吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch</span><br></pre></td></tr></table></figure>
<p>设置<code>root</code>密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>
<p>输两次密码即可</p>
<p>创建普通用户<code>P4yl04d</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd -m -G wheel P4yl04d</span><br></pre></td></tr></table></figure>
<p>为普通用户创建密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd P4yl04d</span><br></pre></td></tr></table></figure>
<p>编辑<code>/etc/sudoers</code>赋予用户<code>root</code>权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>删除<code>%wheel ALL=(ALL:ALL) ALL</code>前的<code>#</code></p>
<p>启动服务</p>
<p>网络服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable NetworkManager </span><br></pre></td></tr></table></figure>
<p>蓝牙服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable bluetooth</span><br></pre></td></tr></table></figure>
<p>编辑<code>grub</code>，启用多系统检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/default/grub</span><br></pre></td></tr></table></figure>
<p>去掉<code>GRUB_DISABLE_OS_PROBER=false</code>前的<code>#</code></p>
<p>安装<code>grub</code>服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=grub</span><br></pre></td></tr></table></figure>
<p>更新<code>grub</code>引导</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<h4 id="安装桌面环境KDE"><a href="#安装桌面环境KDE" class="headerlink" title="安装桌面环境KDE"></a>安装桌面环境<code>KDE</code></h4><p>基本组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S xorg plasma plasma-wayland-session</span><br></pre></td></tr></table></figure>
<p>开机自启动显示管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable sddm </span><br></pre></td></tr></table></figure>
<p>其他必要的东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S konsole dophin ark kate</span><br></pre></td></tr></table></figure>
<blockquote>
<p>konsole: 终端</p>
<p>dophin: 文件管理器</p>
<p>ark: 解压缩软件</p>
<p>kate: 文本编辑器</p>
</blockquote>
<p>退出系统，重启电脑即可进入<code>Archlinux</code>桌面环境工作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>重启后在<code>grub</code>引导中并未看到<code>Windows</code>选项，正常现象</p>
<p>我们进入<code>Arch</code>,重新更新下，下次就有了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<p>从回显信息我们可以看到，<code>grub</code>找到了<code>windows</code>的启动项。</p>
<h4 id="本地化-中文"><a href="#本地化-中文" class="headerlink" title="本地化-中文"></a>本地化-中文</h4><p>中文字体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S adobe-source-han-sans-cn-fonts</span><br></pre></td></tr></table></figure>
<p>去设置-&gt; <code>Regional Settings</code>-&gt;<code>Region &amp; Language</code>-&gt;<code>Change Language</code>-&gt;<code>简体中文</code>-&gt;<code>Apply</code>-&gt;<code>Restart now</code>-&gt;<code>OK</code></p>
<h4 id="配置国内源下载必要应用"><a href="#配置国内源下载必要应用" class="headerlink" title="配置国内源下载必要应用"></a>配置国内源下载必要应用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/pacman.conf</span><br></pre></td></tr></table></figure>
<p>开启32位库</p>
<p>改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#[mulitlib]</span><br><span class="line">#Include = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>
<p>为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mulitlib]</span><br><span class="line">Include = /etc/pacman.d/mirrorlist</span><br><span class="line"></span><br><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure>
<p>保存退出后刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syy</span><br></pre></td></tr></table></figure>
<p>导入cn源密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>
<p>安装后端程序使得应用商店刷新出软件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S archlinux-appstream-data packagekit-qt5 fwupd</span><br></pre></td></tr></table></figure>
<p>安装<code>AUR</code>助手<code>yay</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S yay</span><br></pre></td></tr></table></figure>
<p>刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -Syy</span><br></pre></td></tr></table></figure>
<p>安装中文输入法<code>Fcitx5</code>(Wiki上有)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx5-im</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx5-chinese-addons fcitx5-rime</span><br></pre></td></tr></table></figure>
<p>编辑<code>environment</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/environment</span><br></pre></td></tr></table></figure>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br><span class="line">SDL_IM_MODULE=fcitx</span><br><span class="line">INPUT_METHOD=fcitx</span><br><span class="line">GLFW_IM_MODULE=ibus</span><br></pre></td></tr></table></figure>
<p>不想添加<code>environment</code>也可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S fcitx5-input-support</span><br></pre></td></tr></table></figure>
<p>重启后就可以在设置里找到拼音输入法了，至此，安装完成。</p>
<h4 id="ERRO-主板更换后找回grub"><a href="#ERRO-主板更换后找回grub" class="headerlink" title="ERRO:主板更换后找回grub"></a>ERRO:主板更换后找回grub</h4><p><strong>问题描述</strong></p>
<p>打开电脑后自动进入<code>Windows</code>系统，痛失<code>grub</code>引导</p>
<p>进入<code>UEFI/BIOS</code>里，启动方式那里只有<code>windows mangemer</code>了，原本的<code>grub</code>选项丢失了。</p>
<blockquote>
<p>windows mangemer在windows磁盘下的efi里，grub在linux磁盘下的efi里。</p>
</blockquote>
<p><strong>解决方案</strong></p>
<p>进入安装时的live环境，连接wifi(即前文中的[<code>启动盘制作及分区</code>,<code>WIFI连接部分</code>])。</p>
<p>挂载分区(一定要先挂载根分区)</p>
<p>挂载根分区（位置在<code>/dev/nvme1n1p3</code>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount /dev/nvme1n1p3 /mnt</span><br></pre></td></tr></table></figure>
<p>挂载home分区（位置在<code>/dev/nvme1n1p4</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount --mkdir /dev/nvme1n1p4 /mnt/home</span><br></pre></td></tr></table></figure>
<p>挂载efi分区(位置在<code>/dev/nvme1n1p2</code>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount --mkdir /dev/nvme1n1p2 /mnt/efi</span><br></pre></td></tr></table></figure>
<p>挂载交换分区（位置在<code>/dev/nvme1n1p5</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">swapon /dev/nvme1n1p5</span><br></pre></td></tr></table></figure>
<p><code>arch-chroot</code>进入系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure>
<p>重新安装<code>grub</code>服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=grub</span><br></pre></td></tr></table></figure>
<p>更新<code>grub</code>引导</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<p>退出系统，重启电脑即可进入<code>Archlinux</code>桌面环境工作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>重启后在<code>grub</code>引导中并未看到<code>Windows</code>选项，正常现象</p>
<p>我们进入<code>Arch</code>,重新更新下，下次就有了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<p>从回显信息我们可以看到，<code>grub</code>找到了<code>windows</code>的启动项。</p>
<p>再次重启，验证结果，可以看到<code>grub</code>已经被我们成功修复。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h3 id="软件生态配置"><a href="#软件生态配置" class="headerlink" title="软件生态配置"></a>软件生态配置</h3><h4 id="纯软件"><a href="#纯软件" class="headerlink" title="纯软件"></a>纯软件</h4><p><code>Archlinux</code>中下载软件推荐上<a href="https://wiki.archlinux.org/">Archwiki</a>（输入软件名即可，内有中文社区，点<code>AUR</code>中也可）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S 软件包名（官方版）</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S 软件包名（AUR包）</span><br></pre></td></tr></table></figure>
<p>自己下载解压安装亦可，初始环境配置推荐下面这篇文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/617640635">https://zhuanlan.zhihu.com/p/617640635</a></p>
<p>补充：</p>
<p><code>Clash for Windows</code>可以用<a href="https://github.com/zzzgydi/clash-verge/releases/tag/v1.3.8">Clash Verge</a>代替</p>
<blockquote>
<p><a href="https://www.hortonyyx.com/article/over-the-wall">翻过高墙（passwd:horton）</a></p>
</blockquote>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212659&authkey=%21ANiKrfTOh3bHFkY&width=1918&height=1036" width="1918" height="" /></p>
<p>系统代理设置这里和<code>Clash for windows</code>一致</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212661&authkey=%21ANiKrfTOh3bHFkY&width=1290&height=912" width="1290" height="" /></p>
<h4 id="Zsh配置"><a href="#Zsh配置" class="headerlink" title="Zsh配置"></a><code>Zsh</code>配置</h4><p>参考文章（视频）：</p>
<p><a href="https://www.youtube.com/watch?v=8Uh9-BpTqfM">zsh安装</a> 来源于<code>Youtube</code>的一则视频</p>
<p><a href="https://wiki.archlinux.org/title/Zsh">zsh安装</a> 来源于<code>Archwiki</code>的一篇文章（主）</p>
<p><a href="https://zhuanlan.zhihu.com/p/35283688">oh-my-zsh安装</a> 来源于<code>知乎</code>的一篇文章</p>
<p><a href="https://www.youtube.com/watch?v=f5bdi7WrIFs">oh-my-zsh安装</a> 来源于<code>Youtube</code>的一则视频（主）</p>
<p><a href="https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k">p10k字体配置</a> 来源于<code>Github</code>该主题作者的推荐字体（这里的字体很有用，解决了<code>Arch</code>图标显示不正常的问题）</p>
<p>官方字体下载，链接里有这四个字体，点击链接下载下来。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212660&authkey=%21ANiKrfTOh3bHFkY&width=1750&height=846" width="1750" height="" /></p>
<p>下载以后鼠标右键安装到系统用户即可（右键选中<code>ttf</code>文件有安装选项）</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212658&authkey=%21ANiKrfTOh3bHFkY&width=1232&height=764" width="1232" height="" /></p>
<p>字体下载（主要是视频里做的，但是效果不如作者推荐的字体）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syu noto-fonts noto-fonts-emoji noto-fonts-extra awesome-terminal-fonts</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syu zsh</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syu git</span><br></pre></td></tr></table></figure>
<p>一切之前：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line"><span class="built_in">cd</span> </span><br></pre></td></tr></table></figure>
<p><code>zsh</code>下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S zsh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S zsh-completions</span><br></pre></td></tr></table></figure>
<p>更改<code>shell</code>为<code>zsh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -l				<span class="comment">#查看所有Shell所在位置</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -S 想更换的shell的完整目录</span><br><span class="line"><span class="comment"># 这里在哪个用户下更改的就是更换哪个用户的Shell</span></span><br><span class="line"><span class="comment"># 在root下更改后用户的shell仍然是原shell</span></span><br><span class="line"><span class="comment"># 重启电脑后shell生效</span></span><br></pre></td></tr></table></figure>
<p>下载<code>oh-my-zsh</code>，配置文件在<code>/root/.zshrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl --insecure -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h5><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md">语法高亮</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md">自动补全</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/romkatv/powerlevel10k#oh-my-zsh">主题下载</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure>
<h5 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim .zshrc</span><br></pre></td></tr></table></figure>
<p>主题配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set name of the theme to load --- if set to &quot;random&quot;, it will</span></span><br><span class="line"><span class="comment"># load a random theme each time oh-my-zsh is loaded, in which case,</span></span><br><span class="line"><span class="comment"># to know which specific one was loaded, run: echo $RANDOM_THEME</span></span><br><span class="line"><span class="comment"># See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span></span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br><span class="line"><span class="comment">#ZSH_THEME=&quot;robbyrussell&quot;</span></span><br></pre></td></tr></table></figure>
<p>插件配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Which plugins would you like to load?</span></span><br><span class="line"><span class="comment"># Standard plugins can be found in $ZSH/plugins/</span></span><br><span class="line"><span class="comment"># Custom plugins may be added to $ZSH_CUSTOM/plugins/</span></span><br><span class="line"><span class="comment"># Example format: plugins=(rails git textmate ruby lighthouse)</span></span><br><span class="line"><span class="comment"># Add wisely, as too many plugins slow down shell startup.</span></span><br><span class="line">plugins=(</span><br><span class="line">        git</span><br><span class="line">        zsh-autosuggestions</span><br><span class="line">        <span class="comment"># zsh-syntax-highlighting must be the last</span></span><br><span class="line">        zsh-syntax-highlighting</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br></pre></td></tr></table></figure>
<p>让配置生效，同时根据选择主题详细配置即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure>
<p>重新配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p10k configure</span><br></pre></td></tr></table></figure>
<p>安装<code>i3</code>桌面</p>
<blockquote>
<p>按照个人喜好，我这里pwngdb分屏显示特别奇怪，故仅仅进行了安装，并未实际使用</p>
</blockquote>
<p><a href="https://doc.houdunren.com/%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87/3%20i3.html#%E5%9F%BA%E7%A1%80%E6%8E%A7%E5%88%B6">i3 安装配置</a></p>
<blockquote>
<p><code>blueman</code>暂时没什么用,他给的配置文件不咋好用，不建议使用</p>
</blockquote>
<p><code>vim/nvim</code>配置(更推荐<code>vim</code>)</p>
<p><a href="https://wiki.archlinuxcn.org/wiki/Neovim">Archwiki_Neovim</a></p>
<p><a href="https://wiki.archlinuxcn.org/wiki/Vim">Archwiki_Vim</a></p>
<h4 id="wine下载配置"><a href="#wine下载配置" class="headerlink" title="wine下载配置"></a><code>wine</code>下载配置</h4><blockquote>
<p>不推荐，很多软件都不稳定，有时候能打开，有时候不能。小问题一堆，强烈不推荐</p>
</blockquote>
<p>安装必要的包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S wine wine-mono winetricks zenity</span><br></pre></td></tr></table></figure>
<p>保存并退出，重启系统</p>
<p>进入桌面后运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">winecfg</span><br></pre></td></tr></table></figure>
<p>把操作系统改为<code>Windows 10</code></p>
<p>安装完后输入<code>vim ~/.bashrc</code>，往里面插入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> WINEARCH=<span class="string">&quot;win32&quot;</span></span><br></pre></td></tr></table></figure>
<p>百度网盘里下载Windows下的字体文件到<code>~/.wine/drive_c/windows/Fonts</code>，然后运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">winetricks</span><br></pre></td></tr></table></figure>
<p>选择<code>Select the default wineprefix</code>（选择默认的wine容器），然后再选择<code>Run uninstaller</code>，单击<code>Install...</code>选择安装包安装程序</p>
<blockquote>
<p>一定要安装字体，不然打不开ida</p>
</blockquote>
<p>最后在终端输入<code>wine &lt;exe&gt;</code>运行你喜欢的程序吧！</p>
<p>安装<code>python_for_windows</code>:下载后打开目录，运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wineconsole</span><br></pre></td></tr></table></figure>
<p>在终端执行安装命令安装<code>python</code>环境（必须装，不然无法载入反编译二进制文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./python-3.12.0-amd64.exe</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +777 python安装位置在linux环境的映射</span><br></pre></td></tr></table></figure>
<p>参考文档:</p>
<p> <a href="https://blog.csdn.net/qq_45933858/article/details/124553135">[详解]ArchLinux下Wine的使用</a></p>
<p><a href="https://www.csdzds.cn/posts/linux-wine/">使用 Wine 运行 IDA Pro</a></p>
<h3 id="WPS"><a href="#WPS" class="headerlink" title="WPS"></a>WPS</h3><p>粗体字体问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S freetype2-wps </span><br></pre></td></tr></table></figure>
<p>启动时跳出的缺失字体问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S ttf-wps-fonts</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境搭建</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>双系统安装</tag>
        <tag>clash</tag>
        <tag>pycharm</tag>
        <tag>vim</tag>
        <tag>zsh</tag>
        <tag>wine</tag>
      </tags>
  </entry>
  <entry>
    <title>Archlinux深度学习环境搭建</title>
    <url>/2024/03/07/Archlinux%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>本文主要介绍了Archlinux下本地深度学习环境的搭建,搭建新环境时，一定要查下文末的表格，找到对应的<code>tensorflow</code>版本，这个及其容易出错。用服务器的RTX4090都下不来了最新(只能cuda12.4+tensorflow2.17)不能下2.18。</p>
<span id="more"></span>
<p>参考文章：<a href="https://xland.cyou/p/arch-linux-configuration-driver-and-software/">Arch Linux 配置 — 驱动和软件安装</a></p>
<h3 id="带深度学习环境的服务器配置"><a href="#带深度学习环境的服务器配置" class="headerlink" title="带深度学习环境的服务器配置"></a>带深度学习环境的服务器配置</h3><p>查看所有虚拟环境名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VaYjR4YkxyZmpoR3BxdXUyUkt6cnVBQkVVTF9TSGlJMENkMHhRdVctbnJzU0E_ZT1jVUJCYXA.png" alt="image-20241101081825095"></p>
<p>conda初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda init bash</span><br></pre></td></tr></table></figure>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VWUjlQcWtKZkhoR3ZuWi13d1ZYc29FQkctUkVlcVVzUzVuME5OSER3RjVBRWc_ZT1qVDZtMDI.png" alt="image-20241101081927412"></p>
<p>重进<code>shell</code>后激活</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate tensorflow</span><br></pre></td></tr></table></figure>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VlTnVWckprN1FkTmpmQjVoNDR3Zm4wQmFHSDRPNFJrd2NCcFdZSWRfelFHQmc_ZT1iN2I3NjY.png" alt="image-20241101082303178"></p>
<p>即可执行相应深度学习训练任务</p>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VkZHViam9TNzhCT2dsQTliS2dfdWpFQkVjX1dOb0VvUW5FTWpEVEw3SzVHSnc_ZT1xSDVPZXE.png" alt="image-20241101082648052"></p>
<h3 id="wsl环境配置"><a href="#wsl环境配置" class="headerlink" title="wsl环境配置"></a>wsl环境配置</h3><p>nvidia-smi:查看当前版本</p>
<p>cuda</p>
<p><a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p>
<p>cudnn</p>
<p><a href="https://developer.nvidia.com/cudnn-archive">https://developer.nvidia.com/cudnn-archive</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i cudnn-local-repo-ubuntu2204-8.9.7.29_1.0-1_amd64.deb</span><br><span class="line">sudo <span class="built_in">cp</span> /var/cudnn-local-repo-ubuntu2204-8.9.7/cudnn-*-keyring.gpg /usr/share/keyrings/</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install cudnn-cuda-12</span><br></pre></td></tr></table></figure>
<p>tensorflow(版本对照):</p>
<p><a href="https://tensorflow.google.cn/install/source">https://tensorflow.google.cn/install/source</a></p>
<h3 id="显卡安装"><a href="#显卡安装" class="headerlink" title="显卡安装"></a>显卡安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S nvidia-open-dkms nvidia-settings lib32-nvidia-utils <span class="comment"># 必须安装</span></span><br></pre></td></tr></table></figure>
<p>安装好驱动后，编辑<code>/etc/mkinitcpio.conf</code>，删去<code>HOOKS</code>那一项中得<code>kms</code>，阻止内核启动时加载<code>nouveau</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># HOOKS=(base udev autodetect modconf keyboard keymap kms consolefont block filesystems fsck)  # 更改前</span><br><span class="line">HOOKS=(base udev autodetect modconf keyboard keymap consolefont block filesystems fsck)  # 更改后</span><br></pre></td></tr></table></figure>
<p>更改后重新生成<code>initramfs</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkinitcpio -P</span><br></pre></td></tr></table></figure>
<p>更新时需要重新生成<code>mkinitcpio</code>，自动更新脚本配置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/pacman.d/hooks/nvidia.hook</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Trigger]</span><br><span class="line">Operation=Install</span><br><span class="line">Operation=Upgrade</span><br><span class="line">Operation=Remove</span><br><span class="line">Type=Package</span><br><span class="line">Target=nvidia-open-dkms</span><br><span class="line">#Target=linux</span><br><span class="line"># Change the linux part above and in the Exec line if a different kernel is used</span><br><span class="line"># 如果使用不同的内核，请更改上面的 linux 部分和 Exec 行中的内容</span><br><span class="line"></span><br><span class="line">[Action]</span><br><span class="line">Description=Update Nvidia module in initcpio</span><br><span class="line">Depends=mkinitcpio</span><br><span class="line">When=PostTransaction</span><br><span class="line">#NeedsTargets</span><br><span class="line">#Exec=/bin/sh -c &#x27;while read -r trg; do case $trg in linux) exit 0; esac; done; /usr/bin/mkinitcpio -P&#x27;</span><br><span class="line">Exec=/usr/bin/mkinitcpio -P</span><br></pre></td></tr></table></figure>
<p>重启电脑后，键入下列代码，回显如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lspci -k | grep -A 2 -E &quot;(VGA|3D)&quot;</span><br><span class="line">01:00.0 VGA compatible controller: NVIDIA Corporation GA107BM [GeForce RTX 3050 Mobile] (rev a1)</span><br><span class="line">        Subsystem: Lenovo GA107BM [GeForce RTX 3050 Mobile]</span><br><span class="line">        Kernel driver in use: nvidia</span><br><span class="line">--</span><br><span class="line">06:00.0 VGA compatible controller: Advanced Micro Devices, Inc. [AMD/ATI] Cezanne [Radeon Vega Series / Radeon Vega Mobile Series] (rev c5)</span><br><span class="line">        Subsystem: Lenovo Cezanne [Radeon Vega Series / Radeon Vega Mobile Series]</span><br><span class="line">        Kernel driver in use: amdgpu</span><br></pre></td></tr></table></figure>
<h3 id="核显和独显动态切换"><a href="#核显和独显动态切换" class="headerlink" title="核显和独显动态切换"></a>核显和独显动态切换</h3><blockquote>
<p>nvidia独显的话，基本只能用x11桌面</p>
<p>optimus软件都打不开,目前在用独显模式，还需要把bios改成独显</p>
<p>不然桌面系统都进不去</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S optimus-manager optimus-manager-qt</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/environment</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__NV_PRIME_RENDER_OFFLOAD=1</span><br><span class="line">__GLX_VENDOR_LIBRARY_NAME=<span class="string">&quot;nvidia&quot;</span></span><br><span class="line">__VK_LAYER_NV_optimus=<span class="string">&quot;NVIDIA_only&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="cuda-amp-amp-cudnn"><a href="#cuda-amp-amp-cudnn" class="headerlink" title="cuda&amp;&amp;cudnn"></a>cuda&amp;&amp;cudnn</h3><blockquote>
<p>考虑到tensorflow需要对应版本的cuda和cudnn推荐google搜索官网版本下载</p>
<p>查询网站：</p>
<p><a href="https://tensorflow.google.cn/install/source">https://tensorflow.google.cn/install/source</a></p>
<p>我的版本：</p>
<p>cuda 12.4</p>
<p>cudnn  8.9.7.29</p>
<p>tensorflow 12.7</p>
<p>兼容性不太行，但可以用，有点警告，pytorch可以完全兼容</p>
<p>警告修复：<br><a href="https://github.com/tensorflow/tensorflow/issues/62075">https://github.com/tensorflow/tensorflow/issues/62075</a></p>
<p>中文翻译：<br><a href="https://dingdingqiuqiu.github.io/2024/09/12/tensorflow%E4%BD%BF%E7%94%A8%E8%AD%A6%E5%91%8A/#more">https://dingdingqiuqiu.github.io/2024/09/12/tensorflow%E4%BD%BF%E7%94%A8%E8%AD%A6%E5%91%8A/#more</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S cuda</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S cudnn</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd </span><br><span class="line">vim .zshrc</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#cuda-setting</span><br><span class="line">export PATH=&quot;/opt/cuda/bin:$PATH&quot;</span><br><span class="line">export LD_LIBRARY_PATH=&quot;/opt/cuda/lib64:$LD_LIBRARY_PATH&quot;</span><br><span class="line">export CUDA_HOME=$CUDA_HOME:/opt/cuda</span><br><span class="line">export CUDA_VISIBLE_DEVICES=0</span><br></pre></td></tr></table></figure>
<p><code>export CUDA_VISIBLE_DEVICES=0</code>如果有四块显卡，改为<code>export CUDA_VISIBLE_DEVICES=0,1,2,3</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果不重启电脑，依然用不了，提示环境错误，版本不适配</p>
<p><code>CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment</code></p>
</blockquote>
<p>测试cuda是否可用：</p>
<p><strong>torch框架</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test.py</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;CUDA版本:&#x27;</span>, torch.version.cuda)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Pytorch版本:&#x27;</span>, torch.__version__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;显卡是否可用:&#x27;</span>, <span class="string">&#x27;可用&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;不可用&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;显卡数量:&#x27;</span>, torch.cuda.device_count())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;是否支持BF16数字格式:&#x27;</span>, <span class="string">&#x27;支持&#x27;</span> <span class="keyword">if</span> torch.cuda.is_bf16_supported() <span class="keyword">else</span> <span class="string">&#x27;不支持&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前显卡型号:&#x27;</span>, torch.cuda.get_device_name())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前显卡的CUDA算力:&#x27;</span>, torch.cuda.get_device_capability())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前显卡的总显存:&#x27;</span>, torch.cuda.get_device_properties(<span class="number">0</span>).total_memory / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>, <span class="string">&#x27;GB&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;是否支持TensorCore:&#x27;</span>, <span class="string">&#x27;支持&#x27;</span> <span class="keyword">if</span> torch.cuda.get_device_properties(<span class="number">0</span>).major &gt;= <span class="number">7</span> <span class="keyword">else</span> <span class="string">&#x27;不支持&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前显卡的显存使用率:&#x27;</span>, torch.cuda.memory_allocated(<span class="number">0</span>) / torch.cuda.get_device_properties(<span class="number">0</span>).total_memory * <span class="number">100</span>, <span class="string">&#x27;%&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 结果</span><br><span class="line">CUDA版本: 12.1</span><br><span class="line">Pytorch版本: 2.2.2+cu121</span><br><span class="line">显卡是否可用: 可用</span><br><span class="line">显卡数量: 1</span><br><span class="line">是否支持BF16数字格式: 支持</span><br><span class="line">当前显卡型号: NVIDIA GeForce RTX 3050 Laptop GPU</span><br><span class="line">当前显卡的CUDA算力: (8, 6)</span><br><span class="line">当前显卡的总显存: 3.58929443359375 GB</span><br><span class="line">是否支持TensorCore: 支持</span><br><span class="line">当前显卡的显存使用率: 0.0 %</span><br></pre></td></tr></table></figure>
<p><strong>paddle框架</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test.py</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;CUDA版本:&#x27;</span>, torch.version.cuda)</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line">paddle.utils.run_check()</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 结果</span><br><span class="line">CUDA版本: 12.1</span><br><span class="line">Running verify PaddlePaddle program ... </span><br><span class="line">I0407 17:14:43.856997  8841 program_interpreter.cc:212] New Executor is Running.</span><br><span class="line">W0407 17:14:43.862674  8841 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.6, Driver API Version: 12.4, Runtime API Version: 11.8</span><br><span class="line">W0407 17:14:43.863399  8841 gpu_resources.cc:164] device: 0, cuDNN Version: 8.9.</span><br><span class="line">I0407 17:14:44.297957  8841 interpreter_util.cc:624] Standalone Executor is Used.</span><br><span class="line">PaddlePaddle works well on 1 GPU.</span><br><span class="line">PaddlePaddle is installed successfully! Let&#x27;s start deep learning with PaddlePaddle now.</span><br></pre></td></tr></table></figure>
<h3 id="python虚拟环境"><a href="#python虚拟环境" class="headerlink" title="python虚拟环境"></a>python虚拟环境</h3><blockquote>
<p>由于系统<code>python</code>包管理属于<code>pacman</code>,有很多<code>pip</code>包无法安装</p>
<p>所以我们通过<code>python</code>虚拟环境的方式来安装这些包    </p>
<p>虚拟环境管理有很多方式，包括<code>conda</code>等，<code>python -m venv</code>更轻量级，<code>conda</code>适合大型项目</p>
</blockquote>
<p>注意：</p>
<ul>
<li><p>想要使用<code>cuda&amp;&amp;cudnn</code>进行深度学习，务必启动虚拟环境</p>
<blockquote>
<p>这是因为全局环境中的<code>torch.__version__</code>为<code>2.2.2</code></p>
<p>而虚拟环境中的为<code>2.2.2+cu121</code></p>
<p><code>cu121</code>表示 PyTorch 版本是专门针对 CUDA 12.1 编译的。</p>
<p>这是由于我的<code>torch</code>是虚拟环境启动后通过<code>pip</code>安装的</p>
<p>而系统上的是<code>pacman</code>安装的，版本不同</p>
</blockquote>
</li>
<li><p>虚拟环境启动后，<code>pip</code>安装的包都会存在于虚拟环境中</p>
</li>
</ul>
<h4 id="虚拟环境创建"><a href="#虚拟环境创建" class="headerlink" title="虚拟环境创建"></a>虚拟环境创建</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/P4yl04d/Documents/HENU_overview</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m venv myenv</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的 <code>myenv</code> 是你想要创建的虚拟环境的名称，你可以将其替换为你喜欢的任何名称。</p>
</blockquote>
<h4 id="虚拟环境激活"><a href="#虚拟环境激活" class="headerlink" title="虚拟环境激活"></a>虚拟环境激活</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source myenv/bin/activate</span><br></pre></td></tr></table></figure>
<h4 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<h3 id="tensorflow安装"><a href="#tensorflow安装" class="headerlink" title="tensorflow安装"></a>tensorflow安装</h3><p>以下查询版本对应，务必下载对应版本的cuda和cudnn</p>
<p><a href="https://tensorflow.google.cn/install/source">https://tensorflow.google.cn/install/source</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_tensorflow</span>():</span><br><span class="line">    <span class="comment"># 打印 TensorFlow 版本</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;TensorFlow version:&quot;</span>, tf.__version__)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查是否有可用的 GPU</span></span><br><span class="line">    gpus = tf.config.list_physical_devices(<span class="string">&#x27;GPU&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> gpus:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Num GPUs Available: <span class="subst">&#123;<span class="built_in">len</span>(gpus)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i, gpu <span class="keyword">in</span> <span class="built_in">enumerate</span>(gpus):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;GPU <span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;gpu&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No GPUs available.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印一些其他配置</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Num CPUs Available:&quot;</span>, tf.config.list_physical_devices(<span class="string">&#x27;CPU&#x27;</span>))</span><br><span class="line">    <span class="comment"># 查看 CUDA 版本</span></span><br><span class="line">    cuda_version = tf.sysconfig.get_build_info()[<span class="string">&#x27;cuda_version&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;CUDA version:&quot;</span>, cuda_version)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看 cuDNN 版本</span></span><br><span class="line">    cudnn_version = tf.sysconfig.get_build_info()[<span class="string">&#x27;cudnn_version&#x27;</span>]</span><br><span class="line">    <span class="comment"># 测试一个简单的运算</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = tf.constant([[<span class="number">1.0</span>, <span class="number">2.0</span>], [<span class="number">3.0</span>, <span class="number">4.0</span>]])</span><br><span class="line">        b = tf.constant([[<span class="number">5.0</span>, <span class="number">6.0</span>], [<span class="number">7.0</span>, <span class="number">8.0</span>]])</span><br><span class="line">        c = tf.matmul(a, b)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;TensorFlow computation result (a @ b):&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(c.numpy())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error during computation:&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test_tensorflow()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境搭建</category>
        <category>开发环境</category>
      </categories>
  </entry>
  <entry>
    <title>Arch配置Git自动登录验证</title>
    <url>/2023/11/10/Arch%E9%85%8D%E7%BD%AEGit%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<p>本文主要实现了<code>Archlinux</code>环境下<code>git push</code>指令免密登录的配置<br>介绍了<code>git</code>相关操作<br><span id="more"></span></p>
<h3 id="Arch配置Git自动登录验证"><a href="#Arch配置Git自动登录验证" class="headerlink" title="Arch配置Git自动登录验证"></a>Arch配置Git自动登录验证</h3><p>参考文档：</p>
<p><a href="https://zhuanlan.zhihu.com/p/571015337">核心参考文档</a> 本文思路基本和该文一致，相当于这篇文章的详细版</p>
<p><a href="https://www.cnblogs.com/apocelipes/p/14491762.html">图解如何在Linux上配置git自动登录验证 </a> (了解)</p>
<blockquote>
<p>实际使用下来不如SSH免密登录，因为http免密登录需要储存凭证程序，而使用储存凭证程序需要与‘’Secret Service”建立联系，国内网络连接被拒……更推荐下面这片文章中的SSH免密登录</p>
</blockquote>
<p><a href="https://cloud.tencent.com/developer/article/1861466">GitHub不再支持密码验证解决方案：SSH免密与Token登录配置</a> (推荐)</p>
<p><a href="https://blog.csdn.net/qq_38163309/article/details/105335097">github配置SSH免密登录</a> (更针对目前的Github版本，在Github上导入密钥可以参考这篇)</p>
<p><a href="https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/about-authentication-to-github">github关于身份验证的官方文档</a></p>
<p>为什么要配置git自动登录验证？</p>
<blockquote>
<p>官方已经停用了在终端中利用git通过账户名密码的方式登录github</p>
</blockquote>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212664&authkey=%21ANiKrfTOh3bHFkY&width=1898&height=178" width="1898" height="" /></p>
<blockquote>
<p>因此配置SSH免密登录和Token登录是必要的</p>
</blockquote>
<h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><p>生成<code>ssh-key</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 1501608414@qq.com  </span><br></pre></td></tr></table></figure>
<p><code>ENTER</code>后会回显密钥储存位置，进入该位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/.ssh/</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>可以看到有两个文件<code>id_rsa</code>（私钥）和<code>id_rsa.pub</code>（公钥）</p>
<p>把公钥导入<code>Github</code>中的<code>Settings</code>中的<code>SSH and GPG keys</code>即可。</p>
<h3 id="git修改远程仓库地址"><a href="#git修改远程仓库地址" class="headerlink" title="git修改远程仓库地址"></a>git修改远程仓库地址</h3><p>方法有三种：</p>
<ol>
<li><p>修改命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote set-url --push origin git@github.com:dingdingqiuqiu/Leetcode.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>先删后加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:dingdingqiuqiu/Leetcode.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接修改config文件</p>
<p>  git文件夹，找到config，编辑，把就的项目地址替换成新的。</p>
</li>
</ol>
<h3 id="Git基本使用"><a href="#Git基本使用" class="headerlink" title="Git基本使用"></a>Git基本使用</h3><blockquote>
<p>该部分介绍基本够用，更详细的介绍在<a href="https://dingdingqiuqiu.github.io/2024/10/08/git%E6%89%8B%E5%86%8C/#more">dingdingqiuqiu-git手册</a></p>
</blockquote>
<h4 id="首次使用"><a href="#首次使用" class="headerlink" title="首次使用"></a>首次使用</h4><p>配置<code>Git</code>的全局账户名和电子邮箱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;P4yl04d&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;1501608414@qq.com&quot;</span><br></pre></td></tr></table></figure>
<p>使用以下命令检验配置结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure>
<p>修改默认编辑器为<code>nvim</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global core.editor nvim</span><br></pre></td></tr></table></figure>
<p><code>merge</code>时修改冲突文件工具<code>mergetool</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global merge.tool vimdiff</span><br><span class="line">git config --global merge.conflictstyle diff3</span><br><span class="line">git config --global mergetool.prompt false</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">让git mergetool不再生成备份文件(*.orig)</span>  </span><br><span class="line">git config --global mergetool.keepBackup false</span><br></pre></td></tr></table></figure>
<h4 id="修改远程库"><a href="#修改远程库" class="headerlink" title="修改远程库"></a>修改远程库</h4><p>参考文档：</p>
<p><a href="https://docs.github.com/zh/get-started/getting-started-with-git/managing-remote-repositories">官方文档</a> （推荐）</p>
<p><a href="https://zhuanlan.zhihu.com/p/571015337">linux下，git配置github</a> (讲的很细，也推荐)</p>
<p>拉取库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/dingdingqiuqiu/OS_NJU_Jsut2try</span><br></pre></td></tr></table></figure>
<p>修改库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd OS_NJU_Jsut2try</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /home/P4yl04d/Documents/OS_NJU_Jsut2try_my/* .</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;M32_C90_unsigned_BUG_try&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"># 回显：</span><br><span class="line"># origin  https://github.com/dingdingqiuqiu/OS_NJU_Jsut2try (fetch)</span><br><span class="line"># origin  https://github.com/dingdingqiuqiu/OS_NJU_Jsut2try (push)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin mian</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>git push -u origin main</code> 命令会将本地分支 <code>main</code> 推送到远程仓库 <code>origin</code> 中的 <code>main</code> 分支。如果您想将本地分支推送到远程仓库的其他分支，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u &lt;remote&gt; &lt;local_branch&gt;:&lt;remote_branch&gt;</span><br></pre></td></tr></table></figure>
<p>这个命令会将本地分支 <code>&lt;local_branch&gt;</code> 推送到远程仓库 <code>&lt;remote&gt;</code> 中的 <code>&lt;remote_branch&gt;</code> 分支。例如，如果您想将本地分支 <code>dev</code> 推送到远程仓库 <code>origin</code> 中的 <code>develop</code> 分支，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin dev:develop</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="本地文件上传库"><a href="#本地文件上传库" class="headerlink" title="本地文件上传库"></a>本地文件上传库</h4><p>参考文档：<br><a href="https://www.freecodecamp.org/news/introduction-to-git-and-github/#how-to-start-using-git-and-github">How to use git</a></p>
<p><a href="https://docs.github.com/zh/get-started/getting-started-with-git/managing-remote-repositories">官方文档</a> (推荐)</p>
<p>首先在<code>Github</code>上创建新仓库（不添加READ.MD文件）,官方这里也有介绍，我解释下每一句的意思。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212663&authkey=%21ANiKrfTOh3bHFkY&width=1854&height=902" width="1854" height="" /></p>
<p>首先在本地创建文件夹用于上传文件到<code>Github</code>中的仓库  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/P4yl04d/Documents                    </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir Leetcode</span><br></pre></td></tr></table></figure>
<p>进入文件夹，并对其初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入文件夹</span><br><span class="line">cd Leetcode</span><br><span class="line"></span><br><span class="line"># 创建README.md文件，并写入仓库名字</span><br><span class="line">echo &quot;# Leetcode&quot; &gt;&gt; README.md</span><br><span class="line"></span><br><span class="line"># 对文件夹进行初始化，主要是在该文件夹中创建.git文件，记录版本变化</span><br><span class="line"># rm -rf .git可撤销初始化操作</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"># 添加README.md文件到”预提交“处</span><br><span class="line">git add README.md</span><br><span class="line"></span><br><span class="line"># 进行实际提交命令，参数m用来标记提交信息</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line"></span><br><span class="line"># 把默认分支master**重命名**为main，让新版本被添加时处于main分支下</span><br><span class="line">git branch -M main</span><br><span class="line"></span><br><span class="line"># 添加一个名为origin的远程分支到git仓库</span><br><span class="line">git remote add origin git@github.com:dingdingqiuqiu/Leetcode.git</span><br><span class="line"></span><br><span class="line"># 把本地仓库的改变推送到远程仓库origin</span><br><span class="line"># -u参数将当前分支的上游分支(upstream branch)设置成origin/main</span><br><span class="line">#这允许您将来使用 git push 时无需指定远程名称和分支名称。</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<p><code>checkout</code>代表切换到<code>master</code>分支，<code>-b</code>参数代表如果不存在<code>master</code>分支，那就创建一个<code>master</code>分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b master</span><br></pre></td></tr></table></figure>
<h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><p>在某次<code>git push</code>后</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212824&authkey=%21ANiKrfTOh3bHFkY&width=796&height=199" width="796" height=" " /></p>
<p>进入<code>.ssh</code>文件夹，新建<code>config</code>文件，输入以下内容即可</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212826&authkey=%21ANiKrfTOh3bHFkY&width=1213&height=762" width="1213" height="" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br><span class="line">User git</span><br></pre></td></tr></table></figure>
<p><code>Arch</code>也碰到了相同的问题，同样方法解决即可</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212827&authkey=%21ANiKrfTOh3bHFkY&width=1896&height=986" width="1896" height=" " /></p>
<p>参考文档:<a href="https://blog.csdn.net/m0_62159662/article/details/125156695?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-1-125156695-blog-127533568.235^v39^pc_relevant_default_base&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4">ssh -T git@github.com ssh: connect to host github.com port 22: Connection refused 会报错_this key is not known by any other names.-CSDN博客</a></p>
]]></content>
      <categories>
        <category>环境搭建</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog多平台同步</title>
    <url>/2023/11/20/Blog%E5%A4%9A%E5%B9%B3%E5%8F%B0%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>本文主要记录了博客搭建的过程以及如何利用<code>git</code>实现多平台博客同步<br><span id="more"></span></p>
<h3 id="当前配置"><a href="#当前配置" class="headerlink" title="当前配置"></a>当前配置</h3><blockquote>
<p>原理及操作详解： <a href="https://blog.csdn.net/K1052176873/article/details/122879462">先看这个和视频，整懂原理</a></p>
<p>博客搭建推荐视频：<a href="https://www.bilibili.com/video/BV1cW411A7Jx/?spm_id_from=333.999.0.0&amp;vd_source=13e2561436a72606df7175a92524fa50">手把手教你搭建属于自己的hexo+github博客</a></p>
<p>图床推荐使用Onedrive : <a href="https://www.hortonyyx.com/article/image-bed">图床折腾之旅</a></p>
<p>博客迁移原理视频：<a href="https://www.bilibili.com/video/BV13g41147yV/?spm_id_from=333.999.0.0&amp;vd_source=13e2561436a72606df7175a92524fa50">备份和迁移hexo博客</a></p>
<p><code>Windows</code>:<code>hexo</code>部署平台所在地，已生成一定量的博客托管在<code>Github</code>上</p>
<p><code>Arch</code>:新系统,已有<code>nodejs</code>环境。</p>
<p><code>Github</code>：博客托管平台，<code>main</code>为主分支，计划以<code>master</code>分支作为部署文件。</p>
</blockquote>
<h3 id="添加标签页和分类页"><a href="#添加标签页和分类页" class="headerlink" title="添加标签页和分类页"></a>添加标签页和分类页</h3><p>参考文档：</p>
<p><a href="https://theme-next.iissnan.com/theme-settings.html">NexT使用官方文档</a></p>
<p><a href="https://hexo.io/zh-cn/docs/front-matter.html#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE">NexT标签分类页使用官方文档</a></p>
<p>在<code>next</code>主题的<code>_config.yml</code>配置文件中即可修改</p>
<p><code>menu</code>部分把<code>tags</code>和<code>categories</code>的注释取消掉</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<p>在<code>hexo-site</code>页面新建<code>tag</code>页面和<code>categories</code>页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd your-hexo-site</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd source/tags</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim index.md</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2023-11-24 16:50:27</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ../</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd categories</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim index.md</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2023-11-24 16:52:48</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h3 id="更改新建文章模板"><a href="#更改新建文章模板" class="headerlink" title="更改新建文章模板"></a>更改新建文章模板</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd your-hexo-site</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd scaffolds   </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim post.md</span><br></pre></td></tr></table></figure>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">mathjax: true</span><br><span class="line">tags:</span><br><span class="line"><span class="section">categories:</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>
<h3 id="同步原理"><a href="#同步原理" class="headerlink" title="同步原理"></a>同步原理</h3><p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212674&authkey=%21ANiKrfTOh3bHFkY&width=1238&height=456" width="1238" height="" /></p>
<p>更改<code>master</code>分支为默认分支（方便<code>Arch</code>通过<code>git clone</code>获得部署文件)</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212640&authkey=%21ANiKrfTOh3bHFkY&width=1920&height=924" width="1920" height="" /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212639&authkey=%21ANiKrfTOh3bHFkY&width=1920&height=924" width="1920" height="" /></p>
<p>选择后点<code>Update</code>即可，最后结果是</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212642&authkey=%21ANiKrfTOh3bHFkY&width=1920&height=924" width="1920" height="" /></p>
<p>把该分支克隆到本地，进入<code>dingdingqiuqiu.github.io</code>文件夹，可以看到分支为<code>master</code></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212644&authkey=%21ANiKrfTOh3bHFkY&width=1728&height=944" width="1728" height="" /></p>
<p>删除原分支除<code>.git</code>外的所有文件（这里误删了<code>.git</code>，后面将其恢复了），并将原<code>dingdingqiuqiu</code>文件里除<code>.deploy_git</code>外所有文件移动到<code>dingdingqiuqiu.github.io</code></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212646&authkey=%21ANiKrfTOh3bHFkY&width=1558&height=740" width="1558" height="" /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212648&authkey=%21ANiKrfTOh3bHFkY&width=1914&height=952" width="1914" height="" /></p>
<p>安装一些必要插件（可能不是很必要，装上也没啥影响）</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm -registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<blockquote>
<p>别随便装插件，容易产生依赖问题，报错看着很难受</p>
<p>用<code>gitbash</code>中的<code>cnpm</code>安装，用<code>npm</code>安装也会报错</p>
<p>然而用<code>cnpm</code>安装以后迁移<code>hexo</code>检测不到安装的模块</p>
<p>最后还是删除此模块后又用<code>npm</code>安装解决的问题。</p>
</blockquote>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212650&authkey=%21ANiKrfTOh3bHFkY&width=1481&height=944" width="1481" height="" /></p>
<p>最后剩下的文件结构</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212652&authkey=%21ANiKrfTOh3bHFkY&width=1710&height=952" width="1710" height="" /></p>
<p>注意到这里存在<code>.gitignore</code>文件，如果不存在，创建并写入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">_multiconfig.yml</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 注意，如果之前克隆过<code>theme</code>里的主题文件，应该把主题文件中的<code>.git</code>删除，因为<code>git</code>无法嵌套上传（我这里看了下，仅有<code>.github</code>，无<code>.git</code>，因此不必删除<code>.git</code>）</p>
</blockquote>
<p>最后将所有更改提交即可</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;new hexo file&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>提交后看下两个分支，<code>main</code>为静态<code>HTML</code>,<code>master</code>为博客部署文件，符合预期。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212656&authkey=%21ANiKrfTOh3bHFkY&width=1920&height=924" width="1920" height="" /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212655&authkey=%21ANiKrfTOh3bHFkY&width=1920&height=924" width="1920" height="" /></p>
<p>Linux下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:dingdingqiuqiu/dingdingqiuqiu.github.io.git</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#赋予文件夹被修改的权限，不然无法编辑</span><br><span class="line">chmod -R 777 dingdingqiuqiu.github.io.git</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd dingdingqiuqiu.github.io</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S npm</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一次配置时出了点问题，下面是第二次写的，首先，目录结构应该是这样的：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls                    </span><br><span class="line">_config.landscape.yml  _config.yml  package.json  package-lock.json  scaffolds  source  themes</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S npm</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo  </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install      </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli    </span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>-g</code>表示全局用户，这里其实应该用<code>npm</code>的，当时晚高峰，梯子效果不够好，就用了<code>cnpm</code>。</p>
<p>开梯子对安装似乎有效果，三次安装只有梯子延迟低的时候装上了</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##对post文件进行修改</span><br><span class="line">........</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;Arch&#x27;s commit&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>最后，两个平台在写博客之前先同步一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>
<p>参考文档：</p>
<p><a href="https://juejin.cn/post/6844903590474022925">Hexo博客多台电脑设备同步管理</a></p>
<p><a href="https://www.cnblogs.com/shuofxz/p/11736825.html#0-%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF">Hexo多台电脑同步</a></p>
<h3 id="后续添加的配置"><a href="#后续添加的配置" class="headerlink" title="后续添加的配置"></a>后续添加的配置</h3><h4 id="数学公式渲染"><a href="#数学公式渲染" class="headerlink" title="数学公式渲染"></a>数学公式渲染</h4><h5 id="第零步：探索"><a href="#第零步：探索" class="headerlink" title="第零步：探索"></a>第零步：探索</h5><blockquote>
<p> 参考<a href="https://myblackboxrecorder.com/use-math-in-hexo/">github-hexo渲染数学公式</a>，第0步的内容是根据别的博客进行的尝试，但这个引擎并没有生效，仅做记录用，从第一步往后的步骤有效。</p>
<p>以下命令执行均需在<code>dingdingqiuqiu.github.io\</code>下，因为<code>npm</code>需要安装包到<code>dingdingqiuqiu.github.io\node_modules</code>下</p>
</blockquote>
<p>npm设置代理下载(7890是clash的代理端口,走clash代理)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>
<p>卸载原有渲染引擎：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked</span><br></pre></td></tr></table></figure>
<p>下载新的渲染引擎</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pandoc </span><br></pre></td></tr></table></figure>
<p>然后在 <code>dingdingqiuqiu.github.io/themes/hexo-theme-next-7.8.0/_config.yml</code> 中将 <code>mathjax</code> 的 <code>enable</code> 打开。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  ...</span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>
<h5 id="第一步：安装MathJax"><a href="#第一步：安装MathJax" class="headerlink" title="第一步：安装MathJax"></a>第一步：安装MathJax</h5><p>MathJax就是我们用来渲染数学公式的js引擎。</p>
<p>不过在这之前，我们还需要卸载自带的hexo-math以避免冲突。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure>
<h5 id="第二步：更新MathJax的CDN链接"><a href="#第二步：更新MathJax的CDN链接" class="headerlink" title="第二步：更新MathJax的CDN链接"></a>第二步：更新MathJax的CDN链接</h5><p>由于MathJax官方cdn已停止维护，其他cdn也有如不稳定，必须翻墙等问题，我找到了一个可以使用的cdn地址。</p>
<p>以下命令显示版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm show mathjax version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.2.2</span></span><br></pre></td></tr></table></figure>
<p>打开<code>dingdingqiuqiu.github.io/node_modules/hexo-renderer-mathjax/mathjax.html</code></p>
<p>将最后一行cdn地址改为（版本可以根据实际情况修改，我根据上述命令得到版本是3.2.2）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn.bootcss.com/mathjax/3.2.2/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h5 id="第三步：更换默认渲染引擎"><a href="#第三步：更换默认渲染引擎" class="headerlink" title="第三步：更换默认渲染引擎"></a>第三步：更换默认渲染引擎</h5><p>Hexo默认的渲染引擎hexo-renderer-marked对MathJax的支持很不好，我们修改为kramed引擎</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<h5 id="第四步：更改转义规则"><a href="#第四步：更改转义规则" class="headerlink" title="第四步：更改转义规则"></a>第四步：更改转义规则</h5><blockquote>
<p>转义规则原博客作者是错的，这里给出正确的。</p>
</blockquote>
<p>因为 hexo 默认的转义规则会将一些字符进行转义，比如 <code>_</code> 转为 <code>&lt;em&gt;</code> ，所以我们需要对默认的规则进行修改。<br>首先， 打开<code>dingdingqiuqiu.github.io/node_modules/kramed/lib/rules/inline.js</code></p>
<p>把：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br></pre></td></tr></table></figure>
<p>更改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br></pre></td></tr></table></figure>
<p>把：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure>
<p>更改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure>
<h5 id="第五步：使用hexo-filter-mathjax"><a href="#第五步：使用hexo-filter-mathjax" class="headerlink" title="第五步：使用hexo-filter-mathjax"></a>第五步：使用hexo-filter-mathjax</h5><p>对部分支持<code>MathJax</code>的主题来说，只需在主题配置文件将相关配置项开启即可使用<code>MathJax</code>。但对很多主题，如我使用的<code>CleanBlog</code>主题来说，没有这样的功能。有一个工具可以帮助我们：<a href="https://github.com/next-theme/hexo-filter-mathjax">hexo-filter-mathjax</a>。</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mathjax --save</span><br></pre></td></tr></table></figure>
<p>对需要开启的博文，在其Front-Matter处增加mathjax: true这一行即可，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: On the Electrodynamics of Moving Bodies</span><br><span class="line">categories: Physics</span><br><span class="line">date: 1905-06-30 12:00:00</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>如果你还想配一些个性化需求，可以在<code>hexo-filter-mathjax</code>的教程中查看。</p>
<p>这样就大功告成了，写<code>MarkDown</code>的时候正常写数学公式，就可以在生成的博客中展示。</p>
<h5 id="第六步：修复无法渲染块级公式的BUG"><a href="#第六步：修复无法渲染块级公式的BUG" class="headerlink" title="第六步：修复无法渲染块级公式的BUG"></a>第六步：修复无法渲染块级公式的BUG</h5><blockquote>
<p>当前配置渲染行内公式有效，对于块级公式，仍无法渲染，更换<code>hexo-renderer-marked</code>版本即可。</p>
<p>参考：<a href="https://blog.csdn.net/weixin_44634312/article/details/120197899">hexo latex 换行 多行公式 终极解决方案</a></p>
</blockquote>
<p>更换版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked@1.0.0 --save</span><br></pre></td></tr></table></figure>
<p>编辑<code>dingdingqiuqiu.github.io\node_modules\marked\lib\marked.js</code></p>
<p>539行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">escape: /^\\([!&quot;#$%&amp;&#x27;()*+,\-./:;&lt;=&gt;?@\[\]\\^_`&#123;|&#125;~])/,</span><br><span class="line">改成</span><br><span class="line">escape: /^\\([!&quot;#$&amp;&#x27;()*+,\-./:;&lt;=&gt;?@\[\]^_`|~])/,</span><br></pre></td></tr></table></figure>
<p>564行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inline._escapes = /\\([!&quot;#$%&amp;&#x27;()*+,\-./:;&lt;=&gt;?@\[\]\\^_`&#123;|&#125;~])/g;</span><br><span class="line">改成</span><br><span class="line">inline._escapes = /\\([!&quot;#$&amp;&#x27;()*+,\-./:;&lt;=&gt;?@\[\]^_`|~])/g;</span><br></pre></td></tr></table></figure>
<h4 id="中文目录跳转"><a href="#中文目录跳转" class="headerlink" title="中文目录跳转"></a>中文目录跳转</h4><ul>
<li>在next github 上已经提出了该问题并给出了<a href="https://www.zywvvd.com/pages/go.html?goUrl=https%3A%2F%2Fgithub.com%2Ftheme-next%2Fhexo-theme-next%2Fpull%2F1540%2Ffiles">解决方案</a></li>
<li>修改<code>dingdingqiuqiu.github.io\themes\hexo-theme-next-7.8.0\source\js\utils.js</code>中的以下函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">registerSidebarTOC</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> navItems = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.post-toc li&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> sections = [...navItems].<span class="title function_">map</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> link = element.<span class="title function_">querySelector</span>(<span class="string">&#x27;a.nav-link&#x27;</span>);</span><br><span class="line"> <span class="keyword">var</span> target = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="built_in">decodeURI</span>(link.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>)).<span class="title function_">replace</span>(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    <span class="comment">// TOC item animation navigate.</span></span><br><span class="line">    link.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">      event.<span class="title function_">preventDefault</span>();</span><br><span class="line">      <span class="comment">//var target = document.getElementById(event.currentTarget.getAttribute(&#x27;href&#x27;).replace(&#x27;#&#x27;, &#x27;&#x27;));</span></span><br><span class="line">      <span class="keyword">var</span> offset = target.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span> + <span class="variable language_">window</span>.<span class="property">scrollY</span>;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">anime</span>(&#123;</span><br><span class="line">        targets  : <span class="variable language_">document</span>.<span class="property">scrollingElement</span>,</span><br><span class="line">        duration : <span class="number">500</span>,</span><br><span class="line">        easing   : <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">        <span class="attr">scrollTop</span>: offset + <span class="number">10</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//return document.getElementById(link.getAttribute(&#x27;href&#x27;).replace(&#x27;#&#x27;, &#x27;&#x27;));</span></span><br><span class="line"> <span class="keyword">return</span> target;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h4><blockquote>
<p>参考这篇:<a href="https://yashuning.github.io/2018/06/29/hexo-Next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/">hexoNext主题添加站内搜索</a></p>
</blockquote>
<h5 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h5><p>博客根目录下执行以下代码安装插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<h5 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h5><p>安装完成，编辑博客配置文件：<code>_config.yml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<h5 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h5><p>Next 主题自带搜索设置，编辑主题配置文件：<code>_config.yml</code></p>
<p>找到文件中 Local search 的相关配置，设为 <code>true</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<p>hexo 重新部署</p>
<h3 id="BUG-hexo-d失败"><a href="#BUG-hexo-d失败" class="headerlink" title="BUG:hexo d失败"></a>BUG:hexo d失败</h3><p>梯子换成TUN模式重新尝试即可。</p>
]]></content>
      <categories>
        <category>环境搭建</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Bomb二进制炸弹拆弹实验</title>
    <url>/2023/11/21/Bomb%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%82%B8%E5%BC%B9%E6%8B%86%E5%BC%B9%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<p>本文是对计算机系统基础第二次实验的复现，涉及<code>gdb</code>使用和汇编语言学习两个知识点。<br><span id="more"></span></p>
<h3 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h3><p>1.本文图片托管在<code>Onedrive</code>上，请自备梯子，否则图片无法正常显示</p>
<p>2.感谢<a href="https://blog.csdn.net/ailbj/article/details/134863333?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170202139316800192229870%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=170202139316800192229870&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-1-134863333-null-null.142^v96^pc_search_result_base2&amp;utm_term=%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%82%B8%E5%BC%B9%E6%8B%86%E5%BC%B9%E5%AE%9E%E9%AA%8C&amp;spm=1018.2226.3001.4187">二进制炸弹拆弹实验</a>对本文的引用</p>
<p>3.推荐使用工具<code>IDA</code>可以更方便地解决问题，本文更偏向汇编分析，建议读者自行了解<code>IDA</code>的使用</p>
<h3 id="一些准备"><a href="#一些准备" class="headerlink" title="一些准备"></a>一些准备</h3><p>一、下载<br>我们默认把peda、pwngdb、pwndbg都安装用户的根目录下，可以减少一些文件的改动。</p>
<p>root下，下载 前先进入用户根目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure>
<p>下载<code>Pwngdb</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/scwuaptx/Pwngdb.git </span><br></pre></td></tr></table></figure>
<p>下载<code>pwndbg</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/pwndbg/pwndbg</span><br></pre></td></tr></table></figure>
<p>下载<code>peda</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/longld/peda.git</span><br></pre></td></tr></table></figure>
<p>下载<code>gef</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hugsy/gef.git</span><br></pre></td></tr></table></figure>
<p>下载完成后目录如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls</span><br><span class="line">peda  pwndbg  Pwngdb gef</span><br></pre></td></tr></table></figure>
<p>二、配置</p>
<p>先安装<code>pwndbg</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ～/pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure>
<p>插件配置</p>
<blockquote>
<p>打开文件后文件内容修改如下，这里要注意<code>source /root/pwndbg/gdbinit.py</code>一定要在<code>source /root/Pwngdb/angelheap/gdbinit.py</code>前面，要不然会使用默认配置。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/gdb/gdbinit</span><br></pre></td></tr></table></figure>
<p><code>gdb</code>的全局用户配置目录在<code>/etc/gdb/gdbinit</code>，为使得<code>pwndbg</code>汇编各式为<code>AT&amp;T</code>，在该文件中添加<code>set disassembly-flavor att</code></p>
<p><code>set debuginfod enabled on</code>是<code>/root/pwndbg/.gdbinit</code>中自带的，我给迁移过来了，还有中间的<code>define ......</code>也是自带的，使用时通过对<code>source /root/peda/peda.py</code>和<code>source /root/pwndbg/gdbinit.py</code>和<code>source /root/gef/gef.py</code>加解注释实现不同插件的使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /root/pwndbg/gdbinit.py</span><br><span class="line">#source /root/peda/peda.py</span><br><span class="line">#source /root/gef/gef.py</span><br><span class="line">source /root/Pwngdb/pwngdb.py</span><br><span class="line">source /root/Pwngdb/angelheap/gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line">import angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">set debuginfod enabled on</span><br><span class="line">set disassembly-flavor att</span><br></pre></td></tr></table></figure>
<p>若想在普通用户下使用原版<code>gdb</code>，需要将第7-12行注释掉。</p>
<h3 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h3><p>answer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Public speaking is very easy.</span><br><span class="line">1 2 6 24 120 720</span><br><span class="line">7 b 524</span><br><span class="line">9 austinpowers </span><br><span class="line">/0%+-!</span><br><span class="line">4 2 6 3 1 5 </span><br><span class="line">1001</span><br></pre></td></tr></table></figure>
<p>反汇编代码如下</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212733&authkey=%21ANiKrfTOh3bHFkY&width=686&height=366" width="686" height=" " /></p>
<p>这里的关键函数显然是<strings_not_equal>，在执行<strings_not_equal>时，两个参数入栈，经过实际测试（这里使用了gdb的一个插件pwndbg），一个参数是输入，一个参数是目标字符串，测试过程如下：</p>
<p>我们在输入时尝试输入字符串”11111111”时</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212728&authkey=%21ANiKrfTOh3bHFkY&width=924&height=282" width="924" height="" /></p>
<p>查看下栈信息，可以看到ebx+0x8的内存地址存的数据为0x804b680，根据反汇编代码，这个数据要传给eax,然后作为一个参数入栈，另一个参数是立即数0x80497c0</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212739&authkey=%21ANiKrfTOh3bHFkY&width=1170&height=128" width="1170" height=" " /></p>
<p>接下来打印传入的两个参数作为内存地址储存了什么字符串：</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212754&authkey=%21ANiKrfTOh3bHFkY&width=624&height=104" width="624" height=" " /></p>
<p>可以看到传参确实符合猜测，eax存放输入字符串的内存地址，立即数0x80497c0存放目标字符串的内存地址。</p>
<p>动态调试同时发现strings_not_equal函数通过比较传入字符串和目标字符串，改变eax的数值，相等eax为0,不等为1,也符合<code>&lt;+28&gt;</code>,<code>&lt;+30&gt;</code>处的判断;</p>
<p>我们已经知道了目标字符串是“Public speaking is very easy.”，尝试传入结果，通过检测。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212741&authkey=%21ANiKrfTOh3bHFkY&width=810&height=146" width="810" height=" " /></p>
<h3 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h3><p>反汇编代码</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212757&authkey=%21ANiKrfTOh3bHFkY&width=620&height=728" width="620" height=" " /></p>
<p>注意这里<code>&lt;+19&gt;</code>处要读入六个数字，我们确定了字符类型为六个数字，我们这里不妨输入”1 2 3 4 5 6”，执行<code>&lt;+19&gt;</code>处</p>
<p><code>&lt;read_six_numbers&gt;</code>后，栈变成了以下模样</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212730&authkey=%21ANiKrfTOh3bHFkY&width=998&height=264" width="998" height="" /></p>
<p>很明显<code>&lt;+27&gt;</code>处<code>cmpl  $1, -0x18(%ebp)</code>是将立即数1与栈上<code>%ebp-0x18</code>地址存放的地址<code>0xffffcc00</code>指向内容（第一个数字<code>1</code>）比较，我们这里满足，后面的关键就是要过下面这一段的循环</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212759&authkey=%21ANiKrfTOh3bHFkY&width=1130&height=288" width="1130" height=" " /></p>
<p>这里关键的地方在与<code>&lt;+46&gt;</code>处的相乘操作，这一步实际上实现了<code>v[i] = v[i-1] * i</code>的效果，这里eax原本是下标<code>i</code>（因为<code>&lt;+46&gt;</code>处)，而<code>-4（%esi,%ebx,4)</code>实际上对应了上一个数字<code>v[i-1]</code>。两个数相乘结果放在eax里，再比较参数<code>v[i]</code>是否等于eax。根据参数1为1。我们可以构造<code>1 2 6 24 120 720</code>，尝试输入，满足题意。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212745&authkey=%21ANiKrfTOh3bHFkY&width=652&height=142" width="652" height=" " /></p>
<h3 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h3><p>反汇编代码：</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212727&authkey=%21ANiKrfTOh3bHFkY&width=732&height=960" width="732" height=" " /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212747&authkey=%21ANiKrfTOh3bHFkY&width=640&height=668" width="640" height=" " /></p>
<p>首先看下<code>sscanf@plt</code>的调用，了解到该函数的第一个参数是字符串，第二个参数是格式,同时，该函数返回匹配的参数个数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sscanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Example:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">int</span> day, year;</span><br><span class="line">   <span class="type">char</span> weekday[<span class="number">20</span>], month[<span class="number">20</span>], dtm[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">   <span class="built_in">strcpy</span>( dtm, <span class="string">&quot;Saturday March 25 1989&quot;</span> );</span><br><span class="line">   <span class="built_in">sscanf</span>( dtm, <span class="string">&quot;%s %s %d  %d&quot;</span>, weekday, month, &amp;day, &amp;year );</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%s %d, %d = %s\n&quot;</span>, month, day, year, weekday );</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//result</span></span><br><span class="line"><span class="comment">//March 25, 1989 = Saturday</span></span><br></pre></td></tr></table></figure>
<p>我们关心格式，打印下格式</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212758&authkey=%21ANiKrfTOh3bHFkY&width=534&height=146" width="534" height=" " /></p>
<p>这里可以看到edx保存了输入字符串保存的地址。输入格式是“%d %c %d”,可以看到后面eax需要大于2，也就是说输入需要完全匹配这个格式。再往后会把栈中数据和0x7比较，看下栈上数据即可，动态调试发现这个数据就是输入‘’%d %c %d‘’中的第一个%d,至于为什么这个数据被放栈上了，实际上是在sscanf执行前的参数入栈决定的，这是入栈的参数</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212751&authkey=%21ANiKrfTOh3bHFkY&width=1278&height=182" width="1278" height=" " /></p>
<p>执行sscanf以后</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212770&authkey=%21ANiKrfTOh3bHFkY&width=1320&height=170" width="1320" height=" " /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212746&authkey=%21ANiKrfTOh3bHFkY&width=1192&height=122" width="1192" height=" " /></p>
<p>可以看到，符合预期，后面的重点放在0xffffcbfc 0xffffcc03 0xffffcc04处即可，容易发现，他们也在栈上，并且，0xffffcbfc处恰好就是要与0x7比较的栈上数据，ja是无符号大于，+240处是炸弹，也就是这里参数一小于等于7,且无符号数。后面，参数1作为偏移量，跳转到0x80497e8加偏移量乘4内存处地址存放的数据指向的指令，看下这个指令在哪个地址（这里以0作为偏移量)。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212749&authkey=%21ANiKrfTOh3bHFkY&width=358&height=372" width="358" height=" " /></p>
<p>很容易可以看到，这里参数1为0时，要跳转到0x8048be0,这里观察发现其实就是跳转到&lt;+72&gt;的位置</p>
<p>继续往下走</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212732&authkey=%21ANiKrfTOh3bHFkY&width=976&height=314" width="976" height=" " /></p>
<p>这里0x309和第二个%d比较，0x71ffcb80的低位和0x71比较，这里都是正确的，直接结束程序，进入下一阶段，当然根据偏移量的不同，该题答案不同，其他偏移量的情况大多也与该次情况类似，不多赘述。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212737&authkey=%21ANiKrfTOh3bHFkY&width=1264&height=260" width="1264" height=" " /></p>
<p>经过实验，该题八种不同的答案为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 q 777</span><br><span class="line">1 b 214</span><br><span class="line">2 b 755</span><br><span class="line">3 k 251</span><br><span class="line">4 o 160</span><br><span class="line">5 t 458</span><br><span class="line">6 v 780</span><br><span class="line">7 b 524</span><br></pre></td></tr></table></figure>
<p>实验结果</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212721&authkey=%21ANiKrfTOh3bHFkY&width=546&height=116" width="546" height=" " /></p>
<h3 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h3><p>反汇编代码如下</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212736&authkey=%21ANiKrfTOh3bHFkY&width=680&height=578" width="680" height=" " /></p>
<p>sscanf函数重合了，看下格式要求输入数字，大致看了一眼汇编，发现这个数字需要大于0,该数字同时作为参数传入fun4,fun4的返回值要是55（0x37）,所以关键就落在了fun4上</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212742&authkey=%21ANiKrfTOh3bHFkY&width=638&height=636" width="638" height=" " /></p>
<p>这里0x8(%ebp)位置为上一个栈帧，保存了传入参数9，也就是，当传参小于1时，直接给eax置1,返回。</p>
<p>否则，执行fun(n-1)+fun(n-2),明显是递归，c代码尝试逆向如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func4</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt;= <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> func4(n<span class="number">-1</span>)+func(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解密程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func4</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> func4(n<span class="number">-1</span>)+func4(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">55</span>; <span class="comment">// 该函数的返回值</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(func4(n) != result)&#123;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;该函数的传入值为：%d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译运行，结果为9,尝试输入9,结果正确。实验结果：</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212719&authkey=%21ANiKrfTOh3bHFkY&width=530&height=108" width="530" height=" " /></p>
<h3 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h3><p>反汇编代码如下：</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212729&authkey=%21ANiKrfTOh3bHFkY&width=710&height=916" width="710" height=" " /></p>
<p>汇编信息：前面一段保证字符串需要有六个字符，到&lt;+38&gt;处看一眼，打印下0x804b220</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212725&authkey=%21ANiKrfTOh3bHFkY&width=912&height=82" width="912" height=" " /></p>
<p>容易知道，这段数组的存放地址被放入了esi寄存器，经历五轮循环，依次取出输入字符，取出字符后仅要低四位，作为数组该数组的数组下标取出字符，放入al寄存器以后转移到0xffffcc00，可以看到第一次取出字符‘O’(0x4f)，截取出0xf（15），作为下标，取出arry[15],即字符‘g’，放入0xffffcc00的位置，如此经历循环，直到0xffcc00处有六个字符。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212753&authkey=%21ANiKrfTOh3bHFkY&width=1892&height=1046" width="1892" height=" " /></p>
<p>后面执行strings_not_equal函数，入栈两个参数，一个是0xffffcc00，即-2(%ebp)，也即%ecx，一个是0x804980b，看下0x804980b，发现是字符串“giants”。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212720&authkey=%21ANiKrfTOh3bHFkY&width=1428&height=54" width="1428" height=" " /></p>
<p>该字符串中字符在开头数组中的下标依次是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0xf</span> <span class="number">0x0</span> <span class="number">0x5</span> <span class="number">0xb</span> <span class="number">0xd</span> <span class="number">0x1</span></span><br></pre></td></tr></table></figure>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212725&authkey=%21ANiKrfTOh3bHFkY&width=912&height=82" width="912" height=" " /></p>
<p>根据ASCII码表，可知</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0xf</span>&#123;<span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;?&#x27;</span> <span class="string">&#x27;O&#x27;</span> <span class="string">&#x27;_&#x27;</span> <span class="string">&#x27;o&#x27;</span>&#125;</span><br><span class="line"><span class="number">0x0</span>&#123;<span class="string">&#x27;0&#x27;</span> <span class="string">&#x27;@&#x27;</span> <span class="string">&#x27;P&#x27;</span> <span class="string">&#x27;`&#x27;</span> <span class="string">&#x27;p&#x27;</span>&#125;</span><br><span class="line"><span class="number">0x5</span>&#123;<span class="string">&#x27;%&#x27;</span> <span class="string">&#x27;5&#x27;</span> <span class="string">&#x27;E&#x27;</span> <span class="string">&#x27;U&#x27;</span> <span class="string">&#x27;e&#x27;</span> <span class="string">&#x27;u&#x27;</span>&#125;</span><br><span class="line"><span class="number">0xb</span>&#123;<span class="string">&#x27;+&#x27;</span> <span class="string">&#x27;;&#x27;</span> <span class="string">&#x27;K&#x27;</span> <span class="string">&#x27;[&#x27;</span> <span class="string">&#x27;k&#x27;</span> <span class="string">&#x27;&#123;&#x27;</span>&#125;</span><br><span class="line"><span class="number">0xd</span>&#123;<span class="string">&#x27;-&#x27;</span> <span class="string">&#x27;=&#x27;</span> <span class="string">&#x27;M&#x27;</span> <span class="string">&#x27;]&#x27;</span> <span class="string">&#x27;m&#x27;</span> <span class="string">&#x27;&#125;&#x27;</span>&#125;</span><br><span class="line"><span class="number">0x2</span>&#123;<span class="string">&#x27;！&#x27;</span> <span class="string">&#x27;1&#x27;</span> <span class="string">&#x27;A&#x27;</span> <span class="string">&#x27;Q&#x27;</span> <span class="string">&#x27;a&#x27;</span> <span class="string">&#x27;q&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>从上到下依次在大括号里随机选择一个字符组成字符串即可。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212765&authkey=%21ANiKrfTOh3bHFkY&width=1128&height=742" width="1128" height=" " /></p>
<p>试验结果</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212761&authkey=%21ANiKrfTOh3bHFkY&width=548&height=116" width="548" height=" " /></p>
<h3 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h3><p>反汇编后代码如下</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212752&authkey=%21ANiKrfTOh3bHFkY&width=662&height=984" width="662" height=" " /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212767&authkey=%21ANiKrfTOh3bHFkY&width=728&height=992" width="728" height=" " /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212750&authkey=%21ANiKrfTOh3bHFkY&width=726&height=76" width="726" height=" " /></p>
<p>前面代码逻辑比较简单，read_six_numbers函数将尝试输入的字符“1 2 3 4 5 6”放在栈上的特定位置，以便后续使用；并将链表的第一个元素node1(0x804b26c)放栈上；同时，我们打印链表的结构，方便后续使用。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212762&authkey=%21ANiKrfTOh3bHFkY&width=814&height=356" width="814" height=" " /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212744&authkey=%21ANiKrfTOh3bHFkY&width=790&height=290" width="790" height="" /></p>
<p>下一阶段是和一个循环一起使用来保证输入的每一个数均小于等于6</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212722&authkey=%21ANiKrfTOh3bHFkY&width=790&height=326" width="790" height=" " /></p>
<p>继续向下读，结合上面这段，发现这不但是个循环，还是个双层循环，这段需要仔细读。我会给出C风格的伪代码来方便理解。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212743&authkey=%21ANiKrfTOh3bHFkY&width=772&height=618" width="772" height=" " /></p>
<p>这一段的伪代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[i] &gt; <span class="number">6</span>)</span><br><span class="line">            explode_bomb();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>;j &lt;=<span class="number">5</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i] == v[j])</span><br><span class="line">            explode_bomb();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段保证了输入的六个数字均小于等于6,且互不相等。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212772&authkey=%21ANiKrfTOh3bHFkY&width=694&height=576" width="694" height=" " /></p>
<p>应该注意到，这块代码大概分成两个部分，在&lt;+120&gt;前，主要进行了一些栈初始化的操作，以方便接下来的使用。&lt;+120&gt;到&lt;+170&gt;是一个大循环。主要是将链表以输入数字的顺序依次放在栈空间上，核心操作步骤是&lt;+163&gt;,循环结束后形成的栈如下图所示。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212735&authkey=%21ANiKrfTOh3bHFkY&width=1000&height=542" width="1000" height=" " /></p>
<p>后面这段根据栈上链表的顺序，对原链表进行了重新指向设定。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212740&authkey=%21ANiKrfTOh3bHFkY&width=644&height=222" width="644" height="" /></p>
<p>这段循环执行后链表的结构如图所示</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212755&authkey=%21ANiKrfTOh3bHFkY&width=756&height=312" width="756" height=" " /></p>
<p>来看最后一部分</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212769&authkey=%21ANiKrfTOh3bHFkY&width=726&height=428" width="726" height=" " /></p>
<p>可将其分成3部分。第一部分是&lt;+216&gt;之前的栈/寄存器初始化，第二部分是&lt;+216&gt;至&lt;+237&gt;之间的循环体，第三部分是之后的销毁栈指令。重点在循环体处，在循环中，要求每一个链表后的元素必须小于或等于当前链表中的元素。因此，我们将初始链表进行排序，作为输入参数传入，即可拆弹成功。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212766&authkey=%21ANiKrfTOh3bHFkY&width=630&height=102" width="630" height=" " /></p>
<h3 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret_phase"></a>secret_phase</h3><p>入口寻找比较简单，注意到每次通过一个phase,都会经过一个phase_defused函数，反汇编看下，这个函数是干嘛的。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212731&authkey=%21ANiKrfTOh3bHFkY&width=732&height=818" width="732" height=" " /></p>
<p>&lt;+7&gt;处的比较要求0x804b480处的值与0x6相等。下面是通过第一阶段以后的0x804b480,经过尝试，每通过一个阶段，储存在该位置的数据加一，此处相当于记录了通过的关数，因此，只有走第六关以后的那个phase_defused函数才能进入secret_phase。实际上，incl num_input_strings在每个阶段执行前的<read_line+180>处执行，因此，每到一关，0x804b480处的数值加一。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212738&authkey=%21ANiKrfTOh3bHFkY&width=586&height=52" width="586" height=" " /></p>
<p>再往下走发现熟悉的sscanf函数，看下传入参数</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212768&authkey=%21ANiKrfTOh3bHFkY&width=742&height=120" width="742" height="" /></p>
<p>应该注意到，这里的“9 ”是第四关输入数据，检测的格式是“%d %s”,这是否提示我们：第四关的输入不止有“9”，还有一个字符串？继续向下看，要求sscanf返回值为2,也就是我们必须再输入一个字符串。注意到下面还有strings_not_equal函数，我们查看该函数的入栈参数，判断需要输入字符串的具体情况。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212764&authkey=%21ANiKrfTOh3bHFkY&width=952&height=76" width="952" height=" " /></p>
<p>所以，我们在第四行“9”后面输入“austinpowers”,开启secret_phase函数。看下secret_phase函数的反汇编代码</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212748&authkey=%21ANiKrfTOh3bHFkY&width=780&height=746" width="780" height="" /></p>
<p>汇编的逻辑并不复杂，把输入字符串转成长整型之后，该长整型数据大小必须小于或等于1001,并与n1一起传入函数fun7,要求函数fun7的返回值为7。我们重点关注fun7实现的功能。</p>
<p>fun7的反汇编如下</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212726&authkey=%21ANiKrfTOh3bHFkY&width=698&height=870" width="698" height=" " /></p>
<p>可知道，该函数实现了对二叉树的操作，先打印下传入的二叉树。我们从传入fun7的n1参数，即根节点0x804b320开始打印该二叉树。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212771&authkey=%21ANiKrfTOh3bHFkY&width=708&height=702" width="708" height="" /></p>
<p>我们可以把这棵树画出来</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">         <span class="number">36</span></span><br><span class="line">    <span class="number">8</span>          <span class="number">50</span></span><br><span class="line"> <span class="number">6</span>    <span class="number">22</span>    <span class="number">45</span>    <span class="number">107</span></span><br><span class="line"><span class="number">1</span> <span class="number">7</span> <span class="number">20</span> <span class="number">35</span> <span class="number">40</span> <span class="number">47</span> <span class="number">99</span> <span class="number">1001</span>           </span><br></pre></td></tr></table></figure>
<p>这个阶段的汇编并不复杂，主要是根据传入数据和当前节点递归处理来寻找目标二叉树节点，并对返回值进行处理。传入数据如果大于该节点储存的值，向左寻找，向左寻找会将被递归的fun7的返回值n进行（n<code>*</code>2+1）的处理；传入数据如果小于储存的值，向右寻找，向右边寻找会将被递归的fun7的返回值n进行(n<code>*</code>2)的处理；如果传入数据等于当前节点，直接返回0。因此只能一直向右左边边寻找得到1001，倘若在107-1001之间，&lt;+14&gt;处不会跳转，eax会变0xffffff,也不满足题目意思，因此，只能找到1001节点本身。自然，答案是1001。我们最后来验证一下成果：</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212734&authkey=%21ANiKrfTOh3bHFkY&width=1888&height=280" width="1888" height=" " /></p>
<p>可以看到所有阶段，包括secret stage阶段，都已经被攻克。</p>
<h3 id="phase-6-调试记录"><a href="#phase-6-调试记录" class="headerlink" title="phase_6_调试记录"></a>phase_6_调试记录</h3><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) disas phase_6</span><br><span class="line">Dump of assembler code for function phase_6:</span><br><span class="line">   ;第一部分</span><br><span class="line">   0x08048d98 &lt;+0&gt;:     push   %ebp						;基地指针入栈</span><br><span class="line">   0x08048d99 &lt;+1&gt;:     mov    %esp,%ebp				;栈顶栈底指针统一</span><br><span class="line">   0x08048d9b &lt;+3&gt;:     sub    $0x4c,%esp				;开辟栈空间</span><br><span class="line">   0x08048d9e &lt;+6&gt;:     push   %edi						;参数入栈</span><br><span class="line">   0x08048d9f &lt;+7&gt;:     push   %esi						;参数入栈</span><br><span class="line">   0x08048da0 &lt;+8&gt;:     push   %ebx						;参数入栈</span><br><span class="line">   0x08048da1 &lt;+9&gt;:     mov    0x8(%ebp),%edx			;把%epd加0x8指向内容给%edx</span><br><span class="line">   0x08048da4 &lt;+12&gt;:    movl   $0x804b26c,-0x34(%ebp)	;立即数放栈上</span><br><span class="line">   0x08048dab &lt;+19&gt;:    add    $0xfffffff8,%esp			;由于模运算的性质，多开辟了(f-8)空间</span><br><span class="line">   0x08048dae &lt;+22&gt;:    lea    -0x18(%ebp),%eax			;把%ebp-0x18值送入%eax(栈上地址入寄存器)</span><br><span class="line">   0x08048db1 &lt;+25&gt;:    push   %eax						;参数入栈</span><br><span class="line">   0x08048db2 &lt;+26&gt;:    push   %edx						;参数入栈</span><br><span class="line">   0x08048db3 &lt;+27&gt;:    call   0x8048fd8 &lt;read_six_numbers&gt; ;函数调用</span><br><span class="line">   </span><br><span class="line">   ;第二部分</span><br><span class="line">   0x08048db8 &lt;+32&gt;:    xor    %edi,%edi				;edi归零</span><br><span class="line">   0x08048dba &lt;+34&gt;:    add    $0x10,%esp				;栈空间减少</span><br><span class="line">   0x08048dbd &lt;+37&gt;:    lea    0x0(%esi),%esi			;空指令</span><br><span class="line">   ;第五部分</span><br><span class="line">   0x08048dc0 &lt;+40&gt;:    lea    -0x18(%ebp),%eax			;把%ebp-0x18值送入%eax</span><br><span class="line">   0x08048dc3 &lt;+43&gt;:    mov    (%eax,%edi,4),%eax		;把%eax+%edi*4值指向内存地址(在栈上)送入%eax</span><br><span class="line">   0x08048dc6 &lt;+46&gt;:    dec    %eax						;%eax减一送入%eax</span><br><span class="line">   0x08048dc7 &lt;+47&gt;:    cmp    $0x5,%eax				;计算%eax-0x5，改变标志位</span><br><span class="line">   0x08048dca &lt;+50&gt;:    jbe    0x8048dd1 &lt;phase_6+57&gt;   ;`below or equal`跳转（%eax-0x5&lt;=0跳）</span><br><span class="line">   0x08048dcc &lt;+52&gt;:    call   0x80494fc &lt;explode_bomb&gt; ;上一步不跳转就炸了</span><br><span class="line">   </span><br><span class="line">   ;第三部分</span><br><span class="line">   0x08048dd1 &lt;+57&gt;:    lea    0x1(%edi),%ebx			;%edi+1放入%ebx</span><br><span class="line">   0x08048dd4 &lt;+60&gt;:    cmp    $0x5,%ebx				;计算%ebx-0x5,改变标志位</span><br><span class="line">   0x08048dd7 &lt;+63&gt;:    jg     0x8048dfc &lt;phase_6+100&gt;	;`greater`跳转(%ebx-0x5&gt;0跳) </span><br><span class="line">   0x08048dd9 &lt;+65&gt;:    lea    0x0(,%edi,4),%eax		;%edi*4值送入%eax</span><br><span class="line">   0x08048de0 &lt;+72&gt;:    mov    %eax,-0x38(%ebp)			;%eax指向的值送入栈上（%ebp-0x38）</span><br><span class="line">   0x08048de3 &lt;+75&gt;:    lea    -0x18(%ebp),%esi			;%ebp-0x18送入%esi</span><br><span class="line">   0x08048de6 &lt;+78&gt;:    mov    -0x38(%ebp),%edx			;%ebp-0x38指向的值送入%edx</span><br><span class="line">--Type &lt;RET&gt; for more, q to quit, c to continue without paging--c</span><br><span class="line">   0x08048de9 &lt;+81&gt;:    mov    (%edx,%esi,1),%eax		;%edx+%esi*1指向的值送入%eax</span><br><span class="line">   0x08048dec &lt;+84&gt;:    cmp    (%esi,%ebx,4),%eax		;%eax值-（%esi+%ebx*4）指向的值改变标志位</span><br><span class="line">   0x08048def &lt;+87&gt;:    jne    0x8048df6 &lt;phase_6+94&gt;	;`not equal`不相等跳转（...！=0跳）</span><br><span class="line">   0x08048df1 &lt;+89&gt;:    call   0x80494fc &lt;explode_bomb&gt; ;上一步必须跳，不然炸弹炸了</span><br><span class="line">   0x08048df6 &lt;+94&gt;:    inc    %ebx						;`increment`,相当于%ebx++</span><br><span class="line">   0x08048df7 &lt;+95&gt;:    cmp    $0x5,%ebx				;%ebx-0x5,改变标志位</span><br><span class="line">   0x08048dfa &lt;+98&gt;:    jle    0x8048de6 &lt;phase_6+78&gt;	;`jump if less or equal`(....&lt;=跳)</span><br><span class="line">   </span><br><span class="line">   ;第四部分</span><br><span class="line">   0x08048dfc &lt;+100&gt;:   inc    %edi						;%edi++</span><br><span class="line">   0x08048dfd &lt;+101&gt;:   cmp    $0x5,%edi				;计算%edi-0x5，改变标志位</span><br><span class="line">   0x08048e00 &lt;+104&gt;:   jle    0x8048dc0 &lt;phase_6+40&gt;	;%edi-0x5&lt;=0跳转</span><br><span class="line">   </span><br><span class="line">   ;第五部分</span><br><span class="line">   0x08048e02 &lt;+106&gt;:   xor    %edi,%edi				;%edi清零</span><br><span class="line">   0x08048e04 &lt;+108&gt;:   lea    -0x18(%ebp),%ecx			;%ebp-0x18值送入%ecx</span><br><span class="line">   0x08048e07 &lt;+111&gt;:   lea    -0x30(%ebp),%eax			;%ebp-0x30值送入%eax</span><br><span class="line">   0x08048e0a &lt;+114&gt;:   mov    %eax,-0x3c(%ebp)			;%eax的值送入栈上(%ebp-0x3c的地址上)</span><br><span class="line">   0x08048e0d &lt;+117&gt;:   lea    0x0(%esi),%esi			;空指令</span><br><span class="line">   0x08048e10 &lt;+120&gt;:   mov    -0x34(%ebp),%esi			;%ebp-0x34指向的值送入%esi</span><br><span class="line">   0x08048e13 &lt;+123&gt;:   mov    $0x1,%ebx				;把%ebx置1</span><br><span class="line">   0x08048e18 &lt;+128&gt;:   lea    0x0(,%edi,4),%eax		;%edi*4的值送入%eax</span><br><span class="line">   0x08048e1f &lt;+135&gt;:   mov    %eax,%edx				;%eax值送入%edx</span><br><span class="line">   0x08048e21 &lt;+137&gt;:   cmp    (%eax,%ecx,1),%ebx		;%ebx-(%eax+%ecx*1)指向值改变标志位</span><br><span class="line">   0x08048e24 &lt;+140&gt;:   jge    0x8048e38 &lt;phase_6+160&gt;	;(gewater or equal)大于等于跳转</span><br><span class="line">   0x08048e26 &lt;+142&gt;:   mov    (%edx,%ecx,1),%eax		;(%edx+%ecx*1)指向的值赋给%eax</span><br><span class="line">   0x08048e29 &lt;+145&gt;:   lea    0x0(%esi,%eiz,1),%esi	;空指令，%eiz并不存在</span><br><span class="line">   0x08048e30 &lt;+152&gt;:   mov    0x8(%esi),%esi			;%esi+0x8指向的值赋给%esi</span><br><span class="line">   0x08048e33 &lt;+155&gt;:   inc    %ebx						;%ebx++</span><br><span class="line">   0x08048e34 &lt;+156&gt;:   cmp    %eax,%ebx				;%ebx-%eax</span><br><span class="line">   0x08048e36 &lt;+158&gt;:   jl     0x8048e30 &lt;phase_6+152&gt;	;%ebx-%eax&lt;0跳转</span><br><span class="line">   </span><br><span class="line">   ;第六部分</span><br><span class="line">   0x08048e38 &lt;+160&gt;:   mov    -0x3c(%ebp),%edx			;(%ebp-0x3x)指向的值赋给%edx</span><br><span class="line">   0x08048e3b &lt;+163&gt;:   mov    %esi,(%edx,%edi,4)		;%esi值赋给(%edx+%edi*4)</span><br><span class="line">   0x08048e3e &lt;+166&gt;:   inc    %edi						;%edi++</span><br><span class="line">   0x08048e3f &lt;+167&gt;:   cmp    $0x5,%edi				;%edi-0x5</span><br><span class="line">   0x08048e42 &lt;+170&gt;:   jle    0x8048e10 &lt;phase_6+120&gt;	;`less or equal`小于或等于跳转</span><br><span class="line">   </span><br><span class="line">   ;第七部分</span><br><span class="line">   0x08048e44 &lt;+172&gt;:   mov    -0x30(%ebp),%esi			;(%ebp-0x30)指向的值赋给%esi</span><br><span class="line">   0x08048e47 &lt;+175&gt;:   mov    %esi,-0x34(%ebp)			;%esi值放栈上（%ebp-0x34）位置</span><br><span class="line">   0x08048e4a &lt;+178&gt;:   mov    $0x1,%edi				;0x1赋给%edi</span><br><span class="line">   0x08048e4f &lt;+183&gt;:   lea    -0x30(%ebp),%edx			;%ebp-0x30赋给%edx</span><br><span class="line">   0x08048e52 &lt;+186&gt;:   mov    (%edx,%edi,4),%eax		;%edx+%edi*4指向地址的值赋给%eax</span><br><span class="line">   0x08048e55 &lt;+189&gt;:   mov    %eax,0x8(%esi)			;%eax值放在0x8+%esi位置</span><br><span class="line">   0x08048e58 &lt;+192&gt;:   mov    %eax,%esi				;%eax赋给%esi</span><br><span class="line">   0x08048e5a &lt;+194&gt;:   inc    %edi						;%edi++</span><br><span class="line">   0x08048e5b &lt;+195&gt;:   cmp    $0x5,%edi				;%edi-0x5改变标志位</span><br><span class="line">   0x08048e5e &lt;+198&gt;:   jle    0x8048e52 &lt;phase_6+186&gt;	;`less or equal`小于等于跳</span><br><span class="line">   </span><br><span class="line">   ;第八部分</span><br><span class="line">   0x08048e60 &lt;+200&gt;:   movl   $0x0,0x8(%esi)			;0放%esi+0x8位置</span><br><span class="line">   0x08048e67 &lt;+207&gt;:   mov    -0x34(%ebp),%esi			;%ebp-0x34位置的值赋给%esi</span><br><span class="line">   0x08048e6a &lt;+210&gt;:   xor    %edi,%edi				;edi置零</span><br><span class="line">   0x08048e6c &lt;+212&gt;:   lea    0x0(%esi,%eiz,1),%esi	;空指令</span><br><span class="line">   0x08048e70 &lt;+216&gt;:   mov    0x8(%esi),%edx			;%esi+0x8位置的值赋给%edx</span><br><span class="line">   0x08048e73 &lt;+219&gt;:   mov    (%esi),%eax				;esi指向值赋给%eax</span><br><span class="line">   0x08048e75 &lt;+221&gt;:   cmp    (%edx),%eax				;%eax-%edx值改变标志位</span><br><span class="line">   0x08048e77 &lt;+223&gt;:   jge    0x8048e7e &lt;phase_6+230&gt;  ;`greater or equal`大于等于跳转</span><br><span class="line">   0x08048e79 &lt;+225&gt;:   call   0x80494fc &lt;explode_bomb&gt;	;不跳就炸了</span><br><span class="line">   </span><br><span class="line">   ;第九部分</span><br><span class="line">   0x08048e7e &lt;+230&gt;:   mov    0x8(%esi),%esi			;%esi+0x8指向地址的值赋给%esi</span><br><span class="line">   0x08048e81 &lt;+233&gt;:   inc    %edi						;%edi++</span><br><span class="line">   0x08048e82 &lt;+234&gt;:   cmp    $0x4,%edi				;%edi-0x4值改变标志位</span><br><span class="line">   0x08048e85 &lt;+237&gt;:   jle    0x8048e70 &lt;phase_6+216&gt;	;`less or equal`小于等于就跳转</span><br><span class="line">   </span><br><span class="line">   0x08048e87 &lt;+239&gt;:   lea    -0x58(%ebp),%esp			;%ebp-0x58值赋给%esp</span><br><span class="line">   0x08048e8a &lt;+242&gt;:   pop    %ebx						;栈顶放%ebx里</span><br><span class="line">   0x08048e8b &lt;+243&gt;:   pop    %esi						;栈顶放%esi里</span><br><span class="line">   0x08048e8c &lt;+244&gt;:   pop    %edi						;栈顶放%edi里</span><br><span class="line">   0x08048e8d &lt;+245&gt;:   mov    %ebp,%esp				;销毁整个0x58大小的栈帧</span><br><span class="line">   0x08048e8f &lt;+247&gt;:   pop    %ebp						;空指令</span><br><span class="line">   0x08048e90 &lt;+248&gt;:   ret								;返回到原函数</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>
<h4 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h4><p>通过静态分析不难得知(<code>read_six_numbers</code>)输入需要六个数字，不妨</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim answer.txt</span><br></pre></td></tr></table></figure>
<p>第六行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure>
<p>调试时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r answer.txt</span><br></pre></td></tr></table></figure>
<h5 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h5><p>附一个静态的汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;第一部分</span><br><span class="line">  0x08048d98 &lt;+0&gt;:     push   %ebp						;基地指针入栈</span><br><span class="line">  0x08048d99 &lt;+1&gt;:     mov    %esp,%ebp				;栈顶栈底指针统一</span><br><span class="line">  0x08048d9b &lt;+3&gt;:     sub    $0x4c,%esp				;开辟栈空间</span><br><span class="line">  0x08048d9e &lt;+6&gt;:     push   %edi						;参数入栈</span><br><span class="line">  0x08048d9f &lt;+7&gt;:     push   %esi						;参数入栈</span><br><span class="line">  0x08048da0 &lt;+8&gt;:     push   %ebx						;参数入栈</span><br><span class="line">  0x08048da1 &lt;+9&gt;:     mov    0x8(%ebp),%edx			;把%epd加0x8指向内容给%edx</span><br><span class="line">  0x08048da4 &lt;+12&gt;:    movl   $0x804b26c,-0x34(%ebp)	;立即数放栈上</span><br><span class="line">  0x08048dab &lt;+19&gt;:    add    $0xfffffff8,%esp			;由于模运算的性质，多开辟了(f-8)空间</span><br><span class="line">  0x08048dae &lt;+22&gt;:    lea    -0x18(%ebp),%eax			;把%ebp-0x18值送入%eax(栈上地址入寄存器)</span><br><span class="line">  0x08048db1 &lt;+25&gt;:    push   %eax						;参数入栈</span><br><span class="line">  0x08048db2 &lt;+26&gt;:    push   %edx						;参数入栈</span><br><span class="line">  0x08048db3 &lt;+27&gt;:    call   0x8048fd8 &lt;read_six_numbers&gt; ;函数调用</span><br></pre></td></tr></table></figure>
<p>在<code>read_six_numbers</code>前寄存器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> EAX  0xffffcbf0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line"> EBX  0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line"> ECX  0xfffffff1</span><br><span class="line"> EDX  0x804b810 (input_strings+400) ◂— xorl %esp, (%eax) /* 0x20322031; &#x27;1 2 3 4 5 6 &#x27; */</span><br><span class="line"> EDI  0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line"> ESI  0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line"> EBP  0xffffcc08 —▸ 0xffffcc38 ◂— 0x0</span><br><span class="line">*ESP  0xffffcba0 —▸ 0x804b810 (input_strings+400) ◂— xorl %esp, (%eax) /* 0x20322031; &#x27;1 2 3 4 5 6 &#x27; */</span><br><span class="line">*EIP  0x8048db3 (phase_6+27) ◂— calll 0x8048fd8</span><br></pre></td></tr></table></figure>
<p>在<code>read_six_numbers</code>后寄存器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*EAX  0x6</span><br><span class="line"> EBX  0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">*ECX  0xffffca90 —▸ 0xffffcaac ◂— 0xfbad8001</span><br><span class="line">*EDX  0x0</span><br><span class="line"> EDI  0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line"> ESI  0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line"> EBP  0xffffcc08 —▸ 0xffffcc38 ◂— 0x0</span><br><span class="line"> ESP  0xffffcba0 —▸ 0x804b810 (input_strings+400) ◂— xorl %esp, (%eax) /* 0x20322031; &#x27;1 2 3 4 5 6 &#x27; */</span><br><span class="line">*EIP  0x8048db8 (phase_6+32) ◂— xorl %edi, %edi</span><br></pre></td></tr></table></figure>
<p>在<code>read_six_numbers</code>前栈帧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;这段内容是执行后被删除的内容&#x27;</span><br><span class="line">00:0000│ esp 0xffffcba0 —▸ 0x804b810 (input_strings+400) ◂— xorl %esp, (%eax) /* 0x20322031; &#x27;1 2 3 4 5 6 &#x27; */</span><br><span class="line">01:0004│-064 0xffffcba4 —▸ 0xffffcbf0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">02:0008│-060 0xffffcba8 ◂— 0x0</span><br><span class="line">03:000c│-05c 0xffffcbac —▸ 0xf7e20e34 (_GLOBAL_OFFSET_TABLE_) ◂— decl %esp /* &#x27;L\r&quot;&#x27; */</span><br><span class="line"></span><br><span class="line">&#x27;这段内容是执行前后不变的内容&#x27;</span><br><span class="line">04:0010│-058 0xffffcbb0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">05:0014│-054 0xffffcbb4 —▸ 0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line">06:0018│-050 0xffffcbb8 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line">07:001c│-04c 0xffffcbbc —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">08:0020│-048 0xffffcbc0 —▸ 0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line">09:0024│-044 0xffffcbc4 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line">0a:0028│-040 0xffffcbc8 —▸ 0xffffcbf8 —▸ 0xffffcc18 —▸ 0xffffcc38 ◂— 0x0</span><br><span class="line">0b:002c│-03c 0xffffcbcc —▸ 0x80491ea (skip+58) ◂— addl $0x10, %esp</span><br><span class="line">0c:0030│-038 0xffffcbd0 —▸ 0x804b810 (input_strings+400) ◂— xorl %esp, (%eax) /* 0x20322031; &#x27;1 2 3 4 5 6 &#x27; */</span><br><span class="line">0d:0034│-034 0xffffcbd4 —▸ 0x804b26c (node1) ◂— 0xfd</span><br><span class="line">0e:0038│-030 0xffffcbd8 —▸ 0x804c1a0 ◂— 0xfbad2488</span><br><span class="line">0f:003c│-02c 0xffffcbdc —▸ 0xf7c56fd9 (printf+41) ◂— addl $0x1c, %esp</span><br><span class="line">10:0040│-028 0xffffcbe0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">11:0044│-024 0xffffcbe4 —▸ 0x80497a0 ◂— incl %edi /* &#x27;Good work!  On to the next...\n&#x27; */</span><br><span class="line"></span><br><span class="line">&#x27;这段内容执行后被替换了&#x27;</span><br><span class="line">12:0048│-020 0xffffcbe8 —▸ 0xffffcc04 ◂— 0x7374 /* &#x27;ts&#x27; */</span><br><span class="line">13:004c│-01c 0xffffcbec ◂— 0x0</span><br><span class="line">14:0050│ eax 0xffffcbf0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">15:0054│-014 0xffffcbf4 —▸ 0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line">16:0058│-010 0xffffcbf8 —▸ 0xffffcc18 —▸ 0xffffcc38 ◂— 0x0</span><br><span class="line">17:005c│-00c 0xffffcbfc —▸ 0x8049208 (read_line+12) ◂— testl %eax, %eax</span><br><span class="line">18:0060│-008 0xffffcc00 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line">19:0064│-004 0xffffcc04 ◂— 0x7374 /* &#x27;ts&#x27; */</span><br><span class="line">1a:0068│ ebp 0xffffcc08 —▸ 0xffffcc38 ◂— 0x0</span><br></pre></td></tr></table></figure>
<p>在<code>read_six_numbers</code>后栈帧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;这段内容被删除&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;这段内容是执行前后不变的内容&#x27;</span><br><span class="line">00:0000│ esp 0xffffcbb0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">01:0004│-054 0xffffcbb4 —▸ 0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line">02:0008│-050 0xffffcbb8 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line">03:000c│-04c 0xffffcbbc —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">04:0010│-048 0xffffcbc0 —▸ 0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line">05:0014│-044 0xffffcbc4 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line">06:0018│-040 0xffffcbc8 —▸ 0xffffcbf8 ◂— 0x3</span><br><span class="line">07:001c│-03c 0xffffcbcc —▸ 0x80491ea (skip+58) ◂— addl $0x10, %esp</span><br><span class="line">08:0020│-038 0xffffcbd0 —▸ 0x804b810 (input_strings+400) ◂— xorl %esp, (%eax) /* 0x20322031; &#x27;1 2 3 4 5 6 &#x27; */</span><br><span class="line">09:0024│-034 0xffffcbd4 —▸ 0x804b26c (node1) ◂— 0xfd</span><br><span class="line">0a:0028│-030 0xffffcbd8 —▸ 0x804c1a0 ◂— 0xfbad2488</span><br><span class="line">0b:002c│-02c 0xffffcbdc —▸ 0xf7c56fd9 (printf+41) ◂— addl $0x1c, %esp</span><br><span class="line">0c:0030│-028 0xffffcbe0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">0d:0034│-024 0xffffcbe4 —▸ 0x80497a0 ◂— incl %edi /* &#x27;Good work!  On to the next...\n&#x27; */</span><br><span class="line"></span><br><span class="line">&#x27;这段内容是执行后被替换的内容&#x27;</span><br><span class="line">0e:0038│-020 0xffffcbe8 —▸ 0xffffcc04 ◂— 0x6</span><br><span class="line">0f:003c│-01c 0xffffcbec ◂— 0x0</span><br><span class="line">10:0040│-018 0xffffcbf0 ◂— 0x1</span><br><span class="line">11:0044│-014 0xffffcbf4 ◂— 0x2</span><br><span class="line">12:0048│-010 0xffffcbf8 ◂— 0x3</span><br><span class="line">13:004c│-00c 0xffffcbfc ◂— 0x4</span><br><span class="line">14:0050│-008 0xffffcc00 ◂— 0x5</span><br><span class="line">15:0054│-004 0xffffcc04 ◂— 0x6</span><br><span class="line">16:0058│ ebp 0xffffcc08 —▸ 0xffffcc38 ◂— 0x0</span><br></pre></td></tr></table></figure>
<h5 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分*"></a>第二部分*</h5><p>附一个静态分析得到的汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;第二部分</span><br><span class="line">0x08048db8 &lt;+32&gt;:    xor    %edi,%edi				;edi归零</span><br><span class="line">0x08048dba &lt;+34&gt;:    add    $0x10,%esp				;栈空间减少</span><br><span class="line">0x08048dbd &lt;+37&gt;:    lea    0x0(%esi),%esi			;空指令</span><br><span class="line">0x08048dc0 &lt;+40&gt;:    lea    -0x18(%ebp),%eax			;把%ebp-0x18值送入%eax</span><br><span class="line">0x08048dc3 &lt;+43&gt;:    mov    (%eax,%edi,4),%eax		;把%eax+%edi*4值指向内存地址(在栈上)送入%eax</span><br><span class="line">0x08048dc6 &lt;+46&gt;:    dec    %eax						;%eax减一送入%eax</span><br><span class="line">0x08048dc7 &lt;+47&gt;:    cmp    $0x5,%eax				;计算%eax-0x5，改变标志位</span><br><span class="line">0x08048dca &lt;+50&gt;:    jbe    0x8048dd1 &lt;phase_6+57&gt;   ;`below or equal`跳转（%eax-0x5&lt;=0跳）</span><br><span class="line">0x08048dcc &lt;+52&gt;:    call   0x80494fc &lt;explode_bomb&gt; ;上一步不跳转就炸了</span><br></pre></td></tr></table></figure>
<p>比较关键的是走到<code>&lt;+40&gt;</code>位置，执行以后可以看到栈空间如下所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00:0000│ esp 0xffffcbb0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">01:0004│-054 0xffffcbb4 —▸ 0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line">02:0008│-050 0xffffcbb8 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line">03:000c│-04c 0xffffcbbc —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">04:0010│-048 0xffffcbc0 —▸ 0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line">05:0014│-044 0xffffcbc4 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line">06:0018│-040 0xffffcbc8 —▸ 0xffffcbf8 ◂— 0x3</span><br><span class="line">07:001c│-03c 0xffffcbcc —▸ 0x80491ea (skip+58) ◂— addl $0x10, %esp</span><br><span class="line">08:0020│-038 0xffffcbd0 —▸ 0x804b810 (input_strings+400) ◂— xorl %esp, (%eax) /* 0x20322031; &#x27;1 2 3 4 5 6 &#x27; */</span><br><span class="line">09:0024│-034 0xffffcbd4 —▸ 0x804b26c (node1) ◂— 0xfd</span><br><span class="line">0a:0028│-030 0xffffcbd8 —▸ 0x804c1a0 ◂— 0xfbad2488</span><br><span class="line">0b:002c│-02c 0xffffcbdc —▸ 0xf7c56fd9 (printf+41) ◂— addl $0x1c, %esp</span><br><span class="line">0c:0030│-028 0xffffcbe0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">0d:0034│-024 0xffffcbe4 —▸ 0x80497a0 ◂— incl %edi /* &#x27;Good work!  On to the next...\n&#x27; */</span><br><span class="line">0e:0038│-020 0xffffcbe8 —▸ 0xffffcc04 ◂— 0x6</span><br><span class="line">0f:003c│-01c 0xffffcbec ◂— 0x0</span><br><span class="line">10:0040│ eax 0xffffcbf0 ◂— 0x1                 /* &#x27;这里eax存的值为0xffffcbf0,也就是第一个参数的地址&#x27; */</span><br><span class="line">11:0044│-014 0xffffcbf4 ◂— 0x2</span><br><span class="line">12:0048│-010 0xffffcbf8 ◂— 0x3</span><br><span class="line">13:004c│-00c 0xffffcbfc ◂— 0x4</span><br><span class="line">14:0050│-008 0xffffcc00 ◂— 0x5</span><br><span class="line">15:0054│-004 0xffffcc04 ◂— 0x6</span><br><span class="line">16:0058│ ebp 0xffffcc08 —▸ 0xffffcc38 ◂— 0x0</span><br></pre></td></tr></table></figure>
<p>走到<code>&lt;+43&gt;</code>位置，将数值取出放<code>eax</code>中，因为<code>edi = 0</code>，所以执行后，<code>eax = 1</code>,通过下图也容易知道，猜想成立。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*EAX  0x1</span><br><span class="line"> EBX  0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line"> ECX  0xffffca90 —▸ 0xffffcaac ◂— 0xfbad8001</span><br><span class="line"> EDX  0x0</span><br><span class="line"> EDI  0x0</span><br><span class="line"> ESI  0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line"> EBP  0xffffcc08 —▸ 0xffffcc38 ◂— 0x0</span><br><span class="line"> ESP  0xffffcbb0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">*EIP  0x8048dc6 (phase_6+46) ◂— decl %eax</span><br></pre></td></tr></table></figure>
<p>后面逻辑比较简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048dc6 &lt;+46&gt;:    dec    %eax						;%eax减一送入%eax</span><br><span class="line">0x08048dc7 &lt;+47&gt;:    cmp    $0x5,%eax				;计算%eax-0x5，改变标志位</span><br><span class="line">0x08048dca &lt;+50&gt;:    jbe    0x8048dd1 &lt;phase_6+57&gt;   ;`below or equal`跳转（%eax-0x5&lt;=0跳）</span><br><span class="line">0x08048dcc &lt;+52&gt;:    call   0x80494fc &lt;explode_bomb&gt; ;上一步不跳转就炸了</span><br></pre></td></tr></table></figure>
<p>根据以上推理，也就是要满足：<code>第一个参数-1-5&lt;=0</code>。也就是第一个参数要小于6。</p>
<h5 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分*"></a>第三部分*</h5><p>老样子，附一个静态分析的汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048dd1 &lt;+57&gt;:    lea    0x1(%edi),%ebx			;%edi+1放入%ebx</span><br><span class="line">0x08048dd4 &lt;+60&gt;:    cmp    $0x5,%ebx				;计算%ebx-0x5,改变标志位</span><br><span class="line">0x08048dd7 &lt;+63&gt;:    jg     0x8048dfc &lt;phase_6+100&gt;	;`greater`跳转(%ebx-0x5&gt;0跳)</span><br></pre></td></tr></table></figure>
<p>由于前面<code>&lt;+32&gt;</code>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048db8 &lt;+32&gt;:    xor    %edi,%edi				;edi归零</span><br></pre></td></tr></table></figure>
<p>所以这段其实是必不会跳转的，如果跳转的话，跳转第四部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048dd9 &lt;+65&gt;:    lea    0x0(,%edi,4),%eax		;%edi*4值送入%eax</span><br><span class="line">0x08048de0 &lt;+72&gt;:    mov    %eax,-0x38(%ebp)			;%eax指向的值送入栈上（%ebp-0x38）</span><br><span class="line">0x08048de3 &lt;+75&gt;:    lea    -0x18(%ebp),%esi			;%ebp-0x18送入%esi</span><br><span class="line">0x08048de6 &lt;+78&gt;:    mov    -0x38(%ebp),%edx			;%ebp-0x38指向的值送入%edx</span><br></pre></td></tr></table></figure>
<p>执行前栈帧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00:0000│ esp 0xffffcbb0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">01:0004│-054 0xffffcbb4 —▸ 0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line">02:0008│-050 0xffffcbb8 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line">03:000c│-04c 0xffffcbbc —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">04:0010│-048 0xffffcbc0 —▸ 0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line">05:0014│-044 0xffffcbc4 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line">06:0018│-040 0xffffcbc8 —▸ 0xffffcbf8 ◂— 0x3</span><br><span class="line">07:001c│-03c 0xffffcbcc —▸ 0x80491ea (skip+58) ◂— addl $0x10, %esp</span><br><span class="line">08:0020│-038 0xffffcbd0 —▸ 0x804b810 (input_strings+400) ◂— xorl %esp, (%eax) /* 0x20322031; &#x27;1 2 3 4 5 6 &#x27; */</span><br><span class="line">09:0024│-034 0xffffcbd4 —▸ 0x804b26c (node1) ◂— 0xfd</span><br><span class="line">0a:0028│-030 0xffffcbd8 —▸ 0x804c1a0 ◂— 0xfbad2488</span><br><span class="line">0b:002c│-02c 0xffffcbdc —▸ 0xf7c56fd9 (printf+41) ◂— addl $0x1c, %esp</span><br><span class="line">0c:0030│-028 0xffffcbe0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">0d:0034│-024 0xffffcbe4 —▸ 0x80497a0 ◂— incl %edi /* &#x27;Good work!  On to the next...\n&#x27; */</span><br><span class="line">0e:0038│-020 0xffffcbe8 —▸ 0xffffcc04 ◂— 0x6</span><br><span class="line">0f:003c│-01c 0xffffcbec ◂— 0x0</span><br><span class="line">10:0040│-018 0xffffcbf0 ◂— 0x1</span><br><span class="line">11:0044│-014 0xffffcbf4 ◂— 0x2</span><br><span class="line">12:0048│-010 0xffffcbf8 ◂— 0x3</span><br><span class="line">13:004c│-00c 0xffffcbfc ◂— 0x4</span><br><span class="line">14:0050│-008 0xffffcc00 ◂— 0x5</span><br><span class="line">15:0054│-004 0xffffcc04 ◂— 0x6</span><br><span class="line">16:0058│ ebp 0xffffcc08 —▸ 0xffffcc38 ◂— 0x0</span><br></pre></td></tr></table></figure>
<p>执行后栈帧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00:0000│ esp 0xffffcbb0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">01:0004│-054 0xffffcbb4 —▸ 0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line">02:0008│-050 0xffffcbb8 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line">03:000c│-04c 0xffffcbbc —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">04:0010│-048 0xffffcbc0 —▸ 0x80486e0 (_init) ◂— pushl %ebp</span><br><span class="line">05:0014│-044 0xffffcbc4 —▸ 0xf7ffcb80 (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line">06:0018│-040 0xffffcbc8 —▸ 0xffffcbf8 ◂— 0x3</span><br><span class="line">07:001c│-03c 0xffffcbcc —▸ 0x80491ea (skip+58) ◂— addl $0x10, %esp</span><br><span class="line">08:0020│-038 0xffffcbd0 ◂— 0x0</span><br><span class="line">09:0024│-034 0xffffcbd4 —▸ 0x804b26c (node1) ◂— 0xfd</span><br><span class="line">0a:0028│-030 0xffffcbd8 —▸ 0x804c1a0 ◂— 0xfbad2488</span><br><span class="line">0b:002c│-02c 0xffffcbdc —▸ 0xf7c56fd9 (printf+41) ◂— addl $0x1c, %esp</span><br><span class="line">0c:0030│-028 0xffffcbe0 —▸ 0xffffccf4 —▸ 0xffffcf20 ◂— &#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span><br><span class="line">0d:0034│-024 0xffffcbe4 —▸ 0x80497a0 ◂— incl %edi /* &#x27;Good work!  On to the next...\n&#x27; */</span><br><span class="line">0e:0038│-020 0xffffcbe8 —▸ 0xffffcc04 ◂— 0x6</span><br><span class="line">0f:003c│-01c 0xffffcbec ◂— 0x0</span><br><span class="line">10:0040│ esi 0xffffcbf0 ◂— 0x1</span><br><span class="line">11:0044│-014 0xffffcbf4 ◂— 0x2</span><br><span class="line">12:0048│-010 0xffffcbf8 ◂— 0x3</span><br><span class="line">13:004c│-00c 0xffffcbfc ◂— 0x4</span><br><span class="line">14:0050│-008 0xffffcc00 ◂— 0x5</span><br><span class="line">15:0054│-004 0xffffcc04 ◂— 0x6</span><br><span class="line">16:0058│ ebp 0xffffcc08 —▸ 0xffffcc38 ◂— 0x0</span><br></pre></td></tr></table></figure>
<p>继续向下执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048de9 &lt;+81&gt;:    mov    (%edx,%esi,1),%eax		;%edx+%esi*1指向的值送入%eax</span><br><span class="line">0x08048dec &lt;+84&gt;:    cmp    (%esi,%ebx,4),%eax		;%eax值-（%esi+%ebx*4）指向的值改变标志位</span><br><span class="line">0x08048def &lt;+87&gt;:    jne    0x8048df6 &lt;phase_6+94&gt;	;`not equal`不相等跳转（...！=0跳）</span><br><span class="line"></span><br><span class="line">0x08048df1 &lt;+89&gt;:    call   0x80494fc &lt;explode_bomb&gt; ;上一步必须跳，不然炸弹炸了</span><br><span class="line">0x08048df6 &lt;+94&gt;:    inc    %ebx						;`increment`,相当于%ebx++</span><br><span class="line">0x08048df7 &lt;+95&gt;:    cmp    $0x5,%ebx				;%ebx-0x5,改变标志位</span><br><span class="line">0x08048dfa &lt;+98&gt;:    jle    0x8048de6 &lt;phase_6+78&gt;	;`jump if less or equal`(....&lt;=跳)</span><br></pre></td></tr></table></figure>
<p>执行前寄存器</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> EAX  <span class="number">0x0</span></span><br><span class="line"> EBX  <span class="number">0x1</span></span><br><span class="line"> ECX  <span class="number">0xffffca90</span> —▸ <span class="number">0xffffcaac</span> ◂— <span class="number">0xfbad8001</span></span><br><span class="line"> EDX  <span class="number">0x0</span></span><br><span class="line"> EDI  <span class="number">0x0</span></span><br><span class="line"> ESI  <span class="number">0xffffcbf0</span> ◂— <span class="number">0x1</span></span><br><span class="line"> EBP  <span class="number">0xffffcc08</span> —▸ <span class="number">0xffffcc38</span> ◂— <span class="number">0x0</span></span><br><span class="line"> ESP  <span class="number">0xffffcbb0</span> —▸ <span class="number">0xffffccf4</span> —▸ <span class="number">0xffffcf20</span> ◂— <span class="string">&#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span></span><br><span class="line">*EIP  <span class="number">0x8048de9</span> (phase_6+<span class="number">81</span>) ◂— movl (%edx, %esi), %eax</span><br></pre></td></tr></table></figure>
<p>执行后寄存器</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> EAX  <span class="number">0x1</span></span><br><span class="line"> EBX  <span class="number">0x1</span></span><br><span class="line"> ECX  <span class="number">0xffffca90</span> —▸ <span class="number">0xffffcaac</span> ◂— <span class="number">0xfbad8001</span></span><br><span class="line"> EDX  <span class="number">0x0</span></span><br><span class="line"> EDI  <span class="number">0x0</span></span><br><span class="line"> ESI  <span class="number">0xffffcbf0</span> ◂— <span class="number">0x1</span></span><br><span class="line"> EBP  <span class="number">0xffffcc08</span> —▸ <span class="number">0xffffcc38</span> ◂— <span class="number">0x0</span></span><br><span class="line"> ESP  <span class="number">0xffffcbb0</span> —▸ <span class="number">0xffffccf4</span> —▸ <span class="number">0xffffcf20</span> ◂— <span class="string">&#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span></span><br><span class="line">*EIP  <span class="number">0x8048df6</span> (phase_6+<span class="number">94</span>) ◂— incl %ebx</span><br></pre></td></tr></table></figure>
<p>这里容易知道：实际上这一步是必须要跳转的，不然炸弹必炸，跳转条件是第一个参数和第二个参数不能相等，跳转以后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048df6 &lt;+94&gt;:    inc    %ebx						;`increment`,相当于%ebx++</span><br><span class="line">0x08048df7 &lt;+95&gt;:    cmp    $0x5,%ebx				;%ebx-0x5,改变标志位</span><br><span class="line">0x08048dfa &lt;+98&gt;:    jle    0x8048de6 &lt;phase_6+78&gt;	;`jump if less or equal`(....&lt;=跳)</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码;%esi + %ebx * 4 是否等于 %eax(第一个参数)  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> %ebx = <span class="number">1</span>;%ebx &lt;= <span class="number">5</span>;%ebx++)&#123;</span><br><span class="line">    jmp &lt;phase_6+<span class="number">78</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里得到了炸弹不会爆炸的第二个条件:其余参数不能和第一个参数相等</p>
<h5 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分*"></a>第四部分*</h5><p>这段代码如下，其实很简单，就是对<code>%edi++</code>，然后将<code>%edi</code>和<code>5</code>比较，小于等于就跳转到第五部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048dfc &lt;+100&gt;:   inc    %edi						;%edi++</span><br><span class="line">0x08048dfd &lt;+101&gt;:   cmp    $0x5,%edi				;计算%edi-0x5，改变标志位</span><br><span class="line">0x08048e00 &lt;+104&gt;:   jle    0x8048dc0 &lt;phase_6+40&gt;	;%edi-0x5&lt;=0跳转 </span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">		jmp &lt;phase_6+<span class="number">40</span>&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一部分通过调试，又回到了最开始判断<code>%eax-1</code>是否小于等于5的地方。但此时的<code>%eax</code>变成了参数二，根据循环6次的条件，推断出炸弹不爆炸的第三个条件是：第一个条件和第二个条件在所有参数上均成立。</p>
<h5 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h5><p>当<code>%eax</code>为第六个参数时，在重新执行第三个部分时，由于<code>&lt;phase_6+57&gt;</code>处</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  0x8048dd1 &lt;phase_6+57&gt;     leal   1(%edi), %ebx</span><br><span class="line">  0x8048dd4 &lt;phase_6+60&gt;     cmpl   $5, %ebx</span><br><span class="line">► 0x8048dd7 &lt;phase_6+63&gt;   ✔ jg     phase_6+100                     &lt;phase_6+100&gt;</span><br></pre></td></tr></table></figure>
<p>这里由于<code>ebx</code>的值大于5,，所以发生了跳转，直接跳到了<code>phase_6+100</code>的位置，不过也好理解，毕竟如果执行到最后一个参数，它必然不可能和其他参数相等，所有无需比较，直接跳转即可。来看看<code>phase_6+100</code>处汇编</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048dfc &lt;+100&gt;:   inc    %edi						;%edi++</span><br><span class="line">0x08048dfd &lt;+101&gt;:   cmp    $0x5,%edi				;计算%edi-0x5，改变标志位</span><br><span class="line">0x08048e00 &lt;+104&gt;:   jle    0x8048dc0 &lt;phase_6+40&gt;	;%edi-0x5&lt;=0跳转 </span><br></pre></td></tr></table></figure>
<p>由于<code>%edi</code>在<code>inc</code>后为6，进行跳转，直接向下执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048e02 &lt;+106&gt;:   xor    %edi,%edi				;%edi清零</span><br><span class="line">0x08048e04 &lt;+108&gt;:   lea    -0x18(%ebp),%ecx			;%ebp-0x18值送入%ecx</span><br><span class="line">0x08048e07 &lt;+111&gt;:   lea    -0x30(%ebp),%eax			;%ebp-0x30值送入%eax</span><br><span class="line">0x08048e0a &lt;+114&gt;:   mov    %eax,-0x3c(%ebp)			;%eax的值送入栈上(%ebp-0x3c的地址上)</span><br><span class="line">0x08048e0d &lt;+117&gt;:   lea    0x0(%esi),%esi			;空指令</span><br><span class="line">0x08048e10 &lt;+120&gt;:   mov    -0x34(%ebp),%esi			;%ebp-0x34指向的值送入%esi</span><br><span class="line">0x08048e13 &lt;+123&gt;:   mov    $0x1,%ebx				;把%ebx置1</span><br><span class="line">0x08048e18 &lt;+128&gt;:   lea    0x0(,%edi,4),%eax		;%edi*4的值送入%eax</span><br><span class="line">0x08048e1f &lt;+135&gt;:   mov    %eax,%edx				;%eax值送入%edx</span><br><span class="line">0x08048e21 &lt;+137&gt;:   cmp    (%eax,%ecx,1),%ebx		;%ebx-(%eax+%ecx*1)指向值改变标志位</span><br><span class="line">0x08048e24 &lt;+140&gt;:   jge    0x8048e38 &lt;phase_6+160&gt;	;(gewater or equal)大于等于跳转</span><br></pre></td></tr></table></figure>
<p>动态调试，容易知道：如果1大于等于参数1,跳<code>&lt;phase_6+160&gt;</code>，我们这里参数一为<code>1</code>，显然符合条件跳<code>&lt;phase_6+160&gt;</code></p>
<h5 id="第六部分"><a href="#第六部分" class="headerlink" title="第六部分"></a>第六部分</h5><p>这里定义跳转到的<code>&lt;phase_6+160&gt;</code>为第六部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048e38 &lt;+160&gt;:   mov    -0x3c(%ebp),%edx			;(%ebp-0x3x)指向的值赋给%edx</span><br><span class="line">0x08048e3b &lt;+163&gt;:   mov    %esi,(%edx,%edi,4)		;%esi值赋给(%edx+%edi*4)</span><br><span class="line">0x08048e3e &lt;+166&gt;:   inc    %edi						;%edi++</span><br><span class="line">0x08048e3f &lt;+167&gt;:   cmp    $0x5,%edi				;%edi-0x5</span><br><span class="line">0x08048e42 &lt;+170&gt;:   jle    0x8048e10 &lt;phase_6+120&gt;	;`less or equal`小于或等于跳转</span><br></pre></td></tr></table></figure>
<p>这里给<code>%edi++</code>,然后和<code>0x5</code>比较，显然直接跳<code>&lt;phase_6+120&gt;</code>，相当于回到第五部分，执行第二个参数和<code>1</code>比较，这里显然<code>1</code>并不大于参数二，因此不执行跳转，继续执行，即下面这段会继续执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x8048e13 &lt;phase_6+123&gt;    movl   $1, %ebx</span><br><span class="line">0x8048e18 &lt;phase_6+128&gt;    leal   (, %edi, 4), %eax</span><br><span class="line">0x8048e1f &lt;phase_6+135&gt;    movl   %eax, %edx</span><br><span class="line">0x8048e21 &lt;phase_6+137&gt;    cmpl   (%eax, %ecx), %ebx</span><br><span class="line">0x8048e24 &lt;phase_6+140&gt;    jge    phase_6+160</span><br></pre></td></tr></table></figure>
<p>下面这块属实没啥意义（<code>%ebx</code>每次循环都要<code>++</code>,总有不满足跳转条件的一次），不满足跳转条件直接回到<code>&lt;phase_6+160&gt;</code>了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048e26 &lt;+142&gt;:   mov    (%edx,%ecx,1),%eax		;(%edx+%ecx*1)指向的值赋给%eax</span><br><span class="line">0x08048e29 &lt;+145&gt;:   lea    0x0(%esi,%eiz,1),%esi	;空指令，%eiz并不存在</span><br><span class="line">0x08048e30 &lt;+152&gt;:   mov    0x8(%esi),%esi			;%esi+0x8指向的值赋给%esi</span><br><span class="line">0x08048e33 &lt;+155&gt;:   inc    %ebx						;%ebx++</span><br><span class="line">0x08048e34 &lt;+156&gt;:   cmp    %eax,%ebx				;%ebx-%eax</span><br><span class="line">0x08048e36 &lt;+158&gt;:   jl     0x8048e30 &lt;phase_6+152&gt;	;%ebx-%eax&lt;0跳转</span><br></pre></td></tr></table></figure>
<p>联系上方的分析，可知在执行循环，先记录下这几个<code>node</code>，不知道有啥用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p $node1</span><br><span class="line">$1 = void</span><br><span class="line">pwndbg&gt; p *(int *)node1</span><br><span class="line">&#x27;Cannot access memory at address 0xfd&#x27;</span><br><span class="line">pwndbg&gt; p (int)node1</span><br><span class="line">$2 = 253</span><br><span class="line">pwndbg&gt; p (int)node2</span><br><span class="line">$3 = 725</span><br><span class="line">pwndbg&gt; p (int)node3</span><br><span class="line">$4 = 301</span><br><span class="line">pwndbg&gt; p (int)node4</span><br><span class="line">$5 = 997</span><br><span class="line">pwndbg&gt; p (int)node5</span><br><span class="line">$6 = 212</span><br><span class="line">pwndbg&gt; p (int)node6</span><br><span class="line">$7 = 432</span><br><span class="line">pwndbg&gt; p (int)node7</span><br><span class="line">No symbol &quot;node7&quot; in current context.</span><br></pre></td></tr></table></figure>
<p>执行完这个循环以后的栈结构如图</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">stack</span> <span class="number">23</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ esp <span class="number">0xffffcbb0</span> —▸ <span class="number">0xffffccf4</span> —▸ <span class="number">0xffffcf21</span> ◂— <span class="string">&#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0004</span>│<span class="number">-054</span> <span class="number">0xffffcbb4</span> —▸ <span class="number">0x80486e0</span> (_init) ◂— pushl %ebp</span><br><span class="line"><span class="number">02</span>:<span class="number">0008</span>│<span class="number">-050</span> <span class="number">0xffffcbb8</span> —▸ <span class="number">0xf7ffcb80</span> (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line"><span class="number">03</span>:<span class="number">000</span>c│<span class="number">-04</span>c <span class="number">0xffffcbbc</span> —▸ <span class="number">0xffffccf4</span> —▸ <span class="number">0xffffcf21</span> ◂— <span class="string">&#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0010</span>│<span class="number">-048</span> <span class="number">0xffffcbc0</span> —▸ <span class="number">0x80486e0</span> (_init) ◂— pushl %ebp</span><br><span class="line"><span class="number">05</span>:<span class="number">0014</span>│<span class="number">-044</span> <span class="number">0xffffcbc4</span> —▸ <span class="number">0xf7ffcb80</span> (_rtld_global_ro) ◂— addb %al, (%eax)</span><br><span class="line"><span class="number">06</span>:<span class="number">0018</span>│<span class="number">-040</span> <span class="number">0xffffcbc8</span> —▸ <span class="number">0xffffcbf8</span> ◂— <span class="number">0x3</span></span><br><span class="line"><span class="number">07</span>:<span class="number">001</span>c│<span class="number">-03</span>c <span class="number">0xffffcbcc</span> —▸ <span class="number">0xffffcbd8</span> —▸ <span class="number">0x804b26c</span> (node1) ◂— <span class="number">0xfd</span></span><br><span class="line"><span class="number">08</span>:<span class="number">0020</span>│<span class="number">-038</span> <span class="number">0xffffcbd0</span> ◂— <span class="number">0x10</span></span><br><span class="line"><span class="number">09</span>:<span class="number">0024</span>│<span class="number">-034</span> <span class="number">0xffffcbd4</span> —▸ <span class="number">0x804b26c</span> (node1) ◂— <span class="number">0xfd</span></span><br><span class="line"><span class="number">0</span>a:<span class="number">0028</span>│ edx <span class="number">0xffffcbd8</span> —▸ <span class="number">0x804b26c</span> (node1) ◂— <span class="number">0xfd</span></span><br><span class="line"><span class="number">0b</span>:<span class="number">002</span>c│<span class="number">-02</span>c <span class="number">0xffffcbdc</span> —▸ <span class="number">0x804b260</span> (node2) ◂— <span class="number">0x2d5</span></span><br><span class="line"><span class="number">0</span>c:<span class="number">0030</span>│<span class="number">-028</span> <span class="number">0xffffcbe0</span> —▸ <span class="number">0x804b254</span> (node3) ◂— <span class="number">0x12d</span></span><br><span class="line"><span class="number">0</span>d:<span class="number">0034</span>│<span class="number">-024</span> <span class="number">0xffffcbe4</span> —▸ <span class="number">0x804b248</span> (node4) ◂— <span class="number">0x3e5</span></span><br><span class="line"><span class="number">0</span>e:<span class="number">0038</span>│<span class="number">-020</span> <span class="number">0xffffcbe8</span> —▸ <span class="number">0x804b23c</span> (node5) ◂— <span class="number">0xd4</span></span><br><span class="line"><span class="number">0f</span>:<span class="number">003</span>c│<span class="number">-01</span>c <span class="number">0xffffcbec</span> —▸ <span class="number">0x804b230</span> (node6) ◂— <span class="number">0x1b0</span></span><br><span class="line"><span class="number">10</span>:<span class="number">0040</span>│ ecx <span class="number">0xffffcbf0</span> ◂— <span class="number">0x1</span></span><br><span class="line"><span class="number">11</span>:<span class="number">0044</span>│<span class="number">-014</span> <span class="number">0xffffcbf4</span> ◂— <span class="number">0x2</span></span><br><span class="line"><span class="number">12</span>:<span class="number">0048</span>│<span class="number">-010</span> <span class="number">0xffffcbf8</span> ◂— <span class="number">0x3</span></span><br><span class="line"><span class="number">13</span>:<span class="number">004</span>c│<span class="number">-00</span>c <span class="number">0xffffcbfc</span> ◂— <span class="number">0x4</span></span><br><span class="line"><span class="number">14</span>:<span class="number">0050</span>│<span class="number">-008</span> <span class="number">0xffffcc00</span> ◂— <span class="number">0x5</span></span><br><span class="line"><span class="number">15</span>:<span class="number">0054</span>│<span class="number">-004</span> <span class="number">0xffffcc04</span> ◂— <span class="number">0x6</span></span><br><span class="line"><span class="number">16</span>:<span class="number">0058</span>│ ebp <span class="number">0xffffcc08</span> —▸ <span class="number">0xffffcc38</span> ◂— <span class="number">0x0</span></span><br></pre></td></tr></table></figure>
<h5 id="第七部分"><a href="#第七部分" class="headerlink" title="第七部分"></a>第七部分</h5><p>继续向下执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048e44 &lt;+172&gt;:   mov    -0x30(%ebp),%esi			;(%ebp-0x30)指向的值赋给%esi</span><br><span class="line">0x08048e47 &lt;+175&gt;:   mov    %esi,-0x34(%ebp)			;%esi值放栈上（%ebp-0x34）位置</span><br><span class="line">0x08048e4a &lt;+178&gt;:   mov    $0x1,%edi				;0x1赋给%edi</span><br><span class="line">0x08048e4f &lt;+183&gt;:   lea    -0x30(%ebp),%edx			;%ebp-0x30赋给%edx</span><br><span class="line">0x08048e52 &lt;+186&gt;:   mov    (%edx,%edi,4),%eax		;%edx+%edi*4指向地址的值赋给%eax</span><br><span class="line">0x08048e55 &lt;+189&gt;:   mov    %eax,0x8(%esi)			;%eax值放在0x8+%esi位置</span><br><span class="line">0x08048e58 &lt;+192&gt;:   mov    %eax,%esi				;%eax赋给%esi</span><br><span class="line">0x08048e5a &lt;+194&gt;:   inc    %edi						;%edi++</span><br><span class="line">0x08048e5b &lt;+195&gt;:   cmp    $0x5,%edi				;%edi-0x5改变标志位</span><br><span class="line">0x08048e5e &lt;+198&gt;:   jle    0x8048e52 &lt;phase_6+186&gt;	;`less or equal`小于等于跳</span><br></pre></td></tr></table></figure>
<p>循环5次，循环后的栈结构不变，寄存器数值如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> EAX  <span class="number">0x804b230</span> (node6) ◂— <span class="number">0x1b0</span></span><br><span class="line"> EBX  <span class="number">0x6</span></span><br><span class="line"> ECX  <span class="number">0xffffcbf0</span> ◂— <span class="number">0x1</span></span><br><span class="line"> EDX  <span class="number">0xffffcbd8</span> —▸ <span class="number">0x804b26c</span> (node1) ◂— <span class="number">0xfd</span></span><br><span class="line"> EDI  <span class="number">0x6</span></span><br><span class="line"> ESI  <span class="number">0x804b230</span> (node6) ◂— <span class="number">0x1b0</span></span><br><span class="line"> EBP  <span class="number">0xffffcc08</span> —▸ <span class="number">0xffffcc38</span> ◂— <span class="number">0x0</span></span><br><span class="line"> ESP  <span class="number">0xffffcbb0</span> —▸ <span class="number">0xffffccf4</span> —▸ <span class="number">0xffffcf21</span> ◂— <span class="string">&#x27;/home/P4yl04d/Documents/lab_bomb/bomb&#x27;</span></span><br><span class="line">*EIP  <span class="number">0x8048e5e</span> (phase_6+<span class="number">198</span>) ◂— jle <span class="number">0x8048e52</span></span><br></pre></td></tr></table></figure>
<h5 id="第八部分"><a href="#第八部分" class="headerlink" title="第八部分*"></a>第八部分*</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048e60 &lt;+200&gt;:   movl   $0x0,0x8(%esi)			;0放%esi+0x8位置</span><br><span class="line">0x08048e67 &lt;+207&gt;:   mov    -0x34(%ebp),%esi			;%ebp-0x34位置的值赋给%esi</span><br><span class="line">0x08048e6a &lt;+210&gt;:   xor    %edi,%edi				;edi置零</span><br><span class="line">0x08048e6c &lt;+212&gt;:   lea    0x0(%esi,%eiz,1),%esi	;空指令</span><br><span class="line">0x08048e70 &lt;+216&gt;:   mov    0x8(%esi),%edx			;%esi+0x8位置的值赋给%edx</span><br><span class="line">0x08048e73 &lt;+219&gt;:   mov    (%esi),%eax				;esi指向值赋给%eax</span><br><span class="line">0x08048e75 &lt;+221&gt;:   cmp    (%edx),%eax				;%eax-%edx值改变标志位</span><br><span class="line">0x08048e77 &lt;+223&gt;:   jge    0x8048e7e &lt;phase_6+230&gt;  ;`greater or equal`大于等于跳转</span><br><span class="line">0x08048e79 &lt;+225&gt;:   call   0x80494fc &lt;explode_bomb&gt;	;不跳就炸了</span><br></pre></td></tr></table></figure>
<p>保证<code>node1</code>大于等于<code>node2</code>，不然就炸了。这里不符合条件，强行改变寄存器<code>%edx</code>数值，先往下走着</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set $edx=0x804b23c</span><br></pre></td></tr></table></figure>
<p>这里得到了要满足的第四个条件：<code>&lt;node2&gt;</code>大于等于<code>node3</code>。(貌似<code>&lt;node1&gt;</code>是传入的立即数<code>0xfd</code>，不确定是否可以改变<code>&lt;node2&gt;</code>的值，或者改变<code>%edx</code>为其他节点上的数)</p>
<h5 id="第九部分"><a href="#第九部分" class="headerlink" title="第九部分*"></a>第九部分*</h5><p>这里的话，类似前面，相当于一个循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048e7e &lt;+230&gt;:   mov    0x8(%esi),%esi			;%esi+0x8指向地址的值赋给%esi</span><br><span class="line">0x08048e81 &lt;+233&gt;:   inc    %edi						;%edi++</span><br><span class="line">0x08048e82 &lt;+234&gt;:   cmp    $0x4,%edi				;%edi-0x4值改变标志位</span><br><span class="line">0x08048e85 &lt;+237&gt;:   jle    0x8048e70 &lt;phase_6+216&gt;	;`less or equal`小于等于就跳转</span><br></pre></td></tr></table></figure>
<p>动态调试下来，发现这次要满足的条件是<code>&lt;node2&gt;</code>大于等于<code>&lt;node3&gt;</code>。</p>
<p>容易知道：该循环循五次，综合下来需要满足的条件就是</p>
<p><code>node1</code> &gt; = <code>node2</code> &gt; = <code>node3</code>&gt; = <code>node4</code>&gt; = <code>node5</code>&gt; = <code>node6</code></p>
<p>猜测输入数字顺序对应节点顺序，于是，根据上面已知的排序</p>
<p><code>node4</code> &gt; <code>node2</code> &gt; <code>node6</code> &gt; <code>node3</code> &gt; <code>node1</code> &gt; <code>node5</code> </p>
<p>尝试输入<code>4 2 6 3 1 5</code>，运行发现结果正确。</p>
]]></content>
      <categories>
        <category>OS</category>
        <category>Reserve</category>
        <category>asm</category>
        <category>Linux</category>
        <category>Book</category>
        <category>CSAPP</category>
      </categories>
      <tags>
        <tag>gdb</tag>
        <tag>asm</tag>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61b食用指南(WEEK1)</title>
    <url>/2024/03/14/CS61b%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97-WEEK1/</url>
    <content><![CDATA[<p>针对第一周的内容做了具体总结归纳。<br><span id="more"></span></p>
<h2 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h2><h2 id="实验01-设置"><a href="#实验01-设置" class="headerlink" title="实验01-设置"></a>实验01-设置</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><blockquote>
<p> git的自动登录和简单使用在原先的文章中已经有所涉及:</p>
<p><a href="https://dingdingqiuqiu.github.io/tags/Git/">点此跳转</a></p>
</blockquote>
<p>但是，CS61b专门提供了一篇<code>git</code>深度指南。必要时可以做一次汉化实践，先当指南看着。</p>
<p><a href="https://sp24.datastructur.es/resources/guides/git/">CS61b官方git指南</a></p>
<p>这里先就此复习下<strong>远程存储库</strong>部分(实际上是CS61b当时的要求)</p>
<ul>
<li><code>git clone [remote-repo-URL]</code>：在本地计算机上创建指定存储库的副本。还创建一个工作目录，其中的文件排列方式与下载存储库中的最新快照完全相同。还记录用于后续网络数据传输的远程存储库的 URL，并为其赋予特殊的远程存储库名称“origin”。</li>
<li><code>git remote add [remote-repo-name] [remote-repo-URL]</code>：记录网络数据传输的新位置。</li>
<li><code>git remote -v</code>：列出网络数据传输的所有位置。</li>
<li><code>git pull [remote-repo-name] main</code>：获取文件的最新副本，如 中所示<code>remote-repo-name</code>。</li>
<li><code>git push [remote-repo-name] main</code>：将文件的最新副本上传到<code>remote-repo-name</code>。</li>
</ul>
<p>对于本课程的大部分时间，您只有两个远程存储库：</p>
<p><code>origin</code>，它是用于保存和提交您的个人工作的远程存储库</p>
<p><code>sculpture</code>，它是您将从中接收框架代码的远程存储库。</p>
<p>这里<code>git</code>初始配置贴一个没见过（使用过）的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global pull.rebase false</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>pull.rebase</code> 是一个配置项，它决定了 <code>git pull</code> 命令的行为。如果设置为 <code>true</code>，那么在执行 <code>git pull</code> 命令时，Git 会使用 <code>rebase</code> 而不是 <code>merge</code> 来合并远程仓库的新提交。<code>rebase</code> 会把你本地的提交放到远程仓库的新提交之后，这样可以得到一个线性的提交历史，使得历史更加清晰。</p>
</blockquote>
<h3 id="这块不懂，建议写篇博客专门实践下。"><a href="#这块不懂，建议写篇博客专门实践下。" class="headerlink" title="这块不懂，建议写篇博客专门实践下。"></a>这块不懂，建议写篇博客专门实践下。</h3><p><strong>举例说明</strong></p>
<p>假设你正在开发一个项目，并且你有一个名为 <code>feature</code> 的分支，你正在这个分支上工作。同时，你的同事在 <code>master</code> 分支上也做了一些改动，并且他们已经将这些改动推送到了远程仓库。</p>
<p>现在，你想要获取 <code>master</code> 分支上的最新改动。你有两种方式可以做到这一点：<code>merge</code> 和 <code>rebase</code>。如果你执行 <code>git pull</code> 命令，Git 默认会使用 <code>merge</code> 来合并远程仓库的新提交。</p>
<p>这就是 <code>git config --global pull.rebase false</code> 这个命令的作用。它会设置 Git 的 <code>pull</code> 命令在合并远程仓库的新提交时，使用 <code>merge</code> 而不是 <code>rebase</code>。</p>
<p>例如，你的提交历史可能会像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A - B - C (master)</span><br><span class="line">     \</span><br><span class="line">      D - E (feature)</span><br></pre></td></tr></table></figure>
<p>当你在 <code>feature</code> 分支上执行 <code>git pull origin master</code> 后，如果你的 <code>pull.rebase</code> 配置项被设置为 <code>false</code>，那么你的提交历史会变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A - B - C - F (master)</span><br><span class="line">     \       /</span><br><span class="line">      D - E (feature)</span><br></pre></td></tr></table></figure>
<p>这里的 <code>F</code> 就是一个新的 “合并提交”，它包含了 <code>master</code> 分支和 <code>feature</code> 分支的所有改动。</p>
<p>如果你的 <code>pull.rebase</code> 配置项被设置为 <code>true</code>，那么在执行 <code>git pull origin master</code> 后，你的提交历史会变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A - B - C (master)</span><br><span class="line">         \</span><br><span class="line">          D&#x27; - E&#x27; (feature)</span><br></pre></td></tr></table></figure>
<p>这里的 <code>D&#39;</code> 和 <code>E&#39;</code> 是 <code>D</code> 和 <code>E</code> 的重新应用。它们的改动和 <code>D</code> 和 <code>E</code> 是一样的，但它们是全新的提交，因为它们的父提交是 <code>C</code>，而不是 <code>B</code>。</p>
<p>所以，<code>git config --global pull.rebase false</code> 这个命令的意思就是在全局范围内，设置 <code>git pull</code> 命令在合并远程仓库的新提交时，使用 <code>merge</code> 而不是 <code>rebase</code>。这是 Git 的默认行为，如果你没有特别的需求，一般不需要执行这个命令。</p>
<h3 id="Git-存储库和-Java-库"><a href="#Git-存储库和-Java-库" class="headerlink" title="Git 存储库和 Java 库"></a>Git 存储库和 Java 库</h3><h3 id="Java-库"><a href="#Java-库" class="headerlink" title="Java 库"></a>Java 库</h3><p>就像在 Python 中一样，我们有时想使用其他人编写的库。Java 依赖项管理有点混乱，因此我们提供了一个 git 存储库，其中包含我们将在本课程中使用的所有依赖项。再次确保您的终端已打开。</p>
<p>导航到您要存储库的文件夹。对于本实验，我们假设您将所有内容放置在名为<strong>cs61b</strong>的文件夹中。如果您愿意，可以选择不同的名称。<code>cs61b</code>导航到您想要的位置、创建目录并进入该目录后（<code>cd cs61b</code>在本例中），它可能看起来像这样：</p>
<p><img src="https://sp24.datastructur.es/labs/lab01/img/terminal_directory.png" alt="终端目录"></p>
<p>进入文件夹后，运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Berkeley-CS61B/library-sp24</span><br></pre></td></tr></table></figure>
<p>下面是 的目录结构<code>library-sp24</code>。使用查看文件夹内部 <code>ls library-sp24</code>并确保您看到<code>.jar</code>下面列出的文件。还有很多，但我们只列出前几个。如果您使用操作系统的文件资源管理器，该<code>jar</code>部分可能不会显示在文件名中，但这没关系。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library-sp24</span><br><span class="line">├── algs4.jar</span><br><span class="line">├── animated-gif-lib-1.4.jar</span><br><span class="line">├── antlr4-runtime-4.11.1.jar</span><br><span class="line">├── apiguardian-api-1.1.2.jar</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure>
<h3 id="个人储存库"><a href="#个人储存库" class="headerlink" title="个人储存库"></a>个人储存库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CS61b/</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:dingdingqiuqiu/CS61B-sp24.git</span><br><span class="line"># git clone git@github.com:dingdingqiuqiu/CS61B-sp21.git  </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd CS61B-sp24</span><br><span class="line"># cd CS61B-sp21  </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -M main  </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp24.git </span><br><span class="line"># git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp21.git</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull skeleton main</span><br><span class="line"># git pull skeleton master</span><br></pre></td></tr></table></figure>
<p>课程实验库拉取成功</p>
<blockquote>
<p>后续发现sp21有开源的自动评分机器，又开了个sp21的仓库。</p>
<p>注释部分为sp21版</p>
<p>将普通用户赋权root组，又配置了下ssh普通用户的rsa密钥。</p>
<p>gpasswd -a P4yl04d root   </p>
<p>赋权命令</p>
</blockquote>
<h3 id="IntelliJ-设置"><a href="#IntelliJ-设置" class="headerlink" title="IntelliJ 设置"></a>IntelliJ 设置</h3><p>查看<a href="https://sp24.datastructur.es/resources/guides/intellij/wtfs/">IntelliJ WTFS 指南</a>以获取一些常见问题的解决方案。</p>
<p>安装CS61b插件</p>
<p><img src="https://sp24.datastructur.es/labs/lab01/img/plugin_setup2.png" alt="搜索 CS 61B"></p>
<p>现在，搜索“Java Visualizer”，然后单击绿色的<strong>安装</strong>按钮来安装该插件。</p>
<p><img src="https://sp24.datastructur.es/labs/lab01/img/plugin_setup3.png" alt="搜索 Java 可视化工具"></p>
<h3 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h3><blockquote>
<p>略</p>
</blockquote>
<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><p>打开名为<code>Collatz.java</code>. 尝试运行它，您将看到打印出数字 5。</p>
<p>该程序应该打印从给定数字开始的<a href="https://en.wikipedia.org/wiki/Collatz_conjecture">Collatz 序列。</a>Collatz 序列定义如下：</p>
<p>如果 n 是偶数，则下一个数字是 n/2。如果 n 是奇数，则下一个数字是 3n + 1。如果 n 是 1，则序列结束。</p>
<p>例如，假设我们从 5 开始。由于 5 是奇数，所以下一个数字是 3x5 + 1 = 16。由于 16 是偶数，所以下一个数字是 8。由于 8 是偶数，所以下一个数字是 4。由于 4 是偶数下一个数字是 2。由于 2 是偶数，所以下一个数字是 1。此时我们就完成了。顺序是 5、16、8、4、2、1。</p>
<p>您的第一个任务是编写一个方法，如下所示：<code>public static int nextNumber(int n)</code>返回下一个数字。例如<code>nextNumber(5)</code>应返回 16。此方法将由 Gradescope 自动评分器进行测试。确保提供该方法的描述作为注释。您的描述应包含在<code>/**</code>和中<code>*/</code>。包含的注释<code>/**</code>也<code>*/</code>称为“Javadoc 注释”或简称为“Javadoc”。如果这些注释需要额外的空间，则可以跨越多行，例如 Javadocs <code>nextNumber</code>。</p>
<p>Javadoc 可能包含可选标签，例如<code>@param</code>. 除了 标签外，我们不要求您在 61B 中使用任何类似的标签<code>@source</code>。<code>@source</code>每当您在项目上获得重要帮助时，请使用该标签。<code>@source</code>硬件或实验室不需要该标签，但我们还是推荐它，因为引用来源是一个良好的学术和专业习惯。</p>
<p>一些 Java 技巧：</p>
<ul>
<li>运算<code>%</code>符实现余数。例如， 的值<code>x % 4</code>将为 <code>0</code>、<code>1</code>、<code>2</code>或<code>3</code>。</li>
<li>该<code>==</code>运算符比较两个值是否不相等。代码片段<code>if (n % 4 == 1)</code>读作“如果 n 除以 4 的余数等于 1”。</li>
</ul>
<p>编写完成后<code>nextNumber</code>，填写<code>main</code>方法，使其打印出从 开始的 Collatz 序列<code>n = 5</code>。例如，如果<code>n = 5</code>，您的程序应该打印<code>5 16 8 4 2 1</code>。如果1后面有一个额外的空格就可以了。</p>
<p>有趣的事实：对于所有数字，Collatz 序列似乎都终止于 1。然而，到目前为止，没有人能够证明这对于所有可能的起始值都是正确的，但已检查了大约 2^68 以内的所有值。正如维基百科文章中所述，数学家杰弗里·拉加里亚斯指出，科拉茨猜想“是一个极其困难的问题，完全超出了当今数学的范围”。</p>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2>]]></content>
  </entry>
  <entry>
    <title>Bufbomb栈溢出炸弹实验</title>
    <url>/2023/12/15/Bufbomb%E6%A0%88%E6%BA%A2%E5%87%BA%E7%82%B8%E5%BC%B9%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<p>本文是对计算机系统基础第三次实验的复现，以此为基础讲解栈溢出的相关知识。</p>
<span id="more"></span>
<h3 id="基本逻辑逆向"><a href="#基本逻辑逆向" class="headerlink" title="基本逻辑逆向"></a>基本逻辑逆向</h3><p><code>main</code>函数</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212861&authkey=%21ANiKrfTOh3bHFkY&width=812&height=668" width="812" height=" " /></p>
<p>这里比较引人注目的是<code>signal</code>函数，先执行了三个该函数，又引入标准输入的文件描述符为<code>infile</code>,以下链接比较深入讲解了<code>signal</code>函数，读者可详细了解。</p>
<p><a href="https://www.tutorialspoint.com/c_standard_library/c_function_signal.htm">C library function - signal()</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sighandler</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span> &#123;</span><br><span class="line">   signal(SIGINT, sighandler);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Going to sleep for a second...\n&quot;</span>);</span><br><span class="line">      sleep(<span class="number">1</span>); </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sighandler</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Caught signal %d, coming out...\n&quot;</span>, signum);</span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下是一个可能的输出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Going to sleep <span class="keyword">for</span> a second...</span><br><span class="line">Going to sleep <span class="keyword">for</span> a second...</span><br><span class="line">Going to sleep <span class="keyword">for</span> a second...</span><br><span class="line">Going to sleep <span class="keyword">for</span> a second...</span><br><span class="line">Going to sleep <span class="keyword">for</span> a second...</span><br><span class="line">Caught signal <span class="number">2</span>, coming out...</span><br></pre></td></tr></table></figure>
<p>总之，这段利用<code>sign</code>函数来实现了一些违规输入的提示。包括段溢出，进程繁忙和错误指令。例如下面是段溢出错误的提示。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212863&authkey=%21ANiKrfTOh3bHFkY&width=1489&height=660" width="1489" height="" /></p>
<p>接下来，程序会去走一个循环。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212865&authkey=%21ANiKrfTOh3bHFkY&width=1479&height=660" width="1479" height="" /></p>
<p><a href="https://www.tutorialspoint.com/getopt-function-in-c-to-parse-command-line-arguments"><code>getopt()</code>function in C to parse command line arguments</a></p>
<p><code>getopt()</code>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">getopt(<span class="type">int</span> argc, <span class="type">char</span> *<span class="type">const</span> argv[], <span class="type">const</span> <span class="type">char</span> *optstring)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如果选项带有一个值，那么该值将由<code>optarg</code> 指向</p>
</li>
<li><p>当没有更多选项可以处理时，它将返回-1</p>
</li>
<li><p>返回“?”表明这是一个无法识别的选项，它将其存储到 <code>optopt</code> 中。</p>
</li>
<li><p>有时某些选项需要一些值，如果选项存在但值不存在，那么它也会返回“？”。</p>
</li>
<li>我们可以使用 ‘:’ 作为 <code>optstring</code> 的第一个字符，这样，如果没有给出值，它将返回 ‘:’ 而不是 ‘?’。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main(<span class="type">int</span> argc, <span class="type">char</span> *argv[]) &#123;</span><br><span class="line">   <span class="type">int</span> option;</span><br><span class="line">   <span class="comment">// put &#x27;:&#x27; at the starting of the string so compiler can distinguish between &#x27;?&#x27; and &#x27;:&#x27;</span></span><br><span class="line">   <span class="keyword">while</span>((option = getopt(argc, argv, <span class="string">&quot;:if:lrx&quot;</span>)) != <span class="number">-1</span>)&#123; <span class="comment">//get option from the getopt() method</span></span><br><span class="line">      <span class="keyword">switch</span>(option)&#123;</span><br><span class="line">         <span class="comment">//For option i, r, l, print that these are options</span></span><br><span class="line">         <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Given Option: %c\n&quot;</span>, option);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>: <span class="comment">//here f is used for some file name</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Given File: %s\n&quot;</span>, optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&#x27;:&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;option needs a value\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>: <span class="comment">//used for some unknown options</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;unknown option: %c\n&quot;</span>, optopt);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(; optind &lt; argc; optind++)&#123; <span class="comment">//when some extra arguments are passed</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Given extra arguments: %s\n&quot;</span>, argv[optind]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下是输出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Given Option: i</span><br><span class="line">Given File: test_file.c</span><br><span class="line">Given Option: l</span><br><span class="line">Given Option: r</span><br><span class="line">Given extra arguments: hello</span><br></pre></td></tr></table></figure>
<p>因此，很容易为这段循环设置下面这段注释</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> ) <span class="comment">// 无限循环</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = getopt(argc, (<span class="type">char</span> *<span class="type">const</span> *)argv, <span class="string">&quot;gsnhu:&quot;</span>); <span class="comment">// 解析命令行参数</span></span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">-1</span> ) <span class="comment">// 如果没有更多的参数</span></span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">// 退出循环</span></span><br><span class="line">    <span class="keyword">switch</span> ( v4 ) <span class="comment">// 根据参数类型进行处理</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>: <span class="comment">// 如果参数是 &#x27;g&#x27;</span></span><br><span class="line">        autograde = <span class="number">1</span>; <span class="comment">// 设置自动评分标志</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>: <span class="comment">// 如果参数是 &#x27;h&#x27;</span></span><br><span class="line">        usage(); <span class="comment">// 调用 usage 函数</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>: <span class="comment">// 如果参数是 &#x27;n&#x27;</span></span><br><span class="line">        v10 = <span class="number">1</span>; <span class="comment">// 设置 v10 标志</span></span><br><span class="line">        v3 = <span class="number">5</span>; <span class="comment">// 设置 v3 的值为 5</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: <span class="comment">// 如果参数是 &#x27;s&#x27;</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;This is a quiet bomb. Ignoring -s flag.&quot;</span>); <span class="comment">// 输出一条消息</span></span><br><span class="line">        notify = <span class="number">0</span>; <span class="comment">// 设置通知标志</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>: <span class="comment">// 如果参数是 &#x27;u&#x27;</span></span><br><span class="line">        userid = __strdup(optarg); <span class="comment">// 复制用户 ID</span></span><br><span class="line">        cookie = gencookie(userid); <span class="comment">// 生成 cookie</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>: <span class="comment">// 如果参数不是上述任何一种</span></span><br><span class="line">        usage(); <span class="comment">// 调用 usage 函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __usercall __noreturn <span class="title function_">usage</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1@&lt;eax&gt;)</span></span><br><span class="line">&#123;</span><br><span class="line">  __printf_chk(<span class="number">1</span>, <span class="string">&quot;Usage: %s -u &lt;userid&gt; [-nsh]\n&quot;</span>, a1);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  -u &lt;userid&gt; User ID&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  -n          Nitro mode&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  -s          Submit your solution to the grading server&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  -h          Print help information&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后一段，要求必须有<code>userid</code>,即执行<code>bufbomb</code>程序的时候必须添加<code>-u</code>参数。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212867&authkey=%21ANiKrfTOh3bHFkY&width=1100&height=802" width="1100" height=" " /></p>
<p>后面初始化<code>bomb</code>炸弹，打印<code>Userid</code>和<code>Cookie</code>。重点看下下面这段的汇编，<code>cookie</code>放<code>eax</code>寄存器以后，放到栈顶，作为<code>seed</code>执行<code>_srandom</code>函数和<code>_random</code>函数，该函数的返回值与<code>0xFF0</code>按位与运算后将结果加上256，比较符合C伪代码，并将结果放到<code>esp+18</code>的内存地址，后面将<code>4</code>和<code>edi</code>里存的数据作为参数入栈，查看<code>edi(v3)</code>的引用信息，发现默认为1，在传入<code>-n</code>参数时修改为5。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212869&authkey=%21ANiKrfTOh3bHFkY&width=862&height=677" width="862" height=" " /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212871&authkey=%21ANiKrfTOh3bHFkY&width=1030&height=287" width="1030" height="" /></p>
<p>使用<code>_calloc</code>函数分配好堆空间以后，把分配空间的内存地址放到<code>eax</code>寄存器中,并把堆空间中首元素置零，<code>ebx</code>寄存器赋1，跳转到<code>loc_80491BB</code>。后面分析下来基本和C伪代码保持一致。重点在于<code>-n</code>参数会把<code>v10(默认为0)</code>参数改为<code>1</code>,会把<code>v3（默认为1）</code>参数改为5，从而影响到分配到分配到的<code>v5</code>的大小，这里我将其改名为<code>arry</code>，为了便于理解，将其他参数也改名。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">launcher(launcher_flag, arry[j] + ran_cookie);</span><br></pre></td></tr></table></figure>
<p>这是修改后的各个参数的名字，后面我们重点分析<code>launcher</code>函数即可。看下<code>launcher</code>函数的C风格的伪代码</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212873&authkey=%21ANiKrfTOh3bHFkY&width=1230&height=419" width="1230" height="" /></p>
<p>可以看到，<code>launcher_flag</code>实际上是开启<code>nitro</code>这一关的全局变量，<code>arry[j] + ran_cookie</code>随机数当作全局偏移量量出现。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">launcher</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span> <span class="comment">// 定义一个名为 launcher 的函数，它接受两个整数参数 a1 和 a2</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// 在栈上定义一个整数变量 v3 [esp+0h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  global_nitro = a1; <span class="comment">// 将 a1 的值赋给全局变量 global_nitro</span></span><br><span class="line">  global_offset = a2; <span class="comment">// 将 a2 的值赋给全局变量 global_offset</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 mmap 函数尝试在内存中预留一块空间，大小为 0x100000 字节，权限为 7（即可读、可写、可执行），并将其映射到进程的地址空间</span></span><br><span class="line">  <span class="comment">// 如果映射失败（即 mmap 的返回值不等于预期的地址 reserved），则向标准错误输出流 stderr 写入错误信息，并退出程序</span></span><br><span class="line">  <span class="keyword">if</span> ( mmap(&amp;reserved, <span class="number">0x100000</span>u, <span class="number">7</span>, <span class="number">306</span>, <span class="number">0</span>, <span class="number">0</span>) != &amp;reserved )</span><br><span class="line">  &#123;</span><br><span class="line">    fwrite(<span class="string">&quot;Internal error.  Couldn&#x27;t use mmap. Try different value for START_ADDR\n&quot;</span>, <span class="number">1u</span>, <span class="number">0x47</span>u, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stack_top = (<span class="type">int</span>)&amp;unk_55685FF8; <span class="comment">// 将一个未知的内存地址赋给全局变量 stack_top</span></span><br><span class="line">  global_save_stack = (<span class="type">int</span>)&amp;v3; <span class="comment">// 将 v3 的地址赋给全局变量 global_save_stack</span></span><br><span class="line"></span><br><span class="line">  launch(global_nitro, global_offset); <span class="comment">// 调用名为 launch 的函数，参数为 global_nitro 和 global_offset</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> munmap(&amp;reserved, <span class="number">0x100000</span>u); <span class="comment">// 使用 munmap 函数取消之前通过 mmap 函数预留的内存空间，并返回 munmap 的结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点看下<code>mmap</code>分配的空间，应该注意到，<code>(int)&amp;unk_55685FF8</code>实际上是<code>mmap()</code>函数分配的内存空间的<code>reserved</code>的最后一段。下面是程序头表（Program Header Table，PHT）的条目，它是在可执行和链接格式（ELF）文件中找到的。这个条目提供了加载（LOAD）段到内存中的必要信息。注意这里的 <code>_reserved</code> 物理地址这刚好是<code>0x5586000</code>,分配的权限为<code>6</code>（写和读），大小是<code>0x100000</code>。</p>
<p><a href="https://www.ibm.com/docs/en/zos/2.4.0?topic=functions-mmap-map-pages-memor">mmap函数说明文档</a></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212881&authkey=%21ANiKrfTOh3bHFkY&width=1454&height=837" width="1454" height="" /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212878&authkey=%21ANiKrfTOh3bHFkY&width=1454&height=837" width="1454" height="" /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212879&authkey=%21ANiKrfTOh3bHFkY&width=1454&height=837" width="1454" height="" /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212881&authkey=%21ANiKrfTOh3bHFkY&width=1454&height=837" width="1454" height="" /></p>
<p>有关信息与上图所示，重点是对一些变量的赋值和分配堆空间。重点函数是<code>launch</code>,看下C风格的伪代码。下面是入栈信息，可以看到参数并未放栈上，而是放在了<code>eax</code>和<code>edx</code>寄存器中了。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212884&authkey=%21ANiKrfTOh3bHFkY&width=1540&height=871" width="1540" height="" /></p>
<p>看下函数本体。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212885&authkey=%21ANiKrfTOh3bHFkY&width=1454&height=837" width="1454" height="" /></p>
<p>C伪代码</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212887&authkey=%21ANiKrfTOh3bHFkY&width=1025&height=554" width="1025" height="" /></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __usercall launch@&lt;eax&gt;(<span class="type">int</span> global_nitro@&lt;eax&gt;, <span class="type">int</span> global_offset@&lt;edx&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// esp，栈指针</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+10h] [ebp-58h] BYREF，局部变量v5</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+5Ch] [ebp-Ch]，局部变量v6</span></span><br><span class="line">  <span class="type">int</span> savedregs; <span class="comment">// [esp+68h] [ebp+0h] BYREF，保存寄存器的值</span></span><br><span class="line"></span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u); <span class="comment">// 读取线程局部存储（Thread Local Storage，TLS）中的值</span></span><br><span class="line">  v3 = alloca((((<span class="type">unsigned</span> __int16)&amp;savedregs - <span class="number">76</span>) &amp; <span class="number">0x3FF0</span>) + global_offset + <span class="number">15</span>); <span class="comment">// 分配一块内存，大小取决于savedregs的地址、global_offset和15</span></span><br><span class="line">  <span class="built_in">memset</span>(&amp;v5, <span class="number">244</span>, ((<span class="type">unsigned</span> __int16)&amp;savedregs - <span class="number">76</span>) &amp; <span class="number">0x3FF0</span>); <span class="comment">// 将v5的内存区域设置为244</span></span><br><span class="line">  __printf_chk(<span class="number">1</span>, <span class="string">&quot;Type string:&quot;</span>); <span class="comment">// 打印字符串&quot;Type string:&quot;</span></span><br><span class="line">  <span class="keyword">if</span> ( global_nitro ) <span class="comment">// 如果global_nitro为真</span></span><br><span class="line">    testn(); <span class="comment">// 调用函数testn</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    test(); <span class="comment">// 否则调用函数test</span></span><br><span class="line">  <span class="keyword">if</span> ( !success ) <span class="comment">// 如果success为假</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Better luck next time&quot;</span>); <span class="comment">// 打印字符串&quot;Better luck next time&quot;</span></span><br><span class="line">    success = <span class="number">0</span>; <span class="comment">// 将success设置为0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v6; <span class="comment">// 返回TLS中的值与v6的异或结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进去<code>testn()</code>函数和<code>test()</code>函数看一下，大体可以分辨这两个函数为漏洞函数。<code>testn()</code>需要<code>-n</code>参数触发，<code>test()</code>函数不需要。大体知道这些就够了，具体的漏洞原理流程在每个部分具体说明。</p>
<h3 id="Smoke"><a href="#Smoke" class="headerlink" title="Smoke"></a>Smoke</h3><p>可以看到，<code>Gets</code>函数最多能读取1024个字节，而数组大小仅仅为40个字节，因此，可以传入44个字节装满数组并覆盖<code>rbp</code>,4个字节覆盖返回地址，使得跳转到指定的返回地址，本题要求是跳转到<code>Smoke</code>函数，仅仅跳转过去就完成了目标。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212889&authkey=%21ANiKrfTOh3bHFkY&width=859&height=759" width="859" height="" /></p>
<p>原理主要是因为<code>leave</code>指令相当于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov esp, ebp</span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure>
<p><code>ret</code>指令相当于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop eip</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：这里的<code>eip</code>是不能直接操作的，所以上述代码只是为了解释<code>ret</code>的功能，并不能直接在代码中使用。</p>
</blockquote>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212891&authkey=%21ANiKrfTOh3bHFkY&width=1225&height=676" width="1225" height="" /></p>
<p>返回点在如图所示的高亮部分。</p>
<h3 id="Fizz"><a href="#Fizz" class="headerlink" title="Fizz"></a>Fizz</h3><p>本题还要求<code>cookie</code>要与栈上一个值相等。</p>
<p>这是修改后的各个参数的名字，后面我们重点分析<code>launcher</code>函数即可。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212873&authkey=%21ANiKrfTOh3bHFkY&width=1230&height=419" width="1230" height="" /></p>
<p>这段除了<code>launch</code>以外都是分配内存与变量赋值的操作，重点看下<code>launch</code>函数，逻辑也很简单，开<code>-n</code>参数执行<code>testn</code>，不开<code>-n</code>执行<code>test</code>函数</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212887&authkey=%21ANiKrfTOh3bHFkY&width=1025&height=554" width="1025" height="" /></p>
<h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h3><p><code>leave</code>指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push esp,ebp</span><br><span class="line">pop  ebp</span><br></pre></td></tr></table></figure>
<p><code>ret</code>指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop eip</span><br></pre></td></tr></table></figure>
<h3 id="Smoke-1"><a href="#Smoke-1" class="headerlink" title="Smoke"></a>Smoke</h3><blockquote>
<p>函数在执行<code>getbuf</code>后不返回1，而是转向<code>Smoke</code>函数</p>
</blockquote>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212896&authkey=%21ANiKrfTOh3bHFkY&width=824&height=344" width="824" height="" /></p>
<p>容易知道，<code>Gets</code>函数最多能写入1024个字节，而<code>v1</code>仅仅开辟了40（0x28）个字节的空间。因此，输入可以用44个字节覆盖整个<code>v1</code>和<code>ebp</code>，再用4个字节覆盖返回地址，使函数跳转到<code>Smoke</code>执行。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212898&authkey=%21ANiKrfTOh3bHFkY&width=735&height=189" width="735" height="" /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212900&authkey=%21ANiKrfTOh3bHFkY&width=654&height=703" width="654" height="" /></p>
<p>实操：生成<code>cookie</code></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212902&authkey=%21ANiKrfTOh3bHFkY&width=556&height=101" width="556" height="" /></p>
<p>二进制文件<code>Smkoe</code></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212904&authkey=%21ANiKrfTOh3bHFkY&width=839&height=156" width="839" height="" /></p>
<p>验证</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212906&authkey=%21ANiKrfTOh3bHFkY&width=553&height=206" width="553" height="" /></p>
<h3 id="Fizz-1"><a href="#Fizz-1" class="headerlink" title="Fizz"></a>Fizz</h3><p>跳转思路与<code>Smoke</code>一致，不过这里还需要与栈上数据比较一下</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212907&authkey=%21ANiKrfTOh3bHFkY&width=774&height=297" width="774" height="" /></p>
<p>那就在后面再加上几位<code>cookie</code>即可</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212909&authkey=%21ANiKrfTOh3bHFkY&width=835&height=176" width="835" height="" /></p>
<p>执行结果</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212911&authkey=%21ANiKrfTOh3bHFkY&width=633&height=216" width="633" height="" /></p>
<h3 id="Bang"><a href="#Bang" class="headerlink" title="Bang"></a>Bang</h3><p>要求与全局变量进行比较，修改下全局变量</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212913&authkey=%21ANiKrfTOh3bHFkY&width=881&height=342" width="881" height="" /></p>
<p>在跳转<code>bang</code>之前需要执行的汇编指令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push 0x3962b26d,%eax</span><br><span class="line">mov  %eax,0x0804d100</span><br><span class="line">ret </span><br></pre></td></tr></table></figure>
<h3 id="Nitro"><a href="#Nitro" class="headerlink" title="Nitro"></a>Nitro</h3><p>通过第一阶段的基本逻辑分析容易知道：只有在执行<code>-n</code>程序的时候添加<code>-n</code>参数，该阶段才会被开启。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212922&authkey=%21ANiKrfTOh3bHFkY&width=917&height=421" width="917" height="" /></p>
<p>这里<code>testn</code>函数如果想正常返回，需要满足两个条件</p>
<ul>
<li>栈帧不被破坏</li>
<li><code>getbufn</code>函数返回<code>cookie</code></li>
</ul>
<p>我们现在来寻找漏洞点来注入我们的攻击指令。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212924&authkey=%21ANiKrfTOh3bHFkY&width=693&height=208" width="693" height="" /></p>
<p>我们前面分析了<code>Gets</code>函数的实现，容易知道，这里是存在栈溢出漏洞的。依照前面的思路，我们用520个字符填满<code>v1</code>数组，用4个字符覆盖<code>ebp</code>，用四个字符覆盖<code>getbufn</code>的返回地址。由前面的基本逻辑逆向，我们知道，该函数实际上需要执行5次，每次执行时的栈状态不一致，因此，我们选择使用<code>nop</code>指令来填充输入中除了攻击指令其他位置，以此保证只要返回地址跳到任意一个<code>nop</code>指令上，程序都会执行我们的攻击指令。</p>
<p>以上的分析结束以后，是时候来生成攻击指令了。</p>
<p>先写出汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lea 0x28(%ebp),%esp</span><br><span class="line">mov cookie,%eax</span><br><span class="line">push 返回地址</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OS</category>
        <category>asm</category>
        <category>Pwn</category>
        <category>Book</category>
        <category>StackOverflow</category>
        <category>CSAPP</category>
      </categories>
      <tags>
        <tag>gdb</tag>
        <tag>asm</tag>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61b食用指南</title>
    <url>/2024/03/14/CS61b%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>本文是对CS61b资源的总结和汉化，同时记录自己的学习过程。</p>
<span id="more"></span>
<p>本课程教材：<a href="https://cs61b-2.gitbook.io/cs61b-textbook/3.-references-recursion-and-lists">CS61b教材</a></p>
<h3 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h3><p>博客链接：</p>
]]></content>
  </entry>
  <entry>
    <title>Frida使用</title>
    <url>/2023/11/18/Frida%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本文主要讲解自动化逆向工具<code>Frida</code>的使用，长期更新，计划采用理论加实战。<br><span id="more"></span></p>
<h3 id="Frida使用"><a href="#Frida使用" class="headerlink" title="Frida使用"></a>Frida使用</h3><p>c:\users\lenovo\appdata\local\pip\cache\wheels\fb\7a\50\0944b1c7a77e594e0a66e9a1f6925dd6b262887f31358fe26a</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">PS C:\Users\lenovo\Desktop&gt; pip install frida-tools</span><br><span class="line">Collecting frida-tools</span><br><span class="line">  Downloading frida-tools-<span class="number">12</span>.<span class="number">3</span>.<span class="number">0</span>.tar.gz (<span class="number">200</span> kB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class="number">200</span>.<span class="number">5</span>/<span class="number">200</span>.<span class="number">5</span> kB <span class="number">158</span>.<span class="number">2</span> kB/s eta <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">  Installing build dependencies ... done</span><br><span class="line">  Getting requirements to build wheel ... done</span><br><span class="line">  Preparing metadata (pyproject.toml) ... done</span><br><span class="line">Collecting colorama&lt;<span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span>,&gt;=<span class="number">0</span>.<span class="number">2</span>.<span class="number">7</span> (from frida-tools)</span><br><span class="line">  Downloading colorama-<span class="number">0</span>.<span class="number">4</span>.<span class="number">6</span>-py2.py3-none-any.whl (<span class="number">25</span> kB)</span><br><span class="line">Collecting frida&lt;<span class="number">17</span>.<span class="number">0</span>.<span class="number">0</span>,&gt;=<span class="number">16</span>.<span class="number">0</span>.<span class="number">9</span> (from frida-tools)</span><br><span class="line">  Obtaining dependency information <span class="keyword">for</span> frida&lt;<span class="number">17</span>.<span class="number">0</span>.<span class="number">0</span>,&gt;=<span class="number">16</span>.<span class="number">0</span>.<span class="number">9</span> from https://files.pythonhosted.org/packages/<span class="number">53</span>/ab/<span class="number">8351</span>fd5bb7c6879e3c47c8f7d23be757d43b0585660ded476d9c9e0f1d89/frida-<span class="number">16</span>.<span class="number">1</span>.<span class="number">6</span>-cp37-abi3-win_amd64.whl.metadata</span><br><span class="line">  Downloading frida-<span class="number">16</span>.<span class="number">1</span>.<span class="number">6</span>-cp37-abi3-win_amd64.whl.metadata (<span class="number">2</span>.<span class="number">1</span> kB)</span><br><span class="line">Collecting prompt-toolkit&lt;<span class="number">4</span>.<span class="number">0</span>.<span class="number">0</span>,&gt;=<span class="number">2</span>.<span class="number">0</span>.<span class="number">0</span> (from frida-tools)</span><br><span class="line">  Obtaining dependency information <span class="keyword">for</span> prompt-toolkit&lt;<span class="number">4</span>.<span class="number">0</span>.<span class="number">0</span>,&gt;=<span class="number">2</span>.<span class="number">0</span>.<span class="number">0</span> from https://files.pythonhosted.org/packages/<span class="number">1</span>f/<span class="number">9</span>d/be9b01085bbd67a71c4b6aa02518fade8104e7a2224e5de5e947811d7176/prompt_toolkit-<span class="number">3</span>.<span class="number">0</span>.<span class="number">41</span>-py3-none-any.whl.metadata</span><br><span class="line">  Downloading prompt_toolkit-<span class="number">3</span>.<span class="number">0</span>.<span class="number">41</span>-py3-none-any.whl.metadata (<span class="number">6</span>.<span class="number">5</span> kB)</span><br><span class="line">Collecting pygments&lt;<span class="number">3</span>.<span class="number">0</span>.<span class="number">0</span>,&gt;=<span class="number">2</span>.<span class="number">0</span>.<span class="number">2</span> (from frida-tools)</span><br><span class="line">  Obtaining dependency information <span class="keyword">for</span> pygments&lt;<span class="number">3</span>.<span class="number">0</span>.<span class="number">0</span>,&gt;=<span class="number">2</span>.<span class="number">0</span>.<span class="number">2</span> from https://files.pythonhosted.org/packages/<span class="number">43</span>/<span class="number">88</span>/<span class="number">29</span>adf0b44ba6ac85045e63734ae0997d3c58d8b1a91c914d240828d0d73d/Pygments-<span class="number">2</span>.<span class="number">16</span>.<span class="number">1</span>-py3-none-any.whl.metadata</span><br><span class="line">  Downloading Pygments-<span class="number">2</span>.<span class="number">16</span>.<span class="number">1</span>-py3-none-any.whl.metadata (<span class="number">2</span>.<span class="number">5</span> kB)</span><br><span class="line">Collecting wcwidth (from prompt-toolkit&lt;<span class="number">4</span>.<span class="number">0</span>.<span class="number">0</span>,&gt;=<span class="number">2</span>.<span class="number">0</span>.<span class="number">0</span>-&gt;frida-tools)</span><br><span class="line">  Obtaining dependency information <span class="keyword">for</span> wcwidth from https://files.pythonhosted.org/packages/<span class="built_in">cd</span>/af/fb045bb3d3daedf28e1bedd771674f73de9e06664a48b1579e14d4120158/wcwidth-<span class="number">0</span>.<span class="number">2</span>.<span class="number">10</span>-py2.py3-none-any.whl.metadata</span><br><span class="line">  Downloading wcwidth-<span class="number">0</span>.<span class="number">2</span>.<span class="number">10</span>-py2.py3-none-any.whl.metadata (<span class="number">14</span> kB)</span><br><span class="line">Downloading frida-<span class="number">16</span>.<span class="number">1</span>.<span class="number">6</span>-cp37-abi3-win_amd64.whl (<span class="number">32</span>.<span class="number">6</span> MB)</span><br><span class="line">   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class="number">32</span>.<span class="number">6</span>/<span class="number">32</span>.<span class="number">6</span> MB <span class="number">218</span>.<span class="number">2</span> kB/s eta <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Downloading prompt_toolkit-<span class="number">3</span>.<span class="number">0</span>.<span class="number">41</span>-py3-none-any.whl (<span class="number">385</span> kB)</span><br><span class="line">   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class="number">385</span>.<span class="number">5</span>/<span class="number">385</span>.<span class="number">5</span> kB <span class="number">300</span>.<span class="number">2</span> kB/s eta <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Downloading Pygments-<span class="number">2</span>.<span class="number">16</span>.<span class="number">1</span>-py3-none-any.whl (<span class="number">1</span>.<span class="number">2</span> MB)</span><br><span class="line">   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class="number">1</span>.<span class="number">2</span>/<span class="number">1</span>.<span class="number">2</span> MB <span class="number">217</span>.<span class="number">3</span> kB/s eta <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Downloading wcwidth-<span class="number">0</span>.<span class="number">2</span>.<span class="number">10</span>-py2.py3-none-any.whl (<span class="number">105</span> kB)</span><br><span class="line">   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class="number">105</span>.<span class="number">2</span>/<span class="number">105</span>.<span class="number">2</span> kB <span class="number">1</span>.<span class="number">2</span> MB/s eta <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Building wheels <span class="keyword">for</span> collected packages: frida-tools</span><br><span class="line">  Building wheel <span class="keyword">for</span> frida-tools (pyproject.toml) ... done</span><br><span class="line">  Created wheel <span class="keyword">for</span> frida-tools: filename=frida_tools-<span class="number">12</span>.<span class="number">3</span>.<span class="number">0</span>-py3-none-any.whl size=<span class="number">209506</span> sha256=<span class="number">4</span>a80e4fa6d17f8c097e0b880f90cab15b4f2565be290ec3afbbb81168413eb95</span><br><span class="line">  Stored <span class="keyword">in</span> directory: c:\users\lenovo\appdata\local\pip\cache\wheels\fb\<span class="number">7</span>a\<span class="number">50</span>\<span class="number">0944</span>b1c7a77e594e0a66e9a1f6925dd6b262887f31358fe26a</span><br><span class="line">Successfully built frida-tools</span><br><span class="line">Installing collected packages: wcwidth, pygments, prompt-toolkit, frida, colorama, frida-tools</span><br><span class="line">Successfully installed colorama-<span class="number">0</span>.<span class="number">4</span>.<span class="number">6</span> frida-<span class="number">16</span>.<span class="number">1</span>.<span class="number">6</span> frida-tools-<span class="number">12</span>.<span class="number">3</span>.<span class="number">0</span> prompt-toolkit-<span class="number">3</span>.<span class="number">0</span>.<span class="number">41</span> pygments-<span class="number">2</span>.<span class="number">16</span>.<span class="number">1</span> wcwidth-<span class="number">0</span>.<span class="number">2</span>.<span class="number">10</span></span><br><span class="line"></span><br><span class="line">[notice] A new release of pip is available: <span class="number">23</span>.<span class="number">2</span>.<span class="number">1</span> -&gt; <span class="number">23</span>.<span class="number">3</span>.<span class="number">1</span></span><br><span class="line">[notice] To update, run: python.exe -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Reserve</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>IDA_v8.3指北</title>
    <url>/2023/12/09/IDA-v8-3%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<p>本文基于IDA_Pro_8.3版本，记录使用过程中的一些问题，以及一些关于IDA的基本操作</p>
<span id="more"></span>
<h2 id="IDA配置"><a href="#IDA配置" class="headerlink" title="IDA配置"></a>IDA配置</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://od.cloudsploit.top/zh-CN/tools/IDA/8.3">IDA_Pro_v8.3</a></p>
<blockquote>
<p>IDA Pro 8.3(x86，x86_64)_BGSPA.zip：这是一个压缩包，里面包含了IDA Pro 8.3的安装文件和一些插件和工具。_</p>
<p>IDA Pro 8.3_(x86_x64_ARM_ARM64_PPC_PPC64_MIPS)_P.Y.G_Team.zip：这也是一个压缩包，里面包含了IDA Pro 8.3的安装文件和一些插件和工具，但是支持不同的处理器架构。</p>
<p>IDA SDK and Tools.7z：这是一个压缩包，里面包含了IDA Pro的开发工具包（SDK），可以用来创建自己的插件和加载器。</p>
<p>ida_keygen.exe：这是一个程序，可以用来生成IDA Pro的密钥文件（ida.key），需要输入用户名和邮箱地址。</p>
<p>IDA_Pro_8.3-incl_kg-HexRaysDec-SDK-READ_NFO-BGSPA：这是一个压缩包，里面包含了IDA Pro 8.3的安装文件、HexRaysDec插件、SDK、README.txt和BGSPA密钥文件。HexRaysDec插件可以用来解密一些使用Hex-Rays加密技术的二进制文件。README.txt说明了如何使用这个密钥文件。BGSPA密钥文件是由BGSPA团队提供的，他们开发了一些游戏相关的反汇编工具。</p>
</blockquote>
<h3 id="Key生成与配置"><a href="#Key生成与配置" class="headerlink" title="Key生成与配置"></a>Key生成与配置</h3><p>这里利用网盘中下载下来的<code>ida_keygen.exe</code>程序，<code>win+r</code>输入<code>cmd</code>,进入<code>ida_keygen.exe</code>所在的文件目录，运行以下命令，生成<code>ida.key</code>文件，将<code>ida.key</code>移动到<code>IDA_Pro_v8.3</code>本体所在文件夹即可。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ida_keygen.exe -v <span class="number">830</span> -u 用户名 -e 编一个邮箱 -t <span class="number">3</span> -s <span class="number">5169</span>&gt; ida.key</span><br></pre></td></tr></table></figure>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212830&authkey=%21ANiKrfTOh3bHFkY&width=1890&height=982" width="1890" height=" " /></p>
<h3 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h3><p>可以将IDA所在的文件路径加入环境变量<code>Path</code>。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212832&authkey=%21ANiKrfTOh3bHFkY&width=729&height=208" width="729" height=" " /></p>
<p>将本体路径<code>D:\1Reserve\IDA_Pro_v8.3\IDA Pro 8.3 (x86, x86_64)_BGSPA\IDA Pro 8.3 (x86, x86_64)</code>加入到<code>Path</code>即可。（双击<code>Path</code>即可编辑值），<strong>不要</strong>点新建，变量名和原<code>Path</code>相同会将原<code>Path</code>覆盖。此后，在<code>cmd</code>里直接输入<code>ida</code>或<code>ida64</code>即可打开软件。</p>
<h2 id="IDA-Debug"><a href="#IDA-Debug" class="headerlink" title="IDA-Debug"></a>IDA-Debug</h2><h3 id="IDA启动时提示IDApython没有imp模块"><a href="#IDA启动时提示IDApython没有imp模块" class="headerlink" title="IDA启动时提示IDApython没有imp模块"></a>IDA启动时提示IDApython没有imp模块</h3><p>我的<code>python</code>版本是<code>python3.12.0</code></p>
<p>报错信息如下：<br><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212834&authkey=%21ANiKrfTOh3bHFkY&width=689&height=143" width="689" height=" " /></p>
<p>因为<code>imp</code>从 <code>Python 3.4</code> 之后弃用了，所以可以使用 <code>importlib</code> 代替，具体操作如下：</p>
<p>修改<code>D:\1Reserve\IDA_Pro_v8.3\IDA Pro 8.3 (x86, x86_64)_BGSPA\IDA Pro 8.3 (x86, x86_64)\python\3</code>下的<code>ida_idaapi.py</code>文件。共有三处需要修改的地方</p>
<p>首先，将第96行的<code>import imp</code>注释掉，增加第97行<code>import importlib</code></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212836&authkey=%21ANiKrfTOh3bHFkY&width=1593&height=575" width="1593" height=" " /></p>
<p>其次，将<code>IDAPython_LoadProcMod</code>函数修改成下面这个样子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">IDAPython_LoadProcMod</span>(<span class="params">path, g, print_error=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载处理器模块。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pname = g[<span class="string">&#x27;__name__&#x27;</span>] <span class="keyword">if</span> g <span class="keyword">and</span> <span class="string">&quot;__name__&quot;</span> <span class="keyword">in</span> g <span class="keyword">else</span> <span class="string">&#x27;__main__&#x27;</span></span><br><span class="line">    parent = sys.modules[pname]</span><br><span class="line">    path_dir, path_fname = os.path.split(path)</span><br><span class="line">    procmod_name = os.path.splitext(path_fname)[<span class="number">0</span>]</span><br><span class="line">    procobj = <span class="literal">None</span></span><br><span class="line">    PY_COMPILE_ERR = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        spec = importlib.util.spec_from_file_location(procmod_name, path)</span><br><span class="line">        procmod = importlib.util.module_from_spec(spec)</span><br><span class="line">        spec.loader.exec_module(procmod)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> parent:</span><br><span class="line">            <span class="built_in">setattr</span>(parent, procmod_name, procmod)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 从父模块导出属性到处理器模块</span></span><br><span class="line">            parent_attrs = <span class="built_in">getattr</span>(parent, <span class="string">&#x27;__all__&#x27;</span>, (attr <span class="keyword">for</span> attr <span class="keyword">in</span> <span class="built_in">dir</span>(parent) <span class="keyword">if</span> <span class="keyword">not</span> attr.startswith(<span class="string">&#x27;_&#x27;</span>)))</span><br><span class="line">            <span class="keyword">for</span> pa <span class="keyword">in</span> parent_attrs:</span><br><span class="line">                <span class="built_in">setattr</span>(procmod, pa, <span class="built_in">getattr</span>(parent, pa))</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 实例化处理器对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">getattr</span>(procmod, <span class="string">&#x27;PROCESSOR_ENTRY&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            procobj = procmod.PROCESSOR_ENTRY()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        PY_COMPILE_ERR = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>\n<span class="subst">&#123;traceback.format_exc()&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> print_error:</span><br><span class="line">            <span class="built_in">print</span>(PY_COMPILE_ERR)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> PY_COMPILE_ERR, procobj</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>最后，将下方的<code>IDAPython_UnLoadProcMod</code>函数修改成下面这个样子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">IDAPython_UnLoadProcMod</span>(<span class="params">script, g, print_error=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    卸载处理器模块。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pname = g[<span class="string">&#x27;__name__&#x27;</span>] <span class="keyword">if</span> g <span class="keyword">and</span> <span class="string">&quot;__name__&quot;</span> <span class="keyword">in</span> g <span class="keyword">else</span> <span class="string">&#x27;__main__&#x27;</span></span><br><span class="line">    parent = sys.modules[pname]</span><br><span class="line"> </span><br><span class="line">    script_fname = os.path.split(script)[<span class="number">1</span>]</span><br><span class="line">    procmod_name = os.path.splitext(script_fname)[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 尝试从父模块的属性中移除处理器模块</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(parent, procmod_name):</span><br><span class="line">        <span class="built_in">delattr</span>(parent, procmod_name)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 尝试从 sys.modules 中移除处理器模块</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sys.modules.pop(procmod_name, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error unloading module <span class="subst">&#123;procmod_name&#125;</span>: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    PY_COMPILE_ERR = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> PY_COMPILE_ERR</span><br></pre></td></tr></table></figure>
<p>保存后重新打开<code>ida</code>,发现警告消失，问题解决。</p>
<p>参考文档:<a href="https://www.52pojie.cn/thread-1862646-1-1.html">IDA 8.3运行报错，如何解决？</a></p>
]]></content>
      <categories>
        <category>Reserve</category>
        <category>Tools</category>
        <category>IDA</category>
      </categories>
      <tags>
        <tag>IDA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java前后端项目部署运行</title>
    <url>/2024/09/22/Java%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<span id="more"></span>
]]></content>
      <tags>
        <tag>项目实战</tag>
      </tags>
  </entry>
  <entry>
    <title>LC005</title>
    <url>/2023/11/28/LC005/</url>
    <content><![CDATA[<p><code>Leetcode</code>刷题记录，第一题涉及哈希表，第二题涉及链表，</p>
<span id="more"></span>
<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 104</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p>
<h2 id="题目解法"><a href="#题目解法" class="headerlink" title="题目解法"></a>题目解法</h2><h3 id="常规解法"><a href="#常规解法" class="headerlink" title="常规解法"></a>常规解法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; length - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;j &lt; length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.这里注意<strong>11</strong>行有可能找不到对应的数组下标，此时<code>return new int[0]</code></p>
<blockquote>
<p><code>new int[0]</code> 是在 Java 中创建一个新的整数数组，但这个数组的长度为0。这意味着这个数组不包含任何元素。虽然这个数组看起来可能没什么用，但在某些情况下，它可以作为一个有效的非空对象返回，以避免返回 null 并可能导致 <code>NullPointerException</code>。这是一种编程技巧，用于处理可能没有数据返回的情况。总的来说，<code>new int[0]</code> 创建了一个空的整数数组。</p>
</blockquote>
<p>2.还有<strong>7</strong>行返回两个数组下标的方法:<code>return new int []&#123;i,j&#125;</code></p>
<p>3.<code>length</code>是属性，不是方法。直接<code>int length = nums.length</code>即可，无需加括号。</p>
<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashtable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashtable.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;hashtable.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashtable.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在哈希表中，<code>containsKey</code>方法的平均时间复杂度是O(1)，这意味着无论哈希表的大小如何，查找一个键的时间都是常数。这是因为哈希表使用哈希函数将键映射到一个特定的桶，然后在该桶中查找键，而桶的数量通常是固定的。</p>
<p>然而，这只是平均情况。在最坏的情况下，如果所有的键都哈希到同一个桶，那么查找一个键的时间复杂度将是O(n)，其中n是哈希表中键的数量。但是，如果哈希函数设计得好，并且键的分布是均匀的，那么这种情况是非常罕见的。</p>
<p>所以，当我们说<code>containsKey</code>方法的时间复杂度是O(1)，我们是指在平均情况下。而在你的代码中，你遍历了数组一次，每次调用<code>containsKey</code>方法一次，所以总的时间复杂度是O(n)。</p>
</blockquote>
<p>比如输入数组是输入：<code>nums = [2,7,11,15], target = 9</code></p>
<p>第一步，利用<code>Map&lt;Integer,Integer&gt; hashtable = new HashMap&lt;Integer,Integer&gt;()</code>创建了一个空的<code>HashMap</code>。</p>
<p>第二步，执行循环，当<code>i = 0</code>时，哈希表中显然没有<code>Ke y</code>值为<code>9 - 2 = 7</code>的桶，所以，执行<code>hashtable.put(nums[i],i)</code>，把<code>2</code>当作<code>Key</code>,把·<code>0</code>当作<code>Value</code>放入哈希表。当执行到<code>i = 1</code>时，哈希表中有<code>Key</code>值为<code>9 - 7 = 2</code>的桶（上一步放进去的）。因此直接返回该桶的<code>Value</code>为<code>0</code>,以及这个<code>i</code>为<code>1</code>。所以返回数组<code>return new int[]&#123; 0 , 1&#125;</code>，符合预期。</p>
<h1 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://camo.githubusercontent.com/99cfc7f31a58e5b5b5eef03561af05e0fd0aae80571c651e8a93df091b619f85/68747470733a2f2f666173746c792e6a7364656c6976722e6e65742f67682f646f6f63732f6c656574636f6465406d61696e2f736f6c7574696f6e2f303030302d303039392f303030322e41646425323054776f2532304e756d626572732f696d616765732f61646474776f6e756d626572312e6a7067" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
<li>题目数据保证列表表示的数字不含前导零</li>
</ul>
<h2 id="题目解法-1"><a href="#题目解法-1" class="headerlink" title="题目解法"></a>题目解法</h2><h3 id="常规解法-1"><a href="#常规解法-1" class="headerlink" title="常规解法"></a>常规解法</h3><blockquote>
<p>主要学习链表相关操作，对链表的处理上模拟正常计算即可</p>
</blockquote>
<p>我们这里举例来方便理解，例如<code>342 + 465 = 807</code>，我们在计算时先将<code>2</code>和<code>5</code>相加得到<code>7</code>，可以看到我们这里计算时恰好是逆顺计算的，与给出的逆序链表恰好对应，甚至省去了假如位数不同需要对齐的问题，自动末尾对齐了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1,ListNode l2)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="literal">null</span>,tail = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> l1 != <span class="literal">null</span> ? l1.val:<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> l2 != <span class="literal">null</span> ? l2.val:<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> n1 + n2 + carry;</span><br><span class="line">            <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">                head = tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tail = tail.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">null</span>)&#123;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">null</span>)&#123;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            tail.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1,ListNode l2)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> l1 != <span class="literal">null</span> ? l1.val:<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> l2 != <span class="literal">null</span> ? l2.val:<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> n1 + n2 + carry;</span><br><span class="line">            <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">                head = tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">                tail = tail.next = <span class="literal">null</span>;             </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">                tail = tail.next = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">null</span>)&#123;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">null</span>)&#123;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上这段代码是错误的，原因是 <strong><code>tail</code>是一个指针</strong> ，指向当前链表节点，第13行中<code>tail = tail.next = null;</code>，仅仅会把<code>tail</code>指针置空，而没其他任何效果。因为在<code>tail = new ListNode(val)</code>时，默认<code>tail.next = null</code>，用来默认当前节点是链表的最后一个元素。所以第二次迭代时，仅仅创建了一个没有和任何链表链接的新节点。正确的做法是在创建新节点后，将 <code>tail.next</code> 指向这个新节点，然后再更新 <code>tail</code> 指针指向新的末尾节点。这样，每次迭代时，新创建的节点都会被正确地添加到链表的末尾。 <strong>只有创建好新节点，<code>tail.next</code>才能指向新节点</strong></p>
<h1 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<h2 id="题目解法-2"><a href="#题目解法-2" class="headerlink" title="题目解法"></a>题目解法</h2><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Set&lt;Character&gt; occ = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Character&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>,tail = <span class="number">0</span>,n = s.length(),ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;head &lt; n;head++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head != <span class="number">0</span>)&#123;</span><br><span class="line">                occ.remove(s.charAt(head-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(tail &lt; n &amp;&amp; !occ.contains(s.charAt(tail)))&#123;</span><br><span class="line">                occ.add(s.charAt(tail));</span><br><span class="line">                tail++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = Math.max(ans,tail - head);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>1.注意第 <strong>4</strong> 行中的<code>length</code>是方法，不是属性。需要<code>int n = s.length()</code>，注意加小括号，这里注意区分<strong>两数之和</strong>处的<code>int []</code>类型的<code>nums</code>的<code>length</code>是属性，并非方法，无需加括号。</p>
<p>2.还有<strong>9</strong>行<code>occ.contains(s.charAt(tail))</code>要去找尾巴，别找错了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lens</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">if</span> (s==<span class="literal">null</span> || s.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定义一个lookup数组表</span></span><br><span class="line">        <span class="type">int</span>[] lookup = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="comment">//将lookup表中元素全部初始化为-1</span></span><br><span class="line">        Arrays.fill(lookup, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">loc</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>;end &lt;lens;end++)&#123;</span><br><span class="line">            <span class="comment">//取出元素</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line">            <span class="comment">//lookup中的ch元素，如果不等于-1，说明出现过</span></span><br><span class="line">            <span class="keyword">if</span> (lookup[ch] != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//更新loc</span></span><br><span class="line">                loc = Math.max(loc, lookup[ch]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将ch在look中的值填入end</span></span><br><span class="line">            lookup[ch] = end;</span><br><span class="line">            <span class="comment">//maxLength取maxLength和end - loc的最大值，因为maxLength每次都会更新且为当前最大长度</span></span><br><span class="line">            <span class="comment">//而end - loc表示在当前等于end时的不重复字符的长度。</span></span><br><span class="line">            maxLength = Math.max(maxLength, end - loc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
        <category>哈希表</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>哈希表</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>ML-lab1_利用梯度下降法训练线性回归模型</title>
    <url>/2024/09/17/ML-lab1-%E5%88%A9%E7%94%A8%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E8%AE%AD%E7%BB%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>本文用python代码实现了利用梯度下降法训练线性回归模型</p>
<span id="more"></span>
<p>该实验的Github链接：<a href="https://github.com/dingdingqiuqiu/ML">dingdingqiuqiu/ML</a></p>
<blockquote>
<p>文中重敲的代码可能有问题，但github上的一定都是可运行的</p>
<h3 id="理论依据"><a href="#理论依据" class="headerlink" title="理论依据"></a>理论依据</h3><p>我们假设有n个未确定的系数，有m个数据来帮助我们训练。</p>
</blockquote>
<p>在机器学习中，梯度下降的基本公式（以最小化损失函数为例）的 LaTeX 表达式为：</p>
<script type="math/tex; mode=display">
\theta_{i} =
\theta_{i} - \alpha \frac{ \partial} { \partial \theta_{i} } J( \theta )</script><p>其中，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="1.908ex" height="2.261ex" role="img" focusable="false" viewBox="0 -705 843.3 999.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(502,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container>表示模型参数，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container>是学习率，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.253ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1880 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>是损失函数。<br>假设我们要确定以下不含偏置项的多元线性方程：</p>
<script type="math/tex; mode=display">
Y(x_{i}) = \theta_{1}x_{1}+\theta_{2}x_{2}+\theta_{3}x_{3}+ ... +\theta_{n}x_{n}</script><p>对于含有偏置项b的多元线性方程，我们令第n+1项x恒为为1即可。</p>
<p>在线性回归方程的确定中，我们以均方误差作为损失函数，其表达式为:</p>
<script type="math/tex; mode=display">
E(x_{i}) = \frac{\sum_{i = 1}^{m}(\hat{y}-y_{i})^2}{m}</script><p>对于任意一个参数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container>求偏微分，得到：</p>
<script type="math/tex; mode=display">
\frac{\partial}{\partial\theta_{i}}J(\theta) = \frac{2}{m} \sum_{i = 1}^{m}x_{i}(\hat{y}-y_{i})</script><p>用矩阵表示为</p>
<script type="math/tex; mode=display">
\frac{\partial}{\partial\theta}J(\theta) =  \frac{2}{m}(X^{T}(\hat{Y} - Y))</script><p>或</p>
<script type="math/tex; mode=display">
\frac{\partial}{\partial\theta}J(\theta) =  \frac{2}{m}(X^{T}(\theta X - Y))</script><h3 id="必备库导入"><a href="#必备库导入" class="headerlink" title="必备库导入"></a>必备库导入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pylot as plt</span><br></pre></td></tr></table></figure>
<p>主要引入两个缩写，一个<code>np</code>,对应<code>numpy</code>科学计算库;一个<code>plt</code>对应<code>matplotlib</code>绘图库中的<code>pylot</code>模块。</p>
<p>同时用下面两行代码解决了<code>plt</code>模块中的中文绘图显示异常的问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置全局字体</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line"><span class="comment"># 解决Matplotlib在使用中文字体时，负号显示为方块的问题</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p><code>pylot</code>模块中的<code>rcParams</code>是一个全局配置对象，实际上是一个字典对象，通过修改键值对的值。可以全局改变<code>matplotlib</code>绘图库的行为</p>
<blockquote>
<p>在linux环境下设置字体略有问题，解决方法在下面这篇blog中：<a href="https://dingdingqiuqiu.github.io/2024/09/15/linux%E7%8E%AF%E5%A2%83%E4%B8%ADmatplotlib%E7%94%BB%E5%9B%BE%E7%BC%BA%E5%B0%91%E5%AD%97%E4%BD%93/#more">linux中Matplotlib画图缺少字体</a></p>
</blockquote>
<h3 id="读取数据文件"><a href="#读取数据文件" class="headerlink" title="读取数据文件"></a>读取数据文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data = np.loadtxt('data1.txt', delimiter=',')</span><br><span class="line">X = data[:, 0].reshape(-1, 1)</span><br><span class="line">Y = data[:, 1].reshape(-1, 1)</span><br></pre></td></tr></table></figure>
<p><code>data1.txt</code>中数据如下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6.1101,17.592</span><br><span class="line">5.5277,9.1302</span><br><span class="line">8.5186,13.662</span><br><span class="line">7.0032,11.854</span><br><span class="line">5.8598,6.8233</span><br><span class="line">8.3829,11.886</span><br><span class="line">7.4764,4.3483</span><br><span class="line">8.5781,12</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>调用<code>numpy</code>库中的<code>loadtxt</code>函数将数据读取为n行2列的二维矩阵。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[ 6.1101  17.592  ]</span><br><span class="line"> [ 5.5277   9.1302 ]</span><br><span class="line"> [ 8.5186  13.662  ]</span><br><span class="line"> [ 7.0032  11.854  ]</span><br><span class="line"> [ 5.8598   6.8233 ]</span><br><span class="line"> [ 8.3829  11.886  ]</span><br><span class="line"> [ 7.4764   4.3483 ]</span><br><span class="line"> [ 8.5781  12.     ]</span><br><span class="line">    ...            ]</span><br></pre></td></tr></table></figure><br>我们利用<code>data[:,0]</code>提取第一列中的所有行，并利用reshape方法重塑矩阵为n行1列的二维矩阵。<br><code>data[:,1]</code>同理提取第二列数据并重塑为n行1列的二维矩阵。第一列部分数据如下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[ 6.1101]</span><br><span class="line"> [ 5.5277]</span><br><span class="line"> [ 8.5186]</span><br><span class="line"> [ 7.0032]</span><br><span class="line"> [ 5.8598]</span><br><span class="line"> [ 8.3829]</span><br><span class="line">   ...   ]</span><br></pre></td></tr></table></figure><br>我们添加偏置项b对应的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="5.51ex" height="2.016ex" role="img" focusable="false" viewBox="0 -683 2435.5 891"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1656,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container>恒为1。并将其与<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>矩阵合并得到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.747ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1214.3 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></g></svg></mjx-container>矩阵。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X_b = np.c_[np.ones((X.shape[0], 1)), X]</span><br></pre></td></tr></table></figure></p>
<h3 id="初始状态设置"><a href="#初始状态设置" class="headerlink" title="初始状态设置"></a>初始状态设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 超参数</span><br><span class="line">learning_rate = 0.01</span><br><span class="line">n_iterations = 1000</span><br><span class="line">m = X.shape[0]</span><br><span class="line"></span><br><span class="line"># 初始化 theta</span><br><span class="line">theta = np.random.randn(2, 1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>由于我们要求得两个参数的值，这里我们初始化<code>theta</code>为2行1列的二维矩阵。</p>
<h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 梯度下降</span></span><br><span class="line"><span class="keyword">for</span> iteration <span class="keyword">in</span> <span class="built_in">range</span>(n_iterations):</span><br><span class="line">    gradients = <span class="number">2</span>/m * X_b.T.dot(X_b.dot(theta) - Y)</span><br><span class="line">    theta = theta - learning_rate * gradients</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"训练得到的参数: <span class="subst">{theta}</span>"</span>)</span><br></pre></td></tr></table></figure>
<p>由前面推导得到的矩阵形式公式，我们进行有限次数的迭代后输出结果即可。</p>
<h3 id="结果预测"><a href="#结果预测" class="headerlink" title="结果预测"></a>结果预测</h3>]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ML-lab3对数几率回归</title>
    <url>/2024/09/17/ML-lab3%E5%AF%B9%E6%95%B0%E5%87%A0%E7%8E%87%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<p>本文用python代码实现了利用梯度下降法训练线性回归模型</p>
<span id="more"></span>
<p>该实验的Github链接：<a href="https://github.com/dingdingqiuqiu/ML">dingdingqiuqiu/ML</a></p>
<blockquote>
<p>文中重敲的代码可能有问题，但github上的一定都是可运行的</p>
</blockquote>
<h3 id="必备库导入"><a href="#必备库导入" class="headerlink" title="必备库导入"></a>必备库导入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br></pre></td></tr></table></figure>
<p><code>np</code>库进行矩阵运算，<code>plt</code>模块进行2D绘图，<code>mpl</code>库用于更复杂3D图像的绘制。而<code>accuracy_score</code>函数则是<code>sklearn</code>包里的<code>metrics</code>模块中的用于评估机器学习中模型性能指标的函数。</p>
<h3 id="读取数据文件并绘图"><a href="#读取数据文件并绘图" class="headerlink" title="读取数据文件并绘图"></a>读取数据文件并绘图</h3><p>我们从代码入手，探讨项目文件的读取逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loaddata</span>():</span><br><span class="line">    <span class="comment"># 从文本文件中加载数据</span></span><br><span class="line">    data = np.loadtxt(<span class="string">'data1.txt'</span>, delimiter=<span class="string">','</span>)</span><br><span class="line">    n = data.shape[<span class="number">1</span>] - <span class="number">1</span>  <span class="comment"># 特征数</span></span><br><span class="line">    X = data[:, <span class="number">0</span>:n]  <span class="comment"># 特征矩阵</span></span><br><span class="line">    y = data[:, -<span class="number">1</span>].reshape(-<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 标签向量</span></span><br><span class="line">    <span class="keyword">return</span> X, y</span><br></pre></td></tr></table></figure>
<p>代码第一行加载数据，将除了最后一列的数据作为X矩阵，即特征矩阵，将最后一列数据作为标签向量，并重塑为二维矩阵，方便运算。</p>
<p>我们来尝试数据图的绘制部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot</span>(<span class="params">X, y</span>):</span><br><span class="line">    <span class="comment"># 绘制数据点</span></span><br><span class="line">    pos = np.where(y == <span class="number">1</span>)  <span class="comment"># 正样本索引</span></span><br><span class="line">    neg = np.where(y == <span class="number">0</span>)  <span class="comment"># 负样本索引</span></span><br><span class="line">    plt.scatter(X[pos[<span class="number">0</span>], <span class="number">0</span>], X[pos[<span class="number">0</span>], <span class="number">1</span>], marker=<span class="string">'x'</span>, label=<span class="string">'Positive'</span>)</span><br><span class="line">    plt.scatter(X[neg[<span class="number">0</span>], <span class="number">0</span>], X[neg[<span class="number">0</span>], <span class="number">1</span>], marker=<span class="string">'o'</span>, label=<span class="string">'Negative'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Exam 1 score'</span>)  <span class="comment"># x轴标签</span></span><br><span class="line">    plt.ylabel(<span class="string">'Exam 2 score'</span>)  <span class="comment"># y轴标签</span></span><br><span class="line">    plt.legend()  <span class="comment"># 显示图例</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line">    plt.savefig(<span class="string">'dataAndLine.png'</span>)</span><br><span class="line">    plt.close()</span><br></pre></td></tr></table></figure>
<p>先保存正负样本点的索引，然后在以特征矩阵X中的正负样本的第一列特征和第二列特征为x和y将点绘制为’x’和’o’设置对应标签，添加x轴的标签和y轴的标签并显示前面正负标签的图例。</p>
<h3 id="初始状态设置"><a href="#初始状态设置" class="headerlink" title="初始状态设置"></a>初始状态设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X, y = loaddata()  <span class="comment"># 再次加载数据</span></span><br><span class="line">n = X.shape[<span class="number">1</span>]  <span class="comment"># 特征数</span></span><br><span class="line">theta = np.zeros(n + <span class="number">1</span>).reshape(n + <span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 初始化参数theta</span></span><br><span class="line">iterations = <span class="number">250000</span>  <span class="comment"># 迭代次数</span></span><br><span class="line">alpha = <span class="number">0.008</span>  <span class="comment"># 学习率</span></span><br></pre></td></tr></table></figure>
<p>进行了各个参数的初始化，主要包括theta和iterations以及alpha。</p>
<h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta = gradientDescent(X, y, theta, iterations, alpha)  <span class="comment"># 执行梯度下降</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'theta=n'</span>, theta)  <span class="comment"># 输出theta</span></span><br></pre></td></tr></table></figure>
<p>调用了gradientDescent函数，我们来看函数的定义过程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gradientDescent</span>(<span class="params">X, y, theta, iterations, alpha</span>):</span><br><span class="line">    m = X.shape[<span class="number">0</span>]  <span class="comment"># 样本数</span></span><br><span class="line">    X = np.hstack((np.ones((m, <span class="number">1</span>)), X))  <span class="comment"># 在X前加一列1（偏置项）</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iterations):</span><br><span class="line">        <span class="comment"># 计算梯度并更新参数</span></span><br><span class="line">        theta_temp = theta - (alpha / m) * np.dot(X.T, (hypothesis(X, theta) - y))  <span class="comment"># 梯度下降更新</span></span><br><span class="line">        theta = theta_temp  <span class="comment"># 更新theta</span></span><br><span class="line">        <span class="comment"># 每10000次迭代输出一次损失值</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">10000</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'第'</span>, i, <span class="string">'次迭代，当前损失为：'</span>, computeCost(X, y, theta), <span class="string">'theta='</span>, theta)</span><br><span class="line">    <span class="keyword">return</span> theta</span><br></pre></td></tr></table></figure>
<p>首先先给特征矩阵前添加了一列1,这是为了方便偏置项b的计算。然后，进行参数迭代更新，在每次更新时，计算梯度，并更新参数。同时每10000次输出一次损失值。下面我们深度分析梯度更新时的参数计算过程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta_temp = theta - (alpha / m) * np.dot(X.T, (hypothesis(X, theta) - y))  <span class="comment"># 梯度下降更新</span></span><br><span class="line">theta = theta_temp  <span class="comment"># 更新theta</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="comment"># 计算Sigmoid函数</span></span><br><span class="line">    r = <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z))  <span class="comment"># Sigmoid公式</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hypothesis</span>(<span class="params">X, theta</span>):</span><br><span class="line">    <span class="comment"># 计算假设函数值</span></span><br><span class="line">    z = np.dot(X, theta)  <span class="comment"># 线性组合</span></span><br><span class="line">    <span class="keyword">return</span> sigmoid(z)  <span class="comment"># 返回Sigmoid值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>此处计算时，主要计算思路与线性方程的梯度下降计算过程基本一致，不过在进行假设函数值的计算时，我们引入了<code>sigmoid</code>函数,主要是将函数的输出映射到[0,1]之间，用来表示某样本是否属于正类的概率,同时可以利用非线性映射拟合更复杂的决策边界。由于引入了<code>sigmoid</code>函数，在计算损失函数时，计算过程也略有改变，如下:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">computeCost</span>(<span class="params">X, y, theta</span>):</span><br><span class="line">    m = X.shape[<span class="number">0</span>]  <span class="comment"># 样本数</span></span><br><span class="line">    z = hypothesis(X, theta)  <span class="comment"># 计算假设值  </span></span><br><span class="line">    <span class="comment"># 限制 z 的范围以避免取对数时出现问题</span></span><br><span class="line">    epsilon = <span class="number">1e-15</span></span><br><span class="line">    z = np.clip(z, epsilon, <span class="number">1</span> - epsilon) </span><br><span class="line">    <span class="comment"># 计算代价函数</span></span><br><span class="line">    cost = -np.<span class="built_in">sum</span>(y * np.log(z) + (<span class="number">1</span> - y) * np.log(<span class="number">1</span> - z)) / m  <span class="comment"># 代价公式</span></span><br><span class="line">    <span class="keyword">return</span> cost</span><br></pre></td></tr></table></figure></p>
<p>我们利用交叉熵损失来描述损失，这里主要是交叉熵损失的计算公式。</p>
<h3 id="决策边界的绘制"><a href="#决策边界的绘制" class="headerlink" title="决策边界的绘制"></a>决策边界的绘制</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plotDescisionBoundary</span>(<span class="params">X, y, theta</span>):</span><br><span class="line">    cm_dark = mpl.colors.ListedColormap([<span class="string">'g'</span>, <span class="string">'r'</span>])  <span class="comment"># 定义颜色</span></span><br><span class="line">    plt.xlabel(<span class="string">'Exam 1 score'</span>)  <span class="comment"># x轴标签</span></span><br><span class="line">    plt.ylabel(<span class="string">'Exam 2 score'</span>)  <span class="comment"># y轴标签</span></span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=np.array(y).squeeze(), cmap=cm_dark, s=<span class="number">30</span>)  <span class="comment"># 绘制散点图</span></span><br><span class="line">    <span class="comment"># 计算并绘制决策边界</span></span><br><span class="line">    x1 = np.array([np.<span class="built_in">min</span>(X[:, <span class="number">0</span>]), np.<span class="built_in">max</span>(X[:, <span class="number">0</span>])])  <span class="comment"># x轴范围</span></span><br><span class="line">    x2 = -(theta[<span class="number">0</span>] + theta[<span class="number">1</span>] * x1) / theta[<span class="number">2</span>]  <span class="comment"># 决策边界方程</span></span><br><span class="line">    plt.plot(x1, x2, label=<span class="string">'Decision Boundary'</span>, color=<span class="string">'blue'</span>)  <span class="comment"># 绘制边界线</span></span><br><span class="line">    plt.legend()  <span class="comment"># 显示图例</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line">    plt.savefig(<span class="string">'side.png'</span>)</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line">plotDescisionBoundary(X, y, theta)  <span class="comment"># 绘制决策边界</span></span><br></pre></td></tr></table></figure>
<p>这段代码通过逻辑回归模型的参数 <code>theta</code>，在二维特征空间中绘制样本的散点图并显示决策边界。首先，样本点根据不同类别（<code>y</code>）使用绿色和红色区分，并标注坐标轴。然后，通过决策边界方程 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="24.516ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 10836.2 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(937,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1403,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="msub" transform="translate(1764,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(2951.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(3952,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(4857.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(6088.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(7088.5,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="msub" transform="translate(7994.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(9280.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(10336.2,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>，计算并绘制一条蓝色直线，作为模型的分类边界，将特征空间划分为两个区域。图例显示决策边界，并将结果保存为图片，展示模型的分类效果和决策规则。</p>
<h3 id="预测函数"><a href="#预测函数" class="headerlink" title="预测函数"></a>预测函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">X</span>):</span><br><span class="line">    <span class="comment"># 预测函数</span></span><br><span class="line">    c = np.ones(X.shape[<span class="number">0</span>]).transpose()  <span class="comment"># 创建一列全1</span></span><br><span class="line">    X = np.insert(X, <span class="number">0</span>, values=c, axis=<span class="number">1</span>)  <span class="comment"># 在X前插入全1列</span></span><br><span class="line">    h = hypothesis(X, theta)  <span class="comment"># 计算假设值</span></span><br><span class="line">    <span class="comment"># 根据概率值决定最终的分类</span></span><br><span class="line">    h[h &gt;= <span class="number">0.5</span>] = <span class="number">1</span>  <span class="comment"># 大于等于0.5为1类</span></span><br><span class="line">    h[h &lt; <span class="number">0.5</span>] = <span class="number">0</span>   <span class="comment"># 小于0.5为0类</span></span><br><span class="line">    <span class="keyword">return</span> h</span><br></pre></td></tr></table></figure>
<p>根据训练得到的theta参数，我们可以通过对输入的数据添加全1列来完成对新样本的预测。</p>
<h3 id="理论支撑"><a href="#理论支撑" class="headerlink" title="理论支撑"></a>理论支撑</h3><p>在逻辑回归的梯度下降算法中，参数更新的核心是通过最小化损失函数来调整模型参数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.618ex" role="img" focusable="false" viewBox="0 -705 469 715"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container>。损失函数使用了对数似然代价函数（log-likelihood cost function），然后通过梯度下降法进行参数优化。以下是详细的推导过程以及代码解释：</p>
<hr>
<h3 id="1-假设函数"><a href="#1-假设函数" class="headerlink" title="1. 假设函数"></a>1. 假设函数</h3><p>在逻辑回归中，模型的假设函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.296ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2340.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(990.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1379.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1951.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 是通过 <strong>Sigmoid</strong> 函数映射的线性回归模型：</p>
<script type="math/tex; mode=display">
h_\theta(x) = \text{sigmoid}(z) = \frac{1}{1 + e^{-z}}</script><p>其中，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.052ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 465 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g></svg></mjx-container> 是输入特征 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 和参数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.618ex" role="img" focusable="false" viewBox="0 -705 469 715"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container> 的线性组合，即：</p>
<script type="math/tex; mode=display">
z = X\theta = \theta^T X</script><h4 id="对应的代码解释："><a href="#对应的代码解释：" class="headerlink" title="对应的代码解释："></a>对应的代码解释：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hypothesis</span>(<span class="params">X, theta</span>):</span><br><span class="line">    z = np.dot(X, theta)  <span class="comment"># 计算线性组合 X * theta</span></span><br><span class="line">    <span class="keyword">return</span> sigmoid(z)     <span class="comment"># 通过 Sigmoid 函数映射输出</span></span><br></pre></td></tr></table></figure>
<p>此函数通过特征矩阵 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 和参数向量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.618ex" role="img" focusable="false" viewBox="0 -705 469 715"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container> 计算线性组合 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.052ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 465 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g></svg></mjx-container>，再通过 Sigmoid 函数将结果映射为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.029ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2222.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1333.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1833.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 之间的概率值。</p>
<hr>
<h3 id="2-代价函数（Cost-Function）"><a href="#2-代价函数（Cost-Function）" class="headerlink" title="2. 代价函数（Cost Function）"></a>2. 代价函数（Cost Function）</h3><p>逻辑回归的目标是最小化代价函数，其形式为：</p>
<script type="math/tex; mode=display">
J(\theta) = -\frac{1}{m} \sum_{i=1}^{m} \left[ y^{(i)} \log(h_\theta(x^{(i)})) + (1 - y^{(i)}) \log(1 - h_\theta(x^{(i)})) \right]</script><p>其中：</p>
<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 是样本数量</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.28ex" height="2.587ex" role="img" focusable="false" viewBox="0 -893.3 3217.7 1143.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(990.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1379.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2828.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 是第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个样本的预测值</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="3.093ex" height="2.485ex" role="img" focusable="false" viewBox="0 -893.3 1367.1 1098.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container> 是第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 个样本的实际标签</li>
</ul>
<p>代价函数用于衡量预测值 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.296ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2340.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(990.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1379.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1951.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 与真实标签 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 之间的差距，通过最小化代价函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.253ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1880 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，可以优化模型的参数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.618ex" role="img" focusable="false" viewBox="0 -705 469 715"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container>。</p>
<h4 id="对应的代码解释：-1"><a href="#对应的代码解释：-1" class="headerlink" title="对应的代码解释："></a>对应的代码解释：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">computeCost</span>(<span class="params">X, y, theta</span>):</span><br><span class="line">    m = X.shape[<span class="number">0</span>]  <span class="comment"># 样本数</span></span><br><span class="line">    z = hypothesis(X, theta)  <span class="comment"># 计算假设值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为避免 log(0) 导致的无穷大错误，加入 epsilon</span></span><br><span class="line">    epsilon = <span class="number">1e-15</span></span><br><span class="line">    z = np.clip(z, epsilon, <span class="number">1</span> - epsilon)  <span class="comment"># 限制 z 的范围，避免 z = 0 或 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算代价函数</span></span><br><span class="line">    cost = -np.<span class="built_in">sum</span>(y * np.log(z) + (<span class="number">1</span> - y) * np.log(<span class="number">1</span> - z)) / m</span><br><span class="line">    <span class="keyword">return</span> cost</span><br></pre></td></tr></table></figure>
<p>在这里，通过 <code>np.clip(z, epsilon, 1 - epsilon)</code> 防止 <code>z</code> 取 0 或 1，从而避免对数函数取值为负无穷大的错误。<code>computeCost</code> 函数根据给定的参数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.618ex" role="img" focusable="false" viewBox="0 -705 469 715"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container> 和数据 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>，计算代价函数值 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.253ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1880 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p>
<hr>
<h3 id="3-梯度下降更新规则"><a href="#3-梯度下降更新规则" class="headerlink" title="3. 梯度下降更新规则"></a>3. 梯度下降更新规则</h3><p>为了最小化代价函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.253ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1880 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，使用 <strong>梯度下降算法</strong>。梯度下降的更新规则为：</p>
<script type="math/tex; mode=display">
\theta := \theta - \alpha \frac{\partial J(\theta)}{\partial \theta}</script><p>其中，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container> 是学习率，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.817ex;" xmlns="http://www.w3.org/2000/svg" width="4.909ex" height="3.186ex" role="img" focusable="false" viewBox="0 -1047.1 2169.6 1408.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(1199,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1588,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(2057,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(718.9,-345.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><rect width="1929.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container> 是代价函数关于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.618ex" role="img" focusable="false" viewBox="0 -705 469 715"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container> 的梯度。接下来推导梯度。</p>
<hr>
<h3 id="4-梯度的计算"><a href="#4-梯度的计算" class="headerlink" title="4. 梯度的计算"></a>4. 梯度的计算</h3><p>代价函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.253ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1880 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 关于参数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="1.908ex" height="2.261ex" role="img" focusable="false" viewBox="0 -705 843.3 999.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container> 的偏导数为：</p>
<script type="math/tex; mode=display">
\frac{\partial J(\theta)}{\partial \theta_j} = \frac{1}{m} \sum_{i=1}^{m} \left( h_\theta(x^{(i)}) - y^{(i)} \right) x_j^{(i)}</script><p>推导步骤：</p>
<ul>
<li>代价函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.253ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1880 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 包含 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.296ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2340.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(990.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1379.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1951.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.296ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2340.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(990.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1379.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1951.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 是 Sigmoid 函数。对 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.296ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2340.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(990.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1379.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1951.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 求导数时，使用链式法则：</li>
</ul>
<script type="math/tex; mode=display">
\frac{\partial h_\theta(x)}{\partial \theta} = h_\theta(x)(1 - h_\theta(x)) \cdot x</script><ul>
<li>代价函数关于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="1.908ex" height="2.261ex" role="img" focusable="false" viewBox="0 -705 843.3 999.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container> 的偏导数最终简化为：</li>
</ul>
<script type="math/tex; mode=display">
\frac{\partial J(\theta)}{\partial \theta_j} = \frac{1}{m} \sum_{i=1}^{m} \left( h_\theta(x^{(i)}) - y^{(i)} \right) x_j^{(i)}</script><p>这表示模型预测值与真实值之间的误差，用以调整参数。</p>
<hr>
<h3 id="5-梯度下降的参数更新公式"><a href="#5-梯度下降的参数更新公式" class="headerlink" title="5. 梯度下降的参数更新公式"></a>5. 梯度下降的参数更新公式</h3><p>最终，梯度下降更新参数的公式为：</p>
<script type="math/tex; mode=display">
\theta_j := \theta_j - \alpha \frac{1}{m} \sum_{i=1}^{m} \left( h_\theta(x^{(i)}) - y^{(i)} \right) x_j^{(i)}</script><p>向量化表示形式：</p>
<script type="math/tex; mode=display">
\theta := \theta - \frac{\alpha}{m} X^T \left( h_\theta(X) - y \right)</script><hr>
<h3 id="6-完整的梯度下降步骤"><a href="#6-完整的梯度下降步骤" class="headerlink" title="6. 完整的梯度下降步骤"></a>6. 完整的梯度下降步骤</h3><ol>
<li>计算假设函数：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="20.616ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9112.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(990.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1379.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1951.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2618.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mtext" transform="translate(3674.2,0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(672,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1172,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(2005,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(2505,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(2783,0)"></path></g><g data-mml-node="mo" transform="translate(7013.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7402.2,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(8254.2,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(8723.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li>
<li>计算代价函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.253ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1880 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li>
<li>计算梯度：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.253ex;" xmlns="http://www.w3.org/2000/svg" width="4.909ex" height="3.622ex" role="img" focusable="false" viewBox="0 -1047.1 2169.6 1600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(1199,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1588,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(2057,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(586.5,-345.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msub" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><rect width="1929.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></li>
<li>更新参数：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="26.232ex" height="2.702ex" role="img" focusable="false" viewBox="0 -841.7 11594.6 1194.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(746.8,0)"><g data-mml-node="text"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mi" transform="translate(2080.6,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(2771.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(3772,0)"><g data-mml-node="mi" transform="translate(304.1,394) scale(0.707)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="820.8" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(4832.8,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(936.2,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mrow" transform="translate(6483.5,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(1379.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1768.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(2620.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3231.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4232.1,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4722.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg></mjx-container></li>
</ol>
<p>通过迭代上述过程，参数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.618ex" role="img" focusable="false" viewBox="0 -705 469 715"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container> 会逐步调整，从而优化模型的性能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta_temp = theta - (alpha / m) * np.dot(X.T, (hypothesis(X, theta) - y))  <span class="comment"># 梯度下降更新</span></span><br><span class="line">theta = theta_temp  <span class="comment"># 更新theta</span></span><br></pre></td></tr></table></figure>
<p>这段代码实现了向量化形式的参数更新公式：</p>
<ul>
<li><code>theta_temp</code> 计算预测值 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.929ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2620.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(990.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1379.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(2231.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</li>
<li><code>np.dot(X.T, (hypothesis(X, theta) - y))</code> 计算梯度。</li>
<li><code>alpha / m</code> 表示学习率 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container> 和样本数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>。</li>
</ul>
<p>通过这一步，更新后的参数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.618ex" role="img" focusable="false" viewBox="0 -705 469 715"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container> 会用于下一次迭代。</p>
<hr>
<h3 id="7-绘制决策边界"><a href="#7-绘制决策边界" class="headerlink" title="7. 绘制决策边界"></a>7. 绘制决策边界</h3><p>在训练逻辑回归模型后，通常需要绘制决策边界，以展示模型如何将特征空间划分为不同类别。假设逻辑回归模型的决策边界是线性分割，公式为：</p>
<script type="math/tex; mode=display">
\theta_0 + \theta_1 x_1 + \theta_2 x_2 = 0</script><p>通过解这个方程，我们可以得到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 1008.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container> 关于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 1008.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> 的关系：</p>
<script type="math/tex; mode=display">
x_2 = -\frac{\theta_0 + \theta_1 x_1}{\theta_2}</script><p>对应以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x2 = -(theta[<span class="number">0</span>] + theta[<span class="number">1</span>] * x1) / theta[<span class="number">2</span>]  <span class="comment"># 决策边界方程</span></span><br></pre></td></tr></table></figure>
<p>此代码通过计算 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 1008.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container> 的值，绘制逻辑回归模型的决策边界，并与样本散点图进行可视化对比。</p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL开发技巧-视图</title>
    <url>/2024/10/29/MySQL%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7-%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<p>本文基于头歌平台-MySQL开发技巧-视图学习相关知识，并做记录。</p>
<span id="more"></span>
<h3 id="第1关：视图"><a href="#第1关：视图" class="headerlink" title="第1关：视图"></a>第1关：视图</h3><h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] [ALGORITHM <span class="operator">=</span> {UNDEFINED <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE}] <span class="keyword">VIEW</span> view_name [(column_list)] <span class="keyword">AS</span> select_statement [<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><p>OR REPLACE：表示替换已有视图；</p>
</li>
<li><p>ALGORITHM：表示视图选择算法，默认算法是UNDEFINED(未定义的)： MySQL 自动选择要使用的算法 ；merge合并；temptable临时表；</p>
</li>
<li><p>column_list：可选参数，指定视图中各个属性的名词，默认情况下与select语句中查询的属性相同；</p>
</li>
<li><p>select_statement：表示select语句；</p>
</li>
<li><p>[WITH [CASCADED | LOCAL] CHECK OPTION]：表示视图在更新时保证在视图的权限范围之内；cascade是默认值，表示更新视图的时候，要满足视图和表的相关条件；local表示更新视图的时候，要满足该视图定义的一个条件即可。</p>
</li>
</ul>
<h4 id="创建视图示例"><a href="#创建视图示例" class="headerlink" title="创建视图示例"></a>创建视图示例</h4><p>示例一：</p>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VZMkVKQWM1RjhSUHFHblJ4dmlydjk4QmFDTkNfUHhhWXRrT1hIazB0UktWQ0E_ZT1wVVZkM3k.jpg" alt="image-20241029172650778"></p>
<p>示例二：</p>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VlWmpvc0hkMk9KT2g1OTVjVmRZendnQllrRHpnNHFqSnZTbi1tTEF6WFJrX1E_ZT1OUXUyMU4.jpg" alt="image-20241029173015508"></p>
<p>以上两个示例可以看出，虽然两个视图的字段名不同，但是，数据是相同的，因为两个视图引用的是同一个表中的数据，并且，as后的创建视图的语句也相同。</p>
<p>在实际开发中，用户可以根据自己的需求，通过视图的方式，获取基本表中自己需要的数据，这样既能满足用户的需求，也不会破坏基本表原来的结构，从而保证了基本表中数据的安全性。</p>
<h4 id="操作视图"><a href="#操作视图" class="headerlink" title="操作视图"></a>操作视图</h4><p>视图是逻辑表，也就是说视图不是真实的表，但操作视图和操作普通表的语法是一样的。</p>
<p>用户可以在视图中无条件地使用<code>select</code>语句查询数据。但使用<code>inser</code>、<code>update</code>和<code>delete</code>操作需要在创建视图时满足以下条件（满足以下条件的视图称为<strong>可更新视图</strong>）：</p>
<ul>
<li><p>from子句中只能引用有1个表（真实表或可更新视图）；</p>
</li>
<li><p>不能包含 with、distinct、group by、having、limit等子句；</p>
</li>
<li><p>不能使用复合查询，即不能使用union、intersect、except等集合操作；</p>
</li>
<li><p>select子句的字段列表不能包含聚合、窗口函数、集合返回函数。</p>
</li>
</ul>
<p>我们仍使用之前示例中的数据来操作视图：</p>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VTWWEzSVMtWUN4UGlmYUoxTGJvZURjQjA3ZjBneEpsVmhucFBreWxmVjlYRHc_ZT1BTEFsY0g.jpg" alt="image-20241029174447708"></p>
<blockquote>
<p>注意这里因为使用了limit子句，因此创建的视图是不可更新的，我们修改会失败。</p>
</blockquote>
<h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><p>若视图不再被需要，我们可以将其删除，且视图的删除并不影响源表中的数据。</p>
<p>删除视图的 SQL 如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name;</span><br></pre></td></tr></table></figure>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VVZlk1bkpxc05aS3RFby03VkQzZ0hBQlZ1aGtKbnBsTkwwSEZvT0J4YmtWbVE_ZT1MenBaS0Y.jpg" alt="image-20241029174644473"></p>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VYWWZOclppS1Q1SHJ2WmIyOVFXTWlvQkhUTkstcGhQSkdXMWU2dFhWT29weEE_ZT1oTVExNGQ.jpg" alt="image-20241029174720465"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use School;</span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span>创建单表视图</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> stu_view <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    math, </span><br><span class="line">    chinese, </span><br><span class="line">    (math <span class="operator">+</span> chinese) <span class="keyword">AS</span> "math+chinese" </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>创建多表视图</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> stu_classes <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    student.stu_id, </span><br><span class="line">    student.name, </span><br><span class="line">    stu_info.classes</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    student </span><br><span class="line"><span class="keyword">JOIN</span> </span><br><span class="line">    stu_info </span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">    student.stu_id <span class="operator">=</span> stu_info.stu_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意创建单表视图时，定义一个<code>math+chese</code>之和字段的语句为<code>(math+chese) as "math+chinese"</code>注意这里的别名<strong>需要用引号括起来</strong>，不然包报错的。</p>
<p>行之和直接加，列之和<code>SUM</code>函数。 </p>
<p>创建多表视图时，连接操作是<code>JOIN 表名 ON 连接条件</code></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL数据库-使用聚合函数查询</title>
    <url>/2024/10/29/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>本文主要基于MySQL数据库头歌作业讲解使用聚合函数查询。</p>
<span id="more"></span>
<h3 id="第1关：COUNT-函数"><a href="#第1关：COUNT-函数" class="headerlink" title="第1关：COUNT( )函数"></a>第1关：COUNT( )函数</h3><h4 id="COUNT函数用法"><a href="#COUNT函数用法" class="headerlink" title="COUNT函数用法"></a>COUNT函数用法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span><span class="operator">/</span>字段名) <span class="keyword">from</span> 数据表;</span><br></pre></td></tr></table></figure>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE School;</span><br><span class="line"></span><br><span class="line">#请在此处添加实现代码</span><br><span class="line">########## <span class="keyword">Begin</span> ##########</span><br><span class="line"></span><br><span class="line">########## 查询该表中一共有多少条数据 ##########</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> tb_class;</span><br><span class="line"></span><br><span class="line">########## 查询此表中<span class="number">367</span>班有多少位学生 ##########</span><br><span class="line"><span class="keyword">SELECT</span> classid,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> tb_class <span class="keyword">WHERE</span> classid<span class="operator">=</span><span class="number">367</span>;</span><br><span class="line"></span><br><span class="line">########## <span class="keyword">End</span> ##########</span><br></pre></td></tr></table></figure>
<h3 id="第2关：SUM-函数"><a href="#第2关：SUM-函数" class="headerlink" title="第2关：SUM( )函数"></a>第2关：SUM( )函数</h3><h4 id="SUM-函数基本使用"><a href="#SUM-函数基本使用" class="headerlink" title="SUM()函数基本使用"></a>SUM()函数基本使用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(字段名) <span class="keyword">from</span> 数据表;</span><br></pre></td></tr></table></figure>
<h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE School;</span><br><span class="line"></span><br><span class="line">########## 查询所有学生总分数 ##########</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(score) <span class="keyword">FROM</span> tb_class;</span><br><span class="line"></span><br><span class="line">########## 查询学生语文科目的总分数 ##########</span><br><span class="line"><span class="keyword">SELECT</span> course,<span class="built_in">sum</span>(score) <span class="keyword">FROM</span> tb_class <span class="keyword">WHERE</span> course<span class="operator">=</span><span class="string">'语文'</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="第三关：AVG-函数"><a href="#第三关：AVG-函数" class="headerlink" title="第三关：AVG()函数"></a>第三关：AVG()函数</h3><h4 id="AVG-函数基本使用"><a href="#AVG-函数基本使用" class="headerlink" title="AVG()函数基本使用"></a>AVG()函数基本使用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(字段名) <span class="keyword">from</span> 数据表;</span><br></pre></td></tr></table></figure>
<h4 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE School;</span><br><span class="line"></span><br><span class="line">########## 查询学生语文科目的平均分数 ##########</span><br><span class="line"><span class="keyword">SELECT</span> course,<span class="built_in">avg</span>(score) <span class="keyword">FROM</span> tb_class <span class="keyword">WHERE</span> course<span class="operator">=</span><span class="string">'语文'</span>;</span><br><span class="line"></span><br><span class="line">########## 查询学生英语科目的平均分数 ##########</span><br><span class="line"><span class="keyword">SELECT</span> course,<span class="built_in">avg</span>(score) <span class="keyword">FROM</span> tb_class <span class="keyword">WHERE</span> course<span class="operator">=</span><span class="string">'英语'</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="第4关：MAX-函数"><a href="#第4关：MAX-函数" class="headerlink" title="第4关：MAX( )函数"></a>第4关：MAX( )函数</h3><h4 id="MAX-函数基本使用"><a href="#MAX-函数基本使用" class="headerlink" title="MAX()函数基本使用"></a>MAX()函数基本使用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(字段名) <span class="keyword">from</span> 数据表;</span><br></pre></td></tr></table></figure>
<h4 id="应用-3"><a href="#应用-3" class="headerlink" title="应用"></a>应用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE School;</span><br><span class="line"></span><br><span class="line">########## 查询语文课程中的最高分数 ##########</span><br><span class="line"><span class="keyword">SELECT</span> course,<span class="built_in">max</span>(score) <span class="keyword">FROM</span> tb_class <span class="keyword">WHERE</span> course<span class="operator">=</span><span class="string">'语文'</span>;</span><br><span class="line"></span><br><span class="line">########## 查询英语课程中的最高分数 ##########</span><br><span class="line"><span class="keyword">SELECT</span> course,<span class="built_in">max</span>(score) <span class="keyword">FROM</span> tb_class <span class="keyword">WHERE</span> course<span class="operator">=</span><span class="string">'英语'</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="第5关：MIN-函数"><a href="#第5关：MIN-函数" class="headerlink" title="第5关：MIN( )函数"></a>第5关：MIN( )函数</h3><h4 id="MIN-函数基本使用"><a href="#MIN-函数基本使用" class="headerlink" title="MIN()函数基本使用"></a>MIN()函数基本使用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(字段名) <span class="keyword">from</span> 数据表;</span><br></pre></td></tr></table></figure>
<h4 id="应用-4"><a href="#应用-4" class="headerlink" title="应用"></a>应用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE School;</span><br><span class="line"></span><br><span class="line">########## 查询语文课程中的最高分数 ##########</span><br><span class="line"><span class="keyword">SELECT</span> course,<span class="built_in">min</span>(score) <span class="keyword">FROM</span> tb_class <span class="keyword">WHERE</span> course<span class="operator">=</span><span class="string">'语文'</span>;</span><br><span class="line"></span><br><span class="line">########## 查询英语课程中的最高分数 ##########</span><br><span class="line"><span class="keyword">SELECT</span> course,<span class="built_in">min</span>(score) <span class="keyword">FROM</span> tb_class <span class="keyword">WHERE</span> course<span class="operator">=</span><span class="string">'英语'</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>MySQl-数据库和表的基本操作</title>
    <url>/2024/10/28/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%20-%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>本文记录数据库和表的基本操作，包括数据的插入，更新，删除等操作。</p>
<span id="more"></span>
<h2 id="MySQl-数据库和表的基本操作（一）"><a href="#MySQl-数据库和表的基本操作（一）" class="headerlink" title="MySQl-数据库和表的基本操作（一）"></a>MySQl-数据库和表的基本操作（一）</h2><h3 id="第三关，添加和删除字段"><a href="#第三关，添加和删除字段" class="headerlink" title="第三关，添加和删除字段"></a>第三关，添加和删除字段</h3><p>任务描述<br>本关任务：分别在表的最后一列、第一列和指定列后添加新的字段，并删除表中的指定字段。</p>
<p>相关知识<br>为了完成本关任务，你需要掌握：<br>1.如何在指定位置添加新的字段，<br>2.如何删除指定的字段。</p>
<p>添加字段<br>因为甲方的业务需求是不停变化的，所以在数据库操作中，添加字段可是常有的事。一个完整的字段包括：字段名、数据类型和完整性约束。</p>
<p>语法规则为： ALTER TABLE 表名 ADD 新字段名 数据类型 [约束条件] [FIRST|AFTER] 已存在字段名; 。<br>以下是在 MySQL 中常用的约束。</p>
<p>NOT NULL 约束：确保某列不能有 NULL 值。</p>
<p>DEFAULT 约束：当某列没有指定值时，为该列提供默认值。</p>
<p>UNIQUE 约束：确保某列中的所有值是不同的。</p>
<p>PRIMARY Key 约束：唯一标识数据库表中的各行/记录。</p>
<p>CHECK 约束：CHECK 约束确保某列中的所有值满足一定条件。</p>
<p>在表的最后一列添加字段<br>只要不做[FIRST|AFTER]的位置说明，在添加字段时MySQL会默认把新字段加入到表的最后一列。</p>
<p>举个例子：<br>现在我们要把字段prod_country添加到表Mall_products的最后一列。表结构如下：</p>
<p>输入命令：<br>ALTER TABLE Mall_products ADD prod_country varchar(30);<br>执行结果如下所示：</p>
<p>在表的第一列添加字段<br>如果我们想在第一列添加新的字段，只需做FIRST的位置说明。</p>
<p>举个例子：<br>现在我们要把字段prod_country添加到表Mall_products的第一列。</p>
<p>输入命令：<br>ALTER TABLE Mall_products ADD prod_country varchar(30) FIRST;<br>执行结果如下所示：</p>
<p>在表的指定列后添加字段<br>如果我们想在某一列后面添加新的字段，只需做AFTER的位置说明，然后注明你想让它添加在哪个字段的后面即可。</p>
<p>举个例子：<br>现在我们要把字段prod_country添加到表Mall_products的 prod_name字段的后面。</p>
<p>输入命令：<br>ALTER TABLE Mall_products ADD prod_country varchar(30) AFTER prod_name;<br>执行结果如下所示：</p>
<p>总之，想要添加新的字段，记住绿色框里的语法规则就能记住三种位置的添加方式。<br>删除字段<br>有添加的需求就会有删除的需求。删除一个字段就是将数据表中的某个字段从表中移除。</p>
<p>语法规则为： ALTER TABLE 表名 DROP 字段名; 。<br>举个例子：<br>现在我们要把字段prod_price从表Mall_products中删除。表结构如上图结果所示。</p>
<p>输入命令：<br>ALTER TABLE Mall_products DROP prod_price;<br>执行结果如下所示：</p>
<p>字段prod_price成功删除！</p>
<p>接下来你们可以自行体验一下了！</p>
<p>编程要求<br>根据提示，在右侧编辑器补充代码:</p>
<p>在数据表tb_emp的Name字段后添加字段Country，数据格式为varchar(20)；</p>
<p>删除数据表tb_emp中的字段Salary。</p>
<p>数据表结构如下:</p>
<p>测试说明<br>我会对你编写的代码进行测试，最终结果会如下图所示：</p>
<p>如果我们想在第一列添加新的字段，只需做FIRST的位置说明。</p>
<p>举个例子：<br>现在我们要把字段prod_country添加到表Mall_products的第一列。</p>
<p>输入命令：<br>ALTER TABLE Mall_products ADD prod_country varchar(30) FIRST;</p>
<p>开始你的任务吧，祝你成功！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE Company;</span><br><span class="line"></span><br><span class="line">#请在此处添加实现代码</span><br><span class="line">########## <span class="keyword">Begin</span> ##########</span><br><span class="line"># 现在我们要把字段prod_country添加到表Mall_products的最后一列。</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Mall_products <span class="keyword">ADD</span> prod_country <span class="type">varchar</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">########## <span class="keyword">add</span> the <span class="keyword">column</span> ##########</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">########## <span class="keyword">delete</span> the <span class="keyword">column</span> ##########</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">########## <span class="keyword">End</span> ##########</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESCRIBE</span> tb_emp;</span><br></pre></td></tr></table></figure>
<h3 id="1-在-tb-emp-表的-Name-字段后添加-Country-字段"><a href="#1-在-tb-emp-表的-Name-字段后添加-Country-字段" class="headerlink" title="1. 在 tb_emp 表的 Name 字段后添加 Country 字段"></a>1. 在 <code>tb_emp</code> 表的 <code>Name</code> 字段后添加 <code>Country</code> 字段</h3><p>要在 <code>Name</code> 字段后添加 <code>Country</code> 字段，并将其数据类型设置为 <code>varchar(20)</code>，可以使用 <code>AFTER</code> 关键字指定位置：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_emp <span class="keyword">ADD</span> Country <span class="type">VARCHAR</span>(<span class="number">20</span>) AFTER Name;</span><br></pre></td></tr></table></figure>
<h3 id="2-删除-tb-emp-表中的-Salary-字段"><a href="#2-删除-tb-emp-表中的-Salary-字段" class="headerlink" title="2. 删除 tb_emp 表中的 Salary 字段"></a>2. 删除 <code>tb_emp</code> 表中的 <code>Salary</code> 字段</h3><p>要删除 <code>tb_emp</code> 表中的 <code>Salary</code> 字段，可以使用以下命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_emp <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> Salary;</span><br></pre></td></tr></table></figure>
<p>这</p>
<h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p>根据提示，在右侧编辑器补充代码:</p>
<p>将数据表tb_emp的Name字段移至第一列，数据格式不变；</p>
<p>将DeptId字段移至Salary字段的后边，数据格式不变。</p>
<p>数据表结构如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_emp MODIFY <span class="keyword">COLUMN</span> Name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">FIRST</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_emp MODIFY <span class="keyword">COLUMN</span> DeptId <span class="type">INT</span> AFTER Salary;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="第五关：删除表的外键约束"><a href="#第五关：删除表的外键约束" class="headerlink" title="第五关：删除表的外键约束"></a>第五关：删除表的外键约束</h3><p>编程要求<br>我们已经为你建立了主表tb_dept和子表tb_emp，在表tb_emp上添加了名称为emp_dept的外键约束，外键名称为DeptId，依赖于表tb_dept的主键Id，下面那是两张表的结构展示：</p>
<p>请你根据提示，在右侧编辑器Begin-End中补充代码:</p>
<p>删除数据表tb_emp的外键约束emp_dept。<br>测试说明<br>我会对你编写的代码进行测试，最终结果会如下图所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE Company;</span><br><span class="line"></span><br><span class="line">#请在此处添加实现代码</span><br><span class="line">########## <span class="keyword">Begin</span> ##########</span><br><span class="line"></span><br><span class="line">########## <span class="keyword">delete</span> the <span class="keyword">foreign</span> key ##########</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_emp <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY emp_dept;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">########## <span class="keyword">End</span> ##########</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_emp \G;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="MySQl-数据库和表的基本操作（二）"><a href="#MySQl-数据库和表的基本操作（二）" class="headerlink" title="MySQl-数据库和表的基本操作（二）"></a>MySQl-数据库和表的基本操作（二）</h2><h3 id="第1关：插入数据"><a href="#第1关：插入数据" class="headerlink" title="第1关：插入数据"></a>第1关：插入数据</h3><h4 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名) <span class="keyword">VALUES</span> (内容);</span><br></pre></td></tr></table></figure>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VjVXp4emJoa25WRXNWV0tENl9YWnZBQkd6dzhvRUhFTEVqWXNBNG96R0xjM3c_ZT1INHBmYUg.jpg" alt="image-20241029153918727"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE Company;</span><br><span class="line"></span><br><span class="line">#请在此处添加实现代码</span><br><span class="line">########## <span class="keyword">Begin</span> ##########</span><br><span class="line"></span><br><span class="line">########## bundle <span class="keyword">insert</span> the <span class="keyword">value</span> </span><br><span class="line"><span class="keyword">INSERT</span> tb_emp (Id,Name,DeptId,Salary) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'Nancy'</span>,<span class="number">301</span>,<span class="number">2300.00</span>),(<span class="number">2</span>,<span class="string">'Tod'</span>,<span class="number">303</span>,<span class="number">5600.00</span>),(<span class="number">3</span>,<span class="string">'Carly'</span>,<span class="number">301</span>,<span class="number">3200.00</span>);</span><br><span class="line"></span><br><span class="line">########## <span class="keyword">End</span> ##########</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp;</span><br></pre></td></tr></table></figure>
<h3 id="第2关：更新数据"><a href="#第2关：更新数据" class="headerlink" title="第2关：更新数据"></a>第2关：更新数据</h3><h4 id="更新语句"><a href="#更新语句" class="headerlink" title="更新语句"></a>更新语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="operator">=</span>内容 <span class="keyword">WHERE</span> 限制条件;</span><br></pre></td></tr></table></figure>
<h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VXNE5RZzd1RVJCQ25rN052bld2R2NjQjF4N2JnX0NRVXdXQmpSQ2RySHdQWFE_ZT1jazh2N0s.jpg" alt="image-20241029155914738"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE Company;</span><br><span class="line"></span><br><span class="line">#请在此处添加实现代码</span><br><span class="line">########## <span class="keyword">Begin</span> ##########</span><br><span class="line"></span><br><span class="line">########## <span class="keyword">update</span> the <span class="keyword">value</span> ##########</span><br><span class="line"><span class="keyword">UPDATE</span> tb_emp <span class="keyword">SET</span> Name<span class="operator">=</span><span class="string">'Tracy'</span>,DeptId<span class="operator">=</span><span class="number">302</span>,Salary<span class="operator">=</span><span class="number">4300.00</span> <span class="keyword">WHERE</span> Id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">########## <span class="keyword">End</span> ##########</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp;</span><br></pre></td></tr></table></figure>
<h3 id="第3关：删除数据"><a href="#第3关：删除数据" class="headerlink" title="第3关：删除数据"></a>第3关：删除数据</h3><h4 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 限制条件;</span><br></pre></td></tr></table></figure>
<blockquote>
<p> TRUNCATE TABLE 语句也可以用来删除表中的所有记录。但是与 DELETE 不同的是，TRUNCATE TABLE 语句直接删除的是表，而不是表中的内容，删除结束后还会重新创建一个表。所以它的执行速度会比 DELETE 语句快。 语法为：<code>TRUNCATE TABLE 表名;</code></p>
</blockquote>
<h4 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h4><p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VSYmY1MUxqaVQ5T3BzY1hyYlo3RFJvQnl3SUpaX0NGNTBxRFpiSjQwNDFubkE_ZT1keE96MFg.jpg" alt="image-20241029160607922"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE Company;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_emp <span class="keyword">WHERE</span> Salary<span class="operator">&gt;</span><span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_emp;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>MySQl-单表查询</title>
    <url>/2024/10/28/MySQl-%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>本文记录单表查询常用语句，依据头歌作业书写，对应MySql单表查询部分。</p>
<span id="more"></span>
<h2 id="单表查询（3）"><a href="#单表查询（3）" class="headerlink" title="单表查询（3）"></a>单表查询（3）</h2><h3 id="第1关："><a href="#第1关：" class="headerlink" title="第1关："></a>第1关：</h3><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名 [<span class="keyword">ASC</span>[<span class="keyword">DESC</span>]];</span><br></pre></td></tr></table></figure>
<p>ASC 升序关键字<br>DESC 降序关键字</p>
<p>查询学生成绩表中1班同学的所有信息并以成绩降序的方式显示结果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">########## 查询<span class="number">1</span>班同学的所有信息以成绩降序的方式显示结果 ##########</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_score <span class="keyword">WHERE</span> CLASS_ID<span class="operator">=</span><span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<h3 id="第2关：分组查询"><a href="#第2关：分组查询" class="headerlink" title="第2关：分组查询"></a>第2关：分组查询</h3><p>语法：</p>
<p>分组查询的关键字是Group By，查询的是每个分组中 首次出现的一条记录。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名;</span><br></pre></td></tr></table></figure>
<p>在右侧编辑器Begin-End处补充代码，对班级表中的班级名称进行分组查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">########## 对班级名称进行分组查询 ##########</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_class <span class="keyword">GROUP</span> <span class="keyword">BY</span> CLASS_ID;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>表名区分大小写</p>
</blockquote>
<h3 id="第3关：使用-LIMIT-限制查询结果的数量"><a href="#第3关：使用-LIMIT-限制查询结果的数量" class="headerlink" title="第3关：使用 LIMIT 限制查询结果的数量"></a>第3关：使用 LIMIT 限制查询结果的数量</h3><p>LIMIT的使用<br>在我们查询大量数据结果时，会返回很多条数据，有需要的记录可能就其中的一条或者几条。比如，实现分页功能，若每页显示10条记录，每次查询就只需要10条记录。<br>在MySQL中，提供了LIMIT关键字，用来限制查询结果的数量。</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 表名 LIMIT [<span class="keyword">OFFSET</span>,] 记录数;</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><p>第一个参数，OFFSET，可选参数，表示偏移量，如果不指定默认值为0，表示从查询结果的第一条记录开始，若偏移量为1，则从查询结果中的第二条记录开始，以此类推。</p>
</li>
<li><p>第二个参数，记录数，表示返回查询结果的条数。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">########## 查询班级中第<span class="number">2</span>名到第<span class="number">5</span>名的学生信息 ##########</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_score <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span> LIMIT <span class="number">1</span>,<span class="number">4</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意查询第2-5名学生时偏移量为1</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Neovim与Tmux快捷键设置</title>
    <url>/2024/09/15/Neovim%E4%B8%8ETmux%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>本文主要对个人的vim以及tmux的快捷键进行了简单统一的映射，仅个人所用。</p>
<span id="more"></span>
<p>由于<code>ctrl</code>键经常需要用而且位置阴间，推荐下面这个工具进行<code>ctrl</code>键和<code>capsLk</code>键的键位修改。小拇指蒸滴受不了了要….</p>
<p><a href="https://zhuanlan.zhihu.com/p/412076746">如何操作[知乎回答]</a><br><a href="https://github.com/microsoft/PowerToys/releases/tag/v0.84.1">下载地址[github]</a></p>
<h3 id="vim-快捷键"><a href="#vim-快捷键" class="headerlink" title="vim 快捷键"></a>vim 快捷键</h3><h4 id="V模式"><a href="#V模式" class="headerlink" title="V模式"></a>V模式</h4><blockquote>
<p>不选中默认一行，选中可以多行</p>
<p>”V“：visual line和”v”:visual模式均适用</p>
</blockquote>
<p>快速移动单行（成块）：”J”和”K”</p>
<h4 id="增加窗口"><a href="#增加窗口" class="headerlink" title="增加窗口"></a>增加窗口</h4><p>水平增加窗口：主键加sv</p>
<blockquote>
<p>我的主键是空格</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;leader&gt;sv</span><br></pre></td></tr></table></figure>
<p>垂直增加窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;leader&gt;sh</span><br></pre></td></tr></table></figure>
<p>退出窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:q</span><br></pre></td></tr></table></figure>
<h4 id="取消高亮"><a href="#取消高亮" class="headerlink" title="取消高亮"></a>取消高亮</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;leader&gt;nh</span><br></pre></td></tr></table></figure>
<h4 id="文档树"><a href="#文档树" class="headerlink" title="文档树"></a>文档树</h4><p>打开/关闭</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;leader&gt;e</span><br></pre></td></tr></table></figure>
<p>展开文件夹,展示文件内容（光标依旧在文档树）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tab&gt;</span><br></pre></td></tr></table></figure>
<p>打开文件（光标在文件内容中）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">o</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;enter&gt;</span><br></pre></td></tr></table></figure>
<p>创建新文件，在文档树中想添加新文件的位置输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<p>底部会出现文件名，输入完成后按<code>&lt;enter&gt;</code>即可</p>
<h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><p>查看函数/变量定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gd</span><br></pre></td></tr></table></figure>
<h4 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h4><p>按<code>&lt;tab&gt;</code>可以选择想要自动补全的内容，按<code>&lt;enter&gt;</code>输入自动补全。对于自动补全的各个参数，按<code>&lt;tab&gt;</code>输入下一个参数，按<code>&lt;shift&gt;+&lt;tab&gt;</code>输入上一个参数。安装新的语言服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Mason</span><br></pre></td></tr></table></figure>
<p>搜索需要的服务，按<code>i</code>安装即可。</p>
<p>取消补全</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ctrl&gt;e</span><br></pre></td></tr></table></figure>
<p>函数文档查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;shift&gt;K</span><br></pre></td></tr></table></figure>
<p>补全文档翻阅</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ctrl&gt;b</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ctrl&gt;f</span><br></pre></td></tr></table></figure>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>单行注释/解注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc</span><br></pre></td></tr></table></figure>
<p>多行注释/解注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gc</span><br></pre></td></tr></table></figure>
<h4 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h4><p>缓冲区间切换</p>
<p>向右切换缓冲区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;shift&gt;L</span><br></pre></td></tr></table></figure>
<p>向左切换缓冲区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;shift&gt;H</span><br></pre></td></tr></table></figure>
<h4 id="文件检索"><a href="#文件检索" class="headerlink" title="文件检索"></a>文件检索</h4><blockquote>
<p>telescope插件</p>
</blockquote>
<p>文件名查找(Find Filename)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;leader&gt;ff</span><br></pre></td></tr></table></figure>
<p>文件内容查找(Find grep)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;leader&gt;fg</span><br></pre></td></tr></table></figure>
<p>缓冲列表查找(Find Buffer)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;leader&gt;fb</span><br></pre></td></tr></table></figure>
<p>帮助文档(Find Help)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;leader&gt;fh</span><br></pre></td></tr></table></figure>
<h4 id="vim-tmux"><a href="#vim-tmux" class="headerlink" title="vim-tmux"></a>vim-tmux</h4><p>借助<code>vim-tmux-navigator</code>插件实现窗格切换</p>
<blockquote>
<p>详细配置过程可见以下blog：<br><a href="https://dingdingqiuqiu.github.io/2024/09/16/vim-tmux-navigator%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/#more">vim-tmux-navigator配置使用</a></p>
</blockquote>
<p>vim中窗口切换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ctrl&gt; h/j/k/l</span><br></pre></td></tr></table></figure>
<p>tmux中窗口切换</p>
]]></content>
      <tags>
        <tag>vim, tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>OS-进程实验</title>
    <url>/2024/10/31/OS-%E8%BF%9B%E7%A8%8B%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<p>本文基于操作系统父子进程关系，进程间信号量机制的同步和模拟临界资源访问三个实验记录进程学习过程中的问题。</p>
<span id="more"></span>
<h3 id="模拟临界资源访问"><a href="#模拟临界资源访问" class="headerlink" title="模拟临界资源访问"></a>模拟临界资源访问</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_SHMKEY 10071800        <span class="comment">// 定义共享内存的键</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BLOCK 1024            <span class="comment">// 定义最大块数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_CMD 8                 <span class="comment">// 定义最大命令长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 共享内存结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shmbuf</span> {</span></span><br><span class="line">    <span class="type">int</span> top;                      <span class="comment">// 栈顶指针</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">stack</span>[MAX_BLOCK];         <span class="comment">// 用于存放块的数组</span></span><br><span class="line">} *shmptr, local;                 <span class="comment">// shmptr 指向共享内存，local 用于本地存储</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> cmdbuf[MAX_CMD];             <span class="comment">// 命令缓冲区</span></span><br><span class="line"><span class="type">int</span> shmid, semid;                 <span class="comment">// 共享内存和信号量标识符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigend</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">relblock</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span>  <span class="title function_">getblock</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">showhelp</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">showlist</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getcmdline</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 创建共享内存</span></span><br><span class="line">    <span class="keyword">if</span>((shmid=shmget(MY_SHMKEY, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> shmbuf), IPC_CREAT|IPC_EXCL|<span class="number">0666</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    {<span class="comment">/* 如果共享内存已存在，作为客户端操作 */</span></span><br><span class="line">        shmid=shmget(MY_SHMKEY, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> shmbuf), <span class="number">0666</span>);</span><br><span class="line">        shmptr=(<span class="keyword">struct</span> shmbuf *)shmat(shmid, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 连接到共享内存</span></span><br><span class="line">        local.top=<span class="number">-1</span>; <span class="comment">// 初始化本地栈顶指针</span></span><br><span class="line">        showhelp(); <span class="comment">// 显示帮助信息</span></span><br><span class="line">        getcmdline(); <span class="comment">// 获取命令行输入</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">strcmp</span>(cmdbuf,<span class="string">"end\n"</span>)) <span class="comment">// 循环直到输入"end"</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(cmdbuf,<span class="string">"get\n"</span>))</span><br><span class="line">                getblock(); <span class="comment">// 获取块</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(cmdbuf,<span class="string">"rel\n"</span>))</span><br><span class="line">                relblock(); <span class="comment">// 释放块</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(cmdbuf,<span class="string">"list\n"</span>))</span><br><span class="line">                showlist(); <span class="comment">// 列出所有获取的块</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(cmdbuf,<span class="string">"help\n"</span>))</span><br><span class="line">                showhelp(); <span class="comment">// 显示帮助信息</span></span><br><span class="line">            getcmdline(); <span class="comment">// 再次获取命令行输入</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>        <span class="comment">/* 作为服务器操作 */</span></span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        shmptr=(<span class="keyword">struct</span> shmbuf *)shmat(shmid, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 连接到共享内存</span></span><br><span class="line">        signal(SIGINT, sigend); <span class="comment">// 捕获中断信号</span></span><br><span class="line">        signal(SIGTERM, sigend); <span class="comment">// 捕获终止信号</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"NO OTHER OPERATION but press Ctrl+C or use kill to end.\n"</span>);</span><br><span class="line">        shmptr-&gt;top=MAX_BLOCK<span class="number">-1</span>; <span class="comment">// 初始化栈顶指针</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;MAX_BLOCK; i++)</span><br><span class="line">            shmptr-&gt;<span class="built_in">stack</span>[i]=MAX_BLOCK-i; <span class="comment">// 初始化栈</span></span><br><span class="line">        sleep(<span class="number">1000000</span>);    <span class="comment">/* 永久睡眠，保持服务器运行 */</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号处理函数，清理共享内存和信号量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigend</span><span class="params">(<span class="type">int</span> sig)</span></span><br><span class="line">{</span><br><span class="line">    shmctl(shmid, IPC_RMID, <span class="number">0</span>); <span class="comment">// 删除共享内存</span></span><br><span class="line">    semctl(semid, IPC_RMID, <span class="number">0</span>); <span class="comment">// 删除信号量</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放块的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">relblock</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(local.top&lt;<span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No block to release!"</span>);</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 没有可释放的块</span></span><br><span class="line">    }</span><br><span class="line">    shmptr-&gt;top++; <span class="comment">// 增加共享内存栈顶指针</span></span><br><span class="line">    shmptr-&gt;<span class="built_in">stack</span>[shmptr-&gt;top]=local.<span class="built_in">stack</span>[local.top--]; <span class="comment">// 释放块到共享内存</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取块的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getblock</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(shmptr-&gt;top&lt;<span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No free block to get!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 没有可获取的块</span></span><br><span class="line">    }</span><br><span class="line">    local.<span class="built_in">stack</span>[++local.top]=shmptr-&gt;<span class="built_in">stack</span>[shmptr-&gt;top]; <span class="comment">// 获取块到本地</span></span><br><span class="line">    shmptr-&gt;top--; <span class="comment">// 减少共享内存栈顶指针</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示帮助信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">showhelp</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\navailable COMMAND:\n\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"help\tlist this help\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"list\tlist all gotten block number\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"get\tget a new block\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"rel\trelease the last gotten block\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"end\texit this program\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出所有获取的块</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">showlist</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"List all gotten block number:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=local.top; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, local.<span class="built_in">stack</span>[i]); <span class="comment">// 打印获取的块</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取命令行输入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getcmdline</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n?&gt; "</span>);</span><br><span class="line">    fgets(cmdbuf, MAX_CMD<span class="number">-1</span>, <span class="built_in">stdin</span>); <span class="comment">// 读取命令</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>Neovim使用</title>
    <url>/2023/11/23/Neovim%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本文是<code>vim/nvim</code>的使用及配置攻略。<br><span id="more"></span></p>
<h3 id="2024-9-13更新"><a href="#2024-9-13更新" class="headerlink" title="2024.9.13更新"></a>2024.9.13更新</h3><blockquote>
<p><code>neovim</code>配置文件在<code>~/.config/nvim</code>中，感觉现在<code>neovim</code>更对胃口，我的<code>nvim/vim</code>配置：</p>
<p><a href="https://github.com/dingdingqiuqiu/vimrc">https://github.com/dingdingqiuqiu/vimrc</a></p>
</blockquote>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h3><blockquote>
<p>默认打开文件进入普通模式,多用于浏览文件和粘贴复制</p>
</blockquote>
<p><code>hjkl</code>用来移动光标</p>
<p><code>4k</code>向下跳4行</p>
<p><code>w</code>跳转到下一个单词的开头</p>
<p><code>b</code>跳转到前一个单词的开头</p>
<p><code>gg</code>回到文档最上方</p>
<p><code>G</code>回到文档最下方</p>
<p><code>Ctrl u</code>向上翻页</p>
<p><code>Ctrl d</code>向下翻页</p>
<p><code>fx</code>将光标移动到离你最近的‘x’位置</p>
<p><code>y</code>复制</p>
<p>注：<code>vim</code>在执行<code>yank</code>后并不默认把内容送到系统剪切板<code>&quot;+y</code>才是将内容送到系统剪切板。</p>
<p><strong>vim寄存器</strong></p>
<p>无论是vim内部抑或外部的复制（[y]ank）、删除（[d]elete）、粘贴（[p]ut），在vim中都是借助registers（寄存器）实现的，vim共有9类寄存器：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>名称</th>
<th>标识</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>无名（unnamed）寄存器</td>
<td>“”</td>
<td>缓存最后一次操作内容；</td>
</tr>
<tr>
<td>数字（numbered）寄存器</td>
<td>“0 - “9</td>
<td>缓存最近操作内容，复制与删除有别；</td>
</tr>
<tr>
<td>行内删除（small delete）寄存器</td>
<td>“-</td>
<td>缓存行内删除内容；</td>
</tr>
<tr>
<td>具名（named）寄存器</td>
<td>“a - “z或”A - “Z</td>
<td>指定时可用；</td>
</tr>
<tr>
<td>只读（read-only）寄存器</td>
<td>“:, “., “%, “#</td>
<td>分别缓存最近命令、最近插入文本、当前文件名、当前交替文件名；</td>
</tr>
<tr>
<td>表达式（expression）寄存器</td>
<td>“=</td>
<td>只读，用于执行表达式命令；</td>
</tr>
<tr>
<td>选择及拖拽（selection and drop）寄存器</td>
<td>“*, “+, “~</td>
<td>存取GUI选择文本，可用于与外部应用交互，使用前提为系统剪切板（clipboard）可用；</td>
</tr>
<tr>
<td>黑洞（black hole）寄存器</td>
<td>“_</td>
<td>不缓存操作内容（干净删除）；</td>
</tr>
<tr>
<td>模式寄存器（last search pattern）</td>
<td>“/</td>
<td>缓存最近的搜索模式。</td>
</tr>
</tbody>
</table>
</div>
<p>上面的说明为简要概述，并不完全准确，详细说明须参考手册：:help copy-move</p>
<p>使用下面这条命令查看<code>vim</code>是否能写入<code>clipbloard</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim --version|grep clipboard</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 回显，这里`+`表示支持</span><br><span class="line">+clipboard         +keymap            +printer           +vertsplit</span><br><span class="line">+ex_extra          +mouse_netterm     +syntax            +xterm_clipboard</span><br></pre></td></tr></table></figure>
<p>可能是装了<a href="https://archlinux.org/packages/?name=wl-clipboard">wl-clipboard</a>,我记得<code>kali</code>里是不支持的。</p>
<blockquote>
<p>具体参见这篇：<a href="https://wiki.archlinuxcn.org/wiki/Neovim">Archwiki_Neovim</a></p>
<p><code>yaw</code>—-&gt; yank all word</p>
<p><code>y4j</code>—-&gt; yank 下面四行内容</p>
<p><code>yfr</code>—-&gt; yank 到r为止的内容</p>
</blockquote>
<p>参考文档：<a href="http://xstarcd.github.io/wiki/vim/vimcopy.html">vim复制粘贴（与系统剪切板相关内容）</a></p>
<p><code>p</code>粘贴</p>
<blockquote>
<p>类似的，<code>&quot;+p</code>是将系统剪切板内容剪切出来</p>
</blockquote>
<p><code>d</code>删除</p>
<blockquote>
<p><code>dj</code>——&gt; delete 当前行和下一行内容</p>
<p><code>d8j</code>——&gt; delete 下八行内容</p>
</blockquote>
<p><code>u</code>撤销</p>
<h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><blockquote>
<p>普通模式输入<code>:</code>进入命令行模式</p>
</blockquote>
<h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3><blockquote>
<p>普通模式输入<strong>i</strong>，当前光标的前一个开始输入</p>
<p>普通模式输入<strong>a</strong>,当前光标的后一个开始输入</p>
<p>普通模式输入<strong>A</strong>,当前行的开头开始输入</p>
<p> 普通模式输入<strong>I</strong>,当前行结尾开始输入</p>
<p><code>caw</code>删除这个单词，并进入输入模式</p>
<p><code>cc</code>删除该行，并进入输入模式</p>
<p><code>c4j</code>删除下四行，并进入输入模式</p>
</blockquote>
<h3 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h3><blockquote>
<p>普通模式输入<code>v</code>进入可视模式</p>
</blockquote>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="vim-plug下载"><a href="#vim-plug下载" class="headerlink" title="vim-plug下载"></a>vim-plug下载</h4><p>商店：<a href="https://vimawesome.com">vimawesome</a></p>
<p>推荐使用<code>VimPlug</code>管理插件</p>
<p><a href="https://github.com/junegunn/vim-plug">vim-plug安装配置（github项目地址）</a></p>
<p>我们这里使用<code>Vim-plug</code>管理插件,先下载<code>vim-plug</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure>
<h4 id="vim插件下载"><a href="#vim插件下载" class="headerlink" title="vim插件下载"></a>vim插件下载</h4><p><a href="https://wiki.archlinuxcn.org/wiki/Vim">Archwiki-Vim</a></p>
<p><a href="https://wiki.archlinuxcn.org/wiki/Neovim">Archwiki-Nvim</a></p>
<blockquote>
<p>vim全局配置文件：<code>/etc/vimrc</code></p>
<p>vim插件下载到：<code>~/.vim/autoload</code></p>
<p>nvim全局配置文件：<code>/etc/xdg/nvim/sysinit.vim</code></p>
<p>nvim插件下载到：<code>~/.local/share/nvim/site/autoload/</code></p>
</blockquote>
<p>将<code>/etc/vimrc</code>配置<code>cp</code>到<code>/etc/xdg/nvim/sysinit.vim</code>后，需要把插件也从<code>~/.vim/autoload</code>文件夹<code>cp</code>到<code>~/.local/share/nvim/site/autoload/</code>。本文主要讲解<code>vim</code>的插件配置，<code>nvim</code>配置可自行迁移。</p>
<blockquote>
<p>nvim迁移后属于能用，但每次使用都有警告的存在，所以还是推荐<code>vim</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## neovim配置时，官网给的这条命令跑不起来，加`--insecurity`参数也不行</span><br><span class="line">## 多方面考虑，还是推荐vim</span><br><span class="line">sh -c &#x27;curl -fLo &quot;$&#123;XDG_DATA_HOME:-$HOME/.local/share&#125;&quot;/nvim/site/autoload/plug.vim --create-dirs \</span><br><span class="line">       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#x27;</span><br></pre></td></tr></table></figure>
<p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/vimrc</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">call plug#begin()</span><br><span class="line">Plug &#x27;scrooloose/nerdtree&#x27;</span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure>
<p>开始安装</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">source</span> %</span><br></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:PlugInstall</span><br></pre></td></tr></table></figure>
<p>再次进入，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:NERDTree</span><br></pre></td></tr></table></figure>
<p>即可看到文件目录</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; All system-wide defaults are set in $VIMRUNTIME/archlinux.vim (usually just</span></span><br><span class="line"><span class="string">&quot;</span> /usr/share/vim/vimfiles/archlinux.vim) and sourced by the call to <span class="punctuation">:</span>runtime</span><br><span class="line"><span class="string">&quot; you can find below.  If you wish to change any of those settings, you should</span></span><br><span class="line"><span class="string">&quot;</span> do it in this file (/etc/vimrc)<span class="punctuation">,</span> since archlinux.vim will be overwritten</span><br><span class="line"><span class="string">&quot; everytime an upgrade of the vim packages is performed.  It is recommended to</span></span><br><span class="line"><span class="string">&quot;</span> make changes after sourcing archlinux.vim since it alters the value of the</span><br><span class="line"><span class="string">&quot; &#x27;compatible&#x27; option.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> This line should not be removed as it ensures that various options are</span><br><span class="line"><span class="string">&quot; properly set to work with the Vim-related packages.</span></span><br><span class="line"><span class="string">runtime! archlinux.vim</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> If you prefer the old-style vim functionalty<span class="punctuation">,</span> add &#x27;runtime! vimrc_example.vim&#x27;</span><br><span class="line"><span class="string">&quot; Or better yet, read /usr/share/vim/vim80/vimrc_example.vim or the vim manual</span></span><br><span class="line"><span class="string">&quot;</span> and configure vim to your own liking!</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; do not load defaults if ~/.vimrc is missing</span></span><br><span class="line"><span class="string">&quot;</span>let skip_defaults_vim=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;基本设置&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">filetype on	<span class="string">&quot;开启文件类型侦测</span></span><br><span class="line"><span class="string">filetype indent on	&quot;</span>适应不同语言的缩进</span><br><span class="line">syntax enable	<span class="string">&quot;开启语法高亮功能</span></span><br><span class="line"><span class="string">syntax on 	&quot;</span>允许使用用户配色</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;快捷键设置&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;    </span></span><br><span class="line"><span class="string">inoremap jk &lt;Esc&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span>显示设置<span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">set laststatus=2        	&quot;</span>总是显示状态栏</span><br><span class="line">set ruler               	<span class="string">&quot;显示光标位置</span></span><br><span class="line"><span class="string">set number              	&quot;</span>显示行号</span><br><span class="line">set cursorline          	<span class="string">&quot;高亮显示当前行</span></span><br><span class="line"><span class="string">set cursorcolumn            &quot;</span>高亮显示当前列</span><br><span class="line">set hlsearch                <span class="string">&quot; 高亮搜索结果</span></span><br><span class="line"><span class="string">exec &quot;</span>nohlsearch<span class="string">&quot;</span></span><br><span class="line"><span class="string">set incsearch               &quot;</span>边输边高亮</span><br><span class="line">set ignorecase              <span class="string">&quot;搜索时忽略大小写</span></span><br><span class="line"><span class="string">set smartcase</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set relativenumber          &quot;</span>其他行显示相对行号</span><br><span class="line"><span class="string">&quot;set scrolloff=5            &quot;</span>垂直滚动时光标距底部位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;编码设置&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">set fileencodings=utf<span class="number">-8</span><span class="punctuation">,</span>gb2312<span class="punctuation">,</span>gbk<span class="punctuation">,</span>gb18030<span class="punctuation">,</span>cp936    <span class="string">&quot; 检测文件编码,将fileencoding设置为最终编码</span></span><br><span class="line"><span class="string">set fileencoding=utf-8                              &quot;</span> 保存时的文件编码</span><br><span class="line">set termencoding=utf<span class="number">-8</span>                              <span class="string">&quot; 终端的输出字符编码</span></span><br><span class="line"><span class="string">set encoding=utf-8                                  &quot;</span> VIM打开文件使用的内部编码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;编辑设置&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">set expandtab   	<span class="string">&quot;扩展制表符为空格</span></span><br><span class="line"><span class="string">set tabstop=4   	&quot;</span>制表符占空格数</span><br><span class="line">set softtabstop=<span class="number">4</span>	<span class="string">&quot;将连续数量的空格视为一个制表符</span></span><br><span class="line"><span class="string">set shiftwidth=4	&quot;</span>自动缩进所使用的空格数</span><br><span class="line"><span class="string">&quot;set textwidth=79	&quot;</span>编辑器每行字符数</span><br><span class="line">set wrap            <span class="string">&quot;设置自动折行</span></span><br><span class="line"><span class="string">set linebreak       &quot;</span>防止单词内部折行</span><br><span class="line">set wrapmargin=<span class="number">5</span>      <span class="string">&quot;指定折行处与右边缘空格数</span></span><br><span class="line"><span class="string">set autoindent  	&quot;</span>打开自动缩进</span><br><span class="line">set wildmenu    	<span class="string">&quot;vim命令自动补全</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span></span><br><span class="line"><span class="string">&quot;</span>需要配置的插件都放在begin和end之间</span><br><span class="line"></span><br><span class="line">Plug &#x27;scrooloose/nerdcommenter&#x27; <span class="string">&quot;多行注释</span></span><br><span class="line"><span class="string">Plug &#x27;jiangmiao/auto-pairs&#x27;     &quot;</span>括号、引号自动补全</span><br><span class="line">Plug &#x27;scrooloose/nerdtree&#x27; 	<span class="string">&quot;树形目录</span></span><br><span class="line"><span class="string">Plug &#x27;Yggdroot/indentLine&#x27;      &quot;</span>自动缩进插件</span><br><span class="line">Plug &#x27;vim-airline/vim-airline&#x27;  <span class="string">&quot;状态栏主题</span></span><br><span class="line"><span class="string">Plug &#x27;vim-scripts/Solarized&#x27;    &quot;</span>主题</span><br><span class="line">Plug &#x27;honza/vim-snippets&#x27;       <span class="string">&quot;代码片段补全</span></span><br><span class="line"><span class="string">Plug &#x27;SirVer/ultisnips&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>Plug &#x27;mhinz/vim-startify&#x27;         <span class="string">&quot;vim开始界面最近文件</span></span><br><span class="line"><span class="string">&quot;</span>Plug &#x27;connorholyday/vim-snazzy&#x27;   <span class="string">&quot;主题方案</span></span><br><span class="line"><span class="string">&quot;</span>Plug &#x27;tpope/vim-commentary&#x27;       <span class="string">&quot;代码注释</span></span><br><span class="line"><span class="string">&quot;</span>Plug &#x27;ryanoasis/vim-devicons&#x27;     <span class="string">&quot;文件图标</span></span><br><span class="line"><span class="string">&quot;</span>Plug &#x27;Lokaltog/vim-powerline&#x27;     <span class="string">&quot;状态栏主题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call plug#end()</span></span><br></pre></td></tr></table></figure>
<h4 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h4><h5 id="NERDTree"><a href="#NERDTree" class="headerlink" title="NERDTree"></a><code>NERDTree</code></h5><p>NERDTree是一个非常实用的Vim插件，它提供了一种方便的方式来浏览文件系统并打开文件。以下是一些常用的NERDTree快捷键：</p>
<ul>
<li><code>ctrl + w + h</code>：光标focus左侧树形目录</li>
<li><code>ctrl + w + l</code>：光标focus右侧文件显示窗口</li>
<li><code>ctrl + w + w</code>：光标自动在左右侧窗口切换</li>
<li><code>ctrl + w + r</code>：移动当前窗口的布局位置</li>
<li><code>o</code>：在已有窗口中打开文件、目录或书签，并跳到该窗口</li>
<li><code>go</code>：在已有窗口中打开文件、目录或书签，但不跳到该窗口</li>
<li><code>t</code>：在新Tab中打开选中文件/书签，并跳到新Tab</li>
<li><code>T</code>：在新Tab中打开选中文件/书签，但不跳到新Tab</li>
<li><code>i</code>：split一个新窗口打开选中文件，并跳到该窗口</li>
<li><code>gi</code>：split一个新窗口打开选中文件，但不跳到该窗口</li>
<li><code>s</code>：vsplit一个新窗口打开选中文件，并跳到该窗口</li>
<li><code>gs</code>：vsplit一个新窗口打开选中文件，但不跳到该窗口</li>
<li><code>!</code>：执行当前文件</li>
<li><code>O</code>：递归打开选中结点下的所有目录</li>
<li><code>x</code>：合拢选中结点的父目录</li>
<li><code>X</code>：递归合拢选中结点下的所有目录</li>
<li><code>e</code>：Edit the current dif</li>
<li><code>D</code>：删除当前书签</li>
<li><code>P</code>：跳到根结点</li>
<li><code>p</code>：跳到父结点</li>
<li><code>K</code>：跳到当前目录下同级的第一个结点</li>
<li><code>J</code>：跳到当前目录下同级的最后一个结点</li>
<li><code>k</code>：跳到当前目录下同级的前一个结点</li>
<li><code>j</code>：跳到当前目录下同级的后一个结点</li>
<li><code>C</code>：将选中目录或选中文件的父目录设为根结点</li>
<li><code>u</code>：将当前根结点的父目录设为根目录，并变成合拢原根结点</li>
<li><code>U</code>：将当前根结点的父目录设为根目录，但保持展开原根结点</li>
<li><code>r</code>：递归刷新选中目录</li>
<li><code>R</code>：递归刷新根结点</li>
<li><code>m</code>：显示文件系统菜单</li>
<li><code>cd</code>：将CWD设为选中目录</li>
<li><code>I</code>：切换是否显示隐藏文件</li>
<li><code>f</code>：切换是否使用文件过滤器</li>
<li><code>F</code>：切换是否显示文件</li>
<li><code>B</code>：切换是否显示书签</li>
<li><code>q</code>：关闭NerdTree窗口</li>
<li><code>?</code>：切换是否显示Quick Help</li>
</ul>
<p>参考文档：<a href="https://www.cnblogs.com/qiumingcheng/p/6275510.html">常用 NERDTree 快捷键</a></p>
<p>删除开头数字及空格<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:%s/^[0-9 ]\+//</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>环境搭建</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL多表查询</title>
    <url>/2024/10/13/SQL%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>本文主要记录数据库实验作业的完成过程，供期末复习使用。</p>
<span id="more"></span>
<p>在这之前</p>
<p><a href="https://blog.csdn.net/weixin_44867329/article/details/137777665">https://blog.csdn.net/weixin_44867329/article/details/137777665</a></p>
<h2 id="数据库实验三-数据查询二"><a href="#数据库实验三-数据查询二" class="headerlink" title="数据库实验三 数据查询二"></a>数据库实验三 数据查询二</h2><p><a href="https://blog.csdn.net/weixin_66547608/article/details/131141175">https://blog.csdn.net/weixin_66547608/article/details/131141175</a></p>
<h3 id="第一题："><a href="#第一题：" class="headerlink" title="第一题："></a>第一题：</h3><p>统计每本书借阅的次数,显示书名和借阅次数（借阅次数命名为<code>jycs</code>),按借阅次数降序排列,借阅次数相同的按书名降序排列。</p>
<p>错误</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> book.sm,<span class="built_in">count</span>(borrow.jyrq)<span class="keyword">as</span> jycs <span class="keyword">FROM</span> book,borrow <span class="keyword">GROUP</span> <span class="keyword">BY</span> sm <span class="keyword">ORDER</span> <span class="keyword">BY</span> jycs <span class="keyword">desc</span>,book.sm <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<p><code>group by</code>用法：</p>
<p>正确</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sm,<span class="built_in">count</span>(sm)<span class="keyword">as</span> jycs <span class="keyword">from</span> borrow <span class="keyword">left</span> <span class="keyword">join</span> book <span class="keyword">on</span> book.txm<span class="operator">=</span>borrow.txm <span class="keyword">group</span> <span class="keyword">by</span> sm <span class="keyword">order</span> <span class="keyword">by</span> jycs <span class="keyword">desc</span>,sm <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>统计借阅次数在2次以上的图书的借阅的次数,显示书名和借阅次数，按借阅次数降序排列,借阅次数相同的按书名降序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sm,<span class="built_in">count</span>(sm) <span class="keyword">as</span> jycs <span class="keyword">from</span> borrow <span class="keyword">left</span> <span class="keyword">join</span> book <span class="keyword">on</span> book.txm<span class="operator">=</span>borrow.txm <span class="keyword">group</span> <span class="keyword">by</span> sm <span class="keyword">having</span>(jycs<span class="operator">&gt;=</span><span class="number">2</span>) <span class="keyword">order</span> <span class="keyword">by</span> jycs <span class="keyword">desc</span>,sm <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<p>正确：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sm,<span class="built_in">count</span>(sm) <span class="keyword">as</span> jycs <span class="keyword">from</span> borrow <span class="keyword">left</span> <span class="keyword">join</span> book <span class="keyword">on</span> book.txm<span class="operator">=</span>borrow.txm <span class="keyword">GROUP</span> <span class="keyword">BY</span> sm <span class="keyword">HAVING</span>(jycs<span class="operator">&gt;=</span><span class="number">2</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> jysc <span class="keyword">desc</span>,sm <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>统计每个出版社的图书的借阅次数,显示出版社的名称和借阅次数，按借阅次数降序排列,借阅次数相同的按出版社降序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cbs,<span class="built_in">count</span>(cbs) <span class="keyword">as</span> jycs </span><br><span class="line"><span class="keyword">from</span> borrow <span class="keyword">left</span> <span class="keyword">join</span> book <span class="keyword">on</span> book.txm<span class="operator">=</span>borrow.txm </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cbs</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> jycs <span class="keyword">desc</span>,cbs <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>统计每位读者借阅的次数,显示姓名和借阅次数,按借阅次数降序排列，借阅次数相同的按姓名降序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> xm,<span class="built_in">count</span>(xm) <span class="keyword">as</span> jycs <span class="keyword">from</span> borrow <span class="keyword">left</span> <span class="keyword">join</span> reader <span class="keyword">on</span> borrow.dzzh<span class="operator">=</span>reader.dzzh </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> xm</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> jycs <span class="keyword">desc</span>,xm <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><p>统计研究生读者借阅的次数,显示姓名和借阅次数，按借阅次数降序排列，借阅次数相同的按姓名降序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> xm,<span class="built_in">count</span>(xm) <span class="keyword">as</span> jycs <span class="keyword">from</span> borrow <span class="keyword">left</span> <span class="keyword">join</span> reader <span class="keyword">on</span> borrow.dzzh<span class="operator">=</span>reader.dzzh <span class="keyword">where</span> sf<span class="operator">=</span><span class="string">'研究生'</span><span class="keyword">group</span> <span class="keyword">by</span> xm <span class="keyword">order</span> <span class="keyword">by</span> jycs <span class="keyword">desc</span>,xm <span class="keyword">desc</span>;开始你的任务吧，祝你成功！</span><br><span class="line"></span><br><span class="line">use library;</span><br><span class="line">#代码开始</span><br><span class="line">#答案<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> sm <span class="keyword">from</span> book <span class="keyword">where</span> cbs<span class="operator">=</span>"上海古籍出版社" <span class="keyword">and</span> sm<span class="operator">!=</span>"李白全集";</span><br><span class="line">#答案<span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> sm,sj <span class="keyword">from</span> book <span class="keyword">where</span> sj<span class="operator">&gt;</span>(<span class="keyword">select</span> <span class="built_in">avg</span>(sj) <span class="keyword">from</span> book);</span><br><span class="line">#答案<span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> txm,sm,sj <span class="keyword">from</span> book <span class="keyword">where</span> sj<span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">max</span>(sj) <span class="keyword">from</span> book);</span><br><span class="line"> </span><br><span class="line">#答案<span class="number">3</span></span><br><span class="line"><span class="keyword">select</span> txm,sm,sj <span class="keyword">from</span> book <span class="keyword">where</span> sj<span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">min</span>(sj) <span class="keyword">from</span> book);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br><span class="line">任务描述</span><br><span class="line">本关任务： 第一题 查询曾经借过图书的读者的读者证号和姓名 第二题 查询曾经没有被借阅的图书的条形码和书名 第三题 查询与孙思旺借过相同图书的读者的读者证号和姓名，按读者证号升序排列 第四题 查询借阅过李白全集的读者所借过的其他图书的书名 按书名升序排列</span><br><span class="line"></span><br><span class="line">开始你的任务吧，祝你成功！</span><br><span class="line"></span><br><span class="line"> use library;</span><br><span class="line">#代码开始</span><br><span class="line">#题目<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> dzzh,xm <span class="keyword">from</span> reader <span class="keyword">where</span> reader.dzzh <span class="keyword">in</span> (<span class="keyword">select</span> dzzh <span class="keyword">from</span> borrow);</span><br><span class="line">#题目<span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> txm,sm <span class="keyword">from</span> book <span class="keyword">where</span> book.txm <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> txm <span class="keyword">from</span> borrow);</span><br><span class="line"> </span><br><span class="line">#题目<span class="number">3</span></span><br><span class="line"><span class="keyword">select</span> dzzh,xm <span class="keyword">from</span> reader <span class="keyword">where</span> reader.dzzh <span class="keyword">in</span> (<span class="keyword">select</span> dzzh <span class="keyword">from</span> borrow </span><br><span class="line"><span class="keyword">where</span> txm <span class="keyword">in</span> (<span class="keyword">select</span> txm <span class="keyword">from</span> borrow </span><br><span class="line"><span class="keyword">where</span> borrow.dzzh<span class="operator">=</span>(<span class="keyword">select</span> dzzh <span class="keyword">from</span> reader </span><br><span class="line"><span class="keyword">where</span> xm<span class="operator">=</span><span class="string">'孙思旺'</span>))) </span><br><span class="line"><span class="keyword">and</span> dzzh<span class="operator">!=</span><span class="string">'006'</span> <span class="keyword">order</span> <span class="keyword">by</span> dzzh <span class="keyword">asc</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#题目<span class="number">4</span></span><br><span class="line"> <span class="keyword">select</span> sm <span class="keyword">from</span> book <span class="keyword">where</span> book.txm <span class="keyword">in</span> (<span class="keyword">select</span> txm <span class="keyword">from</span> borrow</span><br><span class="line"><span class="keyword">where</span> borrow.dzzh <span class="keyword">in</span> (<span class="keyword">select</span> dzzh <span class="keyword">from</span> borrow </span><br><span class="line"><span class="keyword">where</span> borrow.txm<span class="operator">=</span>(<span class="keyword">select</span> txm <span class="keyword">from</span> book <span class="keyword">where</span> sm<span class="operator">=</span>"李白全集")))</span><br><span class="line"><span class="keyword">and</span> sm<span class="operator">!=</span>"李白全集" <span class="keyword">order</span> <span class="keyword">by</span> sm <span class="keyword">asc</span>;</span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h4><p>本关任务：根据图书数据表进行子查询</p>
<h4 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h4><p>为了完成本关任务，你需要掌握：子查询</p>
<p>子查询</p>
<p>在SELECT语句中，一个查询语句完全嵌套在另一个查询语句的WHERE或HAVING的条件短语中，称为子查询或嵌套查询。 通常把条件短语中的查询成为子查询，父查询则使用子查询的查询结果作为查询条件。</p>
<h4 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h4><p>第一题 查询与李白全集同一个出版社的图书的书名（不包括李白全集） 第二题 查询高于图书的平均售价(sj)的图书的书名和售价 第三题 查询售价最高的图书的条形码、书名和售价 第四题 查询售价最低的图书的条形码、书名和售价</p>
<hr>
<p>开始你的任务吧，祝你成功！</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">use library;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#代码开始</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#答案1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sm <span class="keyword">from</span> book <span class="keyword">where</span> cbs=<span class="string">"上海古籍出版社"</span> <span class="keyword">and</span> sm!=<span class="string">"李白全集"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#答案2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sm,sj <span class="keyword">from</span> book <span class="keyword">where</span> sj&gt;(<span class="function"><span class="keyword">select</span> <span class="title">avg</span>(<span class="params">sj</span>) <span class="keyword">from</span> book)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#答案2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> txm,sm,sj <span class="keyword">from</span> book <span class="keyword">where</span> sj=(<span class="function"><span class="keyword">select</span> <span class="title">max</span>(<span class="params">sj</span>) <span class="keyword">from</span> book)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#答案3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> txm,sm,sj <span class="keyword">from</span> book <span class="keyword">where</span> sj=(<span class="function"><span class="keyword">select</span> <span class="title">min</span>(<span class="params">sj</span>) <span class="keyword">from</span> book)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">#代码结束</span></span><br></pre></td></tr></table></figure>
<h4 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h4><p>本关任务： 第一题 查询曾经借过图书的读者的读者证号和姓名 第二题 查询曾经没有被借阅的图书的条形码和书名 第三题 查询与孙思旺借过相同图书的读者的读者证号和姓名，按读者证号升序排列 第四题 查询借阅过李白全集的读者所借过的其他图书的书名 按书名升序排列</p>
<p>开始你的任务吧，祝你成功！</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"> use library;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#代码开始</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#题目1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> dzzh,xm <span class="keyword">from</span> reader <span class="keyword">where</span> reader.<span class="function">dzzh <span class="title">in</span> (<span class="params"><span class="keyword">select</span> dzzh <span class="keyword">from</span> borrow</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#题目2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> txm,sm <span class="keyword">from</span> book <span class="keyword">where</span> book.<span class="function">txm <span class="keyword">not</span> <span class="title">in</span> (<span class="params"><span class="keyword">select</span> txm <span class="keyword">from</span> borrow</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#题目3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> dzzh,xm <span class="keyword">from</span> reader <span class="keyword">where</span> reader.<span class="function">dzzh <span class="title">in</span> (<span class="params"><span class="keyword">select</span> dzzh <span class="keyword">from</span> borrow </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">where</span> txm <span class="keyword">in</span> (<span class="keyword">select</span> txm <span class="keyword">from</span> borrow </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">where</span> borrow.dzzh=(<span class="keyword">select</span> dzzh <span class="keyword">from</span> reader </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">where</span> xm=<span class="string">'孙思旺'</span></span>))) </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">and</span> dzzh!</span>=<span class="string">'006'</span> order <span class="keyword">by</span> dzzh asc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#题目4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">select</span> sm <span class="keyword">from</span> book <span class="keyword">where</span> book.<span class="function">txm <span class="title">in</span> (<span class="params"><span class="keyword">select</span> txm <span class="keyword">from</span> borrow</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">where</span> borrow.dzzh <span class="keyword">in</span> (<span class="keyword">select</span> dzzh <span class="keyword">from</span> borrow </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">where</span> borrow.txm=(<span class="keyword">select</span> txm <span class="keyword">from</span> book <span class="keyword">where</span> sm=<span class="string">"李白全集"</span></span>)))</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">and</span> sm!</span>=<span class="string">"李白全集"</span> order <span class="keyword">by</span> sm asc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">#代码结束</span></span><br></pre></td></tr></table></figure>
<h2 id="MySQL数据库-连接查询"><a href="#MySQL数据库-连接查询" class="headerlink" title="MySQL数据库 - 连接查询"></a><strong>MySQL数据库 - 连接查询</strong></h2><p><a href="https://blog.csdn.net/weixin_44867329/article/details/139355889">https://blog.csdn.net/weixin_44867329/article/details/139355889</a></p>
<p>任务描述<br>本关任务：使用内连接查询数据表中学生姓名和对应的班级。</p>
<p>相关知识<br>为了完成本关任务，你需要掌握：<br>1.什么是内连接查询；<br>2.如何使用内连接查询。</p>
<p>内连接查询<br>仅将两个表中满足连接条件的行组合起来作为结果集，称为内连接；</p>
<p>关键字：[inner] join …  on。</p>
<p>语法：</p>
<p>表1 [inner] join 表2 on 表1.字段=表2.字段<br>语法解释：</p>
<p>从表1中取出每一条记录，去表2中与所有的记录进行匹配，匹配必须是某个条件在表1中与表2中相同，最终才会保留结果，否则不保留。inner 关键字可省略不写；on 表示连接条件：条件字段就是代表相同的业务含义（如下面两张表中的 employee.dept_id 和 department.id），大多数情况下为两张表中的主外键关系。<br>内连接查询的使用<br>现在我们有两张表，数据如下：<br>employee表数据：</p>
<p>id    name    dept_id<br>1    Nancy    4<br>2    Tod    2<br>3    Carly    1<br>4    Allen    2<br>5    Mary    (null)<br>department表数据：</p>
<p>id    name<br>1    开发部<br>2    测试部<br>3    运维部<br>4    销售部<br>现在想要查询出员工姓名以及其对应的部门名称，我们就使用内连接来进行查询。</p>
<p>我们可以将关联查询思路分为三步：<br>1.确定所连接的表，<br>2.确定所要查询的字段，<br>3.确定连接条件与连接方式。</p>
<p>其中，没有部门的员工和部门没有员工的部门都没有被查出来，这就是内连接的特点，只查询在连接表中有对应的记录，其中dept.id=emp.dept_id是连接条件。</p>
<p>编程要求<br>在右侧编辑器补充代码，查询数据表中学生姓名以及对应的班级名称，将其对应的列名分别另命名为studentName和className。</p>
<p>我们为你提供了两张表，内容如下：</p>
<p>tb_student表数据：</p>
<p>id    name    class_id<br>1    Emma    2<br>2    Mary    4<br>3    Allen    (null)<br>4    Kevin    1<br>5    Rose    2<br>6    James    1<br>tb_class表数据：</p>
<p>id    name<br>1    软件1631<br>2    软件1632<br>3    测试1631<br>4    测试1632<br>测试说明<br>平台会对你编写的代码进行测试：</p>
<p>预期输出：</p>
<p> studentName    className<br>    Kevin       软件1631<br>    James       软件1631<br>    Emma        软件1632<br>    Rose        软件1632<br>    Mary        测试1632<br>开始你的任务吧，祝你成功！</p>
<p>第一关</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">USE School;</span><br><span class="line"> </span><br><span class="line">########## 查询数据表中学生姓名和对应的班级 ##########</span><br><span class="line">#请在此处添加实现代码</span><br><span class="line">########## <span class="keyword">Begin</span> ##########</span><br><span class="line"><span class="keyword">select</span> tb_student.name <span class="keyword">as</span> studentName,tb_class.name <span class="keyword">as</span> className </span><br><span class="line"><span class="keyword">from</span> tb_student <span class="keyword">inner</span> <span class="keyword">join</span> tb_class </span><br><span class="line"><span class="keyword">on</span> tb_student.class_id<span class="operator">=</span>tb_class.id</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">########## <span class="keyword">End</span> ##########</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第二关：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">USE School;</span><br><span class="line"> </span><br><span class="line">########## 使用左外连接查询所有学生姓名和对应的班级 ##########</span><br><span class="line"> </span><br><span class="line">#请在此处添加实现代码</span><br><span class="line">########## <span class="keyword">Begin</span> ##########</span><br><span class="line"> #studentName列在左，className列在右</span><br><span class="line"><span class="keyword">select</span> tb_student.name <span class="keyword">as</span> studentName,tb_class.name <span class="keyword">as</span> className</span><br><span class="line"><span class="keyword">from</span> tb_class <span class="keyword">right</span> <span class="keyword">join</span> tb_student #class表右插入student表，student表在左边，以在左边的为name（emma<span class="operator">-</span>mary<span class="operator">-</span>allen<span class="operator">-</span>kevin<span class="operator">-</span>rose<span class="operator">-</span>james）为优先顺序先排（先放），</span><br><span class="line">#然后将class表根据id号相等后连接</span><br><span class="line"><span class="keyword">on</span> tb_class.id<span class="operator">=</span>tb_student.class_id;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">########## <span class="keyword">End</span> ##########</span><br><span class="line"> </span><br><span class="line">########## 使用右外连接查询所有学生姓名和对应的班级 ##########</span><br><span class="line"> </span><br><span class="line">#请在此处添加实现代码</span><br><span class="line">########## <span class="keyword">Begin</span> ##########</span><br><span class="line">#studentName列在左，className列在右</span><br><span class="line"><span class="keyword">select</span> tb_student.name <span class="keyword">as</span> studentName,tb_class.name <span class="keyword">as</span> className </span><br><span class="line"><span class="keyword">from</span> tb_class <span class="keyword">left</span> <span class="keyword">join</span> tb_student#class表左插入student表，class表在左边，以在左边表的name（<span class="number">1631</span><span class="number">-1632</span><span class="number">-1631</span><span class="number">-1632</span>）为顺序，根据class与student表的id号相等，连接</span><br><span class="line"><span class="keyword">on</span> tb_class.id<span class="operator">=</span>tb_student.class_id;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">########## <span class="keyword">End</span> ##########</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第三关</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE School;</span><br><span class="line"> </span><br><span class="line">########## 查询所有班级里分数在<span class="number">90</span>分以上的学生的姓名和学生的成绩以及学生所在的班级 ##########</span><br><span class="line">#请在此处添加实现代码</span><br><span class="line">########## <span class="keyword">Begin</span> ##########</span><br><span class="line"><span class="keyword">select</span> s1.name <span class="keyword">as</span> studentName,score,s2.name <span class="keyword">as</span> className </span><br><span class="line"><span class="keyword">from</span> tb_student <span class="keyword">as</span> s1,tb_class <span class="keyword">as</span> s2 </span><br><span class="line"><span class="keyword">where</span> s1.class_id<span class="operator">=</span>s2.id <span class="keyword">and</span> s1.score<span class="operator">&gt;</span><span class="number">90</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span> ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第四关</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">USE School;</span><br><span class="line"> </span><br><span class="line">#请在此处添加实现代码</span><br><span class="line">########## <span class="keyword">Begin</span> ##########</span><br><span class="line"> </span><br><span class="line">#<span class="number">1.</span>查询表中<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>年级中分别男女的总人数</span><br><span class="line"><span class="keyword">select</span> gradeId,sex,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">where</span> gradeid <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="keyword">group</span> <span class="keyword">by</span> gradeid,sex;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 方法2</span></span><br><span class="line"><span class="keyword">select</span> gradeId,sex,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gradeid,sex <span class="keyword">having</span> gradeid <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git手册</title>
    <url>/2024/10/08/git%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>结合他人blog或视频以及自己平时使用git的一些经验写成的一篇实用向git手册。</p>
<span id="more"></span>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1Sp421o7U4">十分钟速通git核心指令</a></p>
<blockquote>
<p>博主分支部分有些错误，在本文已修正。</p>
</blockquote>
<p>基础环境配置参见：<a href="https://dingdingqiuqiu.github.io/2023/11/10/Arch%E9%85%8D%E7%BD%AEGit%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/#more">Arch配置Git自动登录验证</a></p>
<h3 id="拉取远程仓库并合并"><a href="#拉取远程仓库并合并" class="headerlink" title="拉取远程仓库并合并"></a>拉取远程仓库并合并</h3><blockquote>
<p>git fetch,git merge,git pull</p>
</blockquote>
<p><code>git fetch</code>命令拉取远程仓库最新代码，<code>git merge</code>执行合并。<code>git pull</code>拉取并自动合并。注意，<code>git merge</code>时可能会有<code>merge conflict</code>。为了避免合并时的冲突，可以先<code>git fetch</code>再<code>git merge</code>合并，这样根据IDE的报错修改特定冲突部分。</p>
<h3 id="状态查询"><a href="#状态查询" class="headerlink" title="状态查询"></a>状态查询</h3><blockquote>
<p>git log,git status</p>
</blockquote>
<p><code>git log</code>用来查看所有提交，<code>git status</code>用来查看本地文件夹的状态，<code>git diff</code>用来对比不同分支/提交的文件差异。</p>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><blockquote>
<p>git branch</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b new_branch</span><br></pre></td></tr></table></figure>
<p>通过以上命令在本地新建分支<code>new_branch</code>，该分支中文件在当前分支的基础上进行，同时自动进入<code>new_branch</code>分支。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>
<p>查看本地所有branch以及其与远程branch的绑定</p>
<p>进行一定开发后add,commit………然后：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push -u origin new_branch</span><br></pre></td></tr></table></figure>
<p>将本地<code>new_branch</code>分支推送到远程<code>new_branch</code>，此时在远程新建了<code>new_branch</code>分支，并使用<code>-u</code>参数记住了该本地分支下次<code>git push/git pull</code>时需要推送/拉取的远程分支。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git switch main</span><br></pre></td></tr></table></figure>
<p>本地切换到main分支。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch origin new_branch</span><br></pre></td></tr></table></figure>
<p>拉取远程的<code>new_branch</code>分支。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge origin/new_branch</span><br></pre></td></tr></table></figure>
<p>合并本地<code>main</code>分支和远程<code>new_branch</code>分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure>
<p>将本地<code>main</code>分支的修改推送到远程仓库</p>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><blockquote>
<p>git的文件冲突解决方式比较智能，有时会因为错误的合并策略导致再次合并时不能重新合并，这是因为已经检测到合并过了，此时对要并入的文件略微添加注释即可重新合并。这是因为合并时会根据文件内容，合并历史，文件历史综合考虑合并策略。</p>
</blockquote>
<p>合并时提示有冲突可以使用<code>mergetool</code>解决冲突。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mergetool filename</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若不加文件名，自动打开冲突文件</p>
</blockquote>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7m1XYiq30zod2xxZG?embed=1&width=1274&height=817" width="1274" height=" " /></p>
<p>vimdiff使用</p>
<p>配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global merge.tool vimdiff</span><br><span class="line">git config --global merge.conflictstyle diff3</span><br><span class="line">git config --global mergetool.prompt false</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">让git mergetool不再生成备份文件(*.orig)</span>  </span><br><span class="line">git config --global mergetool.keepBackup false</span><br></pre></td></tr></table></figure>
<p>键入以下命令启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure>
<p>上面三个窗口分别是本地文件(LOCAL)，共同上游（BASE），远程文件(REMOTE)。下面的窗口为MERGED窗口(即合并后的窗口/有冲突的窗口)</p>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7m1bYiq30zod2xxZG?embed=1&width=1920&height=1032" width="1920" height=" " /></p>
<p>光标标移动到MERGED窗口，以下命令可以获取上面窗口的内容(也可根据个人需求自行修改MERGED窗口内容)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:diffget REMOTE # 获取REMOTE的修改到MERGED文件, 忽略大小写</span><br><span class="line">:diffg REMOTE # 获取REMOTE的修改到MERGED文件, 忽略大小写</span><br><span class="line">:diffg BASE # get from base</span><br><span class="line">:diffg LOCAL # get from local</span><br></pre></td></tr></table></figure>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7m1fYiq30zod2xxZG?embed=1&width=1920&height=1032" width="1920" height=" " /></p>
<p>上面这张图片键入命令无效，要求有一条白线(没有白线可以换成输入模式输入点内容自动白线)，如下：</p>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7m1jYiq30zod2xxZG?embed=1&width=1920&height=1032" width="1920" height=" " /></p>
<p>还有一些其他命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">]c      # nect difference</span><br><span class="line">[c      # previous difference</span><br><span class="line">zo      # open folded text</span><br><span class="line">zc      # close folded text</span><br><span class="line">zr      # open all folds</span><br><span class="line">zm      # close all folds</span><br><span class="line">:diffupdate     # re-scan the file for difference</span><br><span class="line">do      # diff obtain</span><br><span class="line">dp      # diff put</span><br></pre></td></tr></table></figure>
<p>解决冲突完成后<code>git comit</code>提交即可。</p>
<h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><blockquote>
<p>项目复制</p>
</blockquote>
<p>在<code>github</code>上<code>fork</code>别人的远程仓库之后，相当于你自己新建了一个自己的远程仓库，只不过内容都是别人的远程仓库里的内容。你可以对自己<code>fork</code>到的仓库进行任意操作。例如，<code>git clone</code>到本地后，进行若干修改/提交，<code>git push</code>到的远程仓库为你的远程仓库。如果想让代码合并到原作者的远程仓库，需要向原作者申请<code>Pull requests</code>，原作者同意后即可合并到原作者的远程仓库。这即为开源项目的贡献流程。</p>
]]></content>
  </entry>
  <entry>
    <title>VPS搭建</title>
    <url>/2023/11/19/VPS%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>本文是<code>VPS</code>搭建教程<br><span id="more"></span></p>
<h1 id="最近更新"><a href="#最近更新" class="headerlink" title="最近更新"></a>最近更新</h1><p><strong>最初放弃机场尝试自建节点是由于玩双人成行时EA平台上好友列表加载不出来，怀疑是机场节点问题，后面搭建到一半发现用全局直连开TUN模式可以解决这个问题，遂放弃，有必要的话再考虑自建吧，先写到这</strong></p>
<blockquote>
<p>一定要用<strong>DIRECT</strong>模式，其他节点好友列表均加载不出来，EA在线状态也显示不在线，具体原因未知</p>
</blockquote>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212622&authkey=%21ANiKrfTOh3bHFkY&width=1070&height=758" width="1070" height="" /></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.youtube.com/watch?v=g21MJc7SG_c&amp;t=400s">【科学上网一键搭建系列一】新手如何免费开启VPS一站式入门教学，零基础必看视频，助你一学就会，快速上手，以后基操不再求人。</a></p>
<blockquote>
<p><code>Youtube</code>上的一则视频，侧重VPS的选择</p>
</blockquote>
<p><a href="https://www.youtube.com/watch?v=s90feRmdr9A&amp;t=6s">最新零基础保姆级小白节点搭建教学-不良林</a></p>
<blockquote>
<p><code>Youtube</code>上的一则视频，侧重具体搭建过程</p>
</blockquote>
<h3 id="VPS选择"><a href="#VPS选择" class="headerlink" title="VPS选择"></a>VPS选择</h3><p>1.<strong>VULTR</strong></p>
<blockquote>
<p>支持小时收费            更换IP免费            推荐美西机房</p>
</blockquote>
<p>注册（这里我用的<code>github</code>邮箱，密码要大于十个字符（不必与<code>Github</code>密码一致<strong>@github</strong>））</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212627&authkey=%21ANiKrfTOh3bHFkY&width=1920&height=980" width="1920" height="" /></p>
<p>右上角<code>Deploy</code>选择<code>Deploy New Server</code>,进入以后,<code>Server</code>和<code>CPU</code>选最基础的即可</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212625&authkey=%21ANiKrfTOh3bHFkY&width=1920&height=924" width="1920" height="" /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212623&authkey=%21ANiKrfTOh3bHFkY&width=1920&height=924" width="1920" height="" /></p>
<p>位置这里选择，纽约的比洛杉矶便宜一些，系统选择<code>CentOS7</code>即可，注意把自动备份关掉，省点钱可以。</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212626&authkey=%21ANiKrfTOh3bHFkY&width=1920&height=924" width="1920" height="" /></p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212624&authkey=%21ANiKrfTOh3bHFkY&width=1920&height=924" width="1920" height="" /></p>
<h3 id="搭建教学"><a href="#搭建教学" class="headerlink" title="搭建教学"></a>搭建教学</h3><h4 id="Finalshell下载"><a href="#Finalshell下载" class="headerlink" title="Finalshell下载"></a><code>Finalshell</code>下载</h4><p><a href="http://www.hostbuf.com/downloads/finalshell_install.exe"><code>Finalshell</code>多平台下载地址</a></p>
]]></content>
      <categories>
        <category>环境搭建</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>linux环境中matplotlib画图缺少字体</title>
    <url>/2024/09/15/linux%E7%8E%AF%E5%A2%83%E4%B8%ADmatplotlib%E7%94%BB%E5%9B%BE%E7%BC%BA%E5%B0%91%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<p>本文主要解决linux环境下画图没中文字体的问题<br><span id="more"></span></p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>倘若使用的linux没有x协议支持，无法使用<code>plt.show</code>函数绘图，转而使用<code>plt.savefig</code>和<code>plt.close</code>函数保存图片查看。我们使用以下代码添加中文支持。</p>
<blockquote>
<p>补充: <code>feh</code>可以查看png图片，<code>apt-get install fet</code>安装它，<code>feh example.png</code>查看图片。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>但会出现下面报错<img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VTNGtwRFlHU3RRZ2dQdUtEUUFBQUFBQjJWNm54V242VUx4Q1BQQW80RjFBelE_ZT0zd3A2blc.png" width="958" height=" " /></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h3 id="字体下载安装"><a href="#字体下载安装" class="headerlink" title="字体下载安装"></a>字体下载安装</h3><ul>
<li><p>下载：<br><a href="https://us-logger1.oss-cn-beijing.aliyuncs.com/SimHei.ttf">SimHei字体下载链接</a></p>
</li>
<li><p>安装：</p>
</li>
</ul>
<p>将字体放到对应文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cp SimHei.ttf /usr/share/fonts/SimHei.ttf</span><br></pre></td></tr></table></figure>
<p>赋予使用权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod 777 /usr/share/fonts</span><br></pre></td></tr></table></figure>
<h3 id="配置matplotlib"><a href="#配置matplotlib" class="headerlink" title="配置matplotlib"></a>配置matplotlib</h3><h4 id="方法1-删除缓存"><a href="#方法1-删除缓存" class="headerlink" title="方法1.删除缓存"></a>方法1.删除缓存</h4><blockquote>
<p>已尝试，有效</p>
</blockquote>
<p>查看<code>matplotlib</code>的缓存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mlt</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mlt.get_cacahedir())</span><br><span class="line"><span class="comment"># /home/ubuntu22/.cache/matplotlib </span></span><br></pre></td></tr></table></figure>
<p>删除缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /home/ubuntu22/.cache/matplotlib </span><br></pre></td></tr></table></figure>
<h4 id="方法2-在matplotlib对应字体文件夹下更改"><a href="#方法2-在matplotlib对应字体文件夹下更改" class="headerlink" title="方法2.在matplotlib对应字体文件夹下更改"></a>方法2.在matplotlib对应字体文件夹下更改</h4><p>查看<code>matplotlib</code>配置文件位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matplotlib.matplotlib_fname())</span><br><span class="line"><span class="comment"># /home/ubuntu22/henu/ML/ml/lib/python3.10/site-packages/matplotlib/mpl-data/matplotlibrc</span></span><br></pre></td></tr></table></figure>
<p>由输出，我们得到字体目录为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/ubuntu22/henu/ML/ml/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf</span><br></pre></td></tr></table></figure>
<p>我们把安装好的字体复制过去一份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/share/fonts/SimHei.ttf /home/ubuntu22/henu/ML/ml/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/SimHei.ttf </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql连接不上3306端口</title>
    <url>/2024/09/23/mysql%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A3306%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<p>经过多次尝试，发现是安装时配置出现了问题，密码选项哪里不要选推荐的配置，选传统密码选项即可。不然解决连不上3306端口的问题以后还会被禁止登录。</p>
<span id="more"></span>
<p>可以参考这篇的<a href="https://blog.csdn.net/weixin_47406082/article/details/131867849">配置</a></p>
<p><strong>注意</strong></p>
<p>1.自定义安装可以指定sql安装位置。</p>
<p>2.密码策略选择传统，否则极有可能出现下面两种报错。</p>
<blockquote>
<p>启动MySQL报错:ERROR 2003 (HY000): Can’t connect to MySQL server on ‘localhost’ (10061)</p>
<p>ERROR 1045 (28000): Access denied for user ‘root‘@‘localhost‘ (using password: NO/YES)</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>tensorflow使用警告</title>
    <url>/2024/09/12/tensorflow%E4%BD%BF%E7%94%A8%E8%AD%A6%E5%91%8A/</url>
    <content><![CDATA[<p>本文主要对一篇英文回答进行翻译，练练英语能力。<br>同时尝试解决<code>tensorflow</code>使用时的警告问题。</p>
<span id="more"></span>
<p>原回答：<a href="https://stackoverflow.com/questions/77338229/tensorflow-2-14-0-with-cuda-not-registering-cuda">https://stackoverflow.com/questions/77338229/tensorflow-2-14-0-with-cuda-not-registering-cuda</a></p>
<h3 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境"></a>本机环境</h3><p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VTNGtwRFlHU3RRZ2dQdUREUUFBQUFBQmFTUnN2NnNRUHhwLWFCTXVnZnRVd1E_ZT16cjlnRzQ.png" alt=""></p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote>
<p>实际上并不能算作严重的问题，警告而已</p>
<p>本文目的主要是练练英语</p>
</blockquote>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VTNGtwRFlHU3RRZ2dQdUVEUUFBQUFBQlMzNFpMWDZySktfanZ2bmlnUE0zWEE_ZT1zaEJjWVo.png" width="958" height="" /></p>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VTNGtwRFlHU3RRZ2dQdUZEUUFBQUFBQnRLVDl3Vnc3aHgwaUg0VUtLMjJSclE_ZT1hNmJjMHI.png" width="958" height="" /></p>
<h3 id="警告翻译"><a href="#警告翻译" class="headerlink" title="警告翻译"></a>警告翻译</h3><p>开练英语…….</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2024</span><span class="number">-09</span><span class="number">-13</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">04.282338</span>: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:<span class="number">485</span>] Unable to <span class="keyword">register</span> cuFFT factory: Attempting to <span class="keyword">register</span> factory <span class="keyword">for</span> plugin cuFFT when one has already been registered</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="number">2024</span><span class="number">-09</span><span class="number">-13</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">04.351321</span>: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:<span class="number">8454</span>] Unable to <span class="keyword">register</span> cuDNN factory: Attempting to <span class="keyword">register</span> factory <span class="keyword">for</span> plugin cuDNN when one has already been registered</span><br><span class="line"><span class="number">2024</span><span class="number">-09</span><span class="number">-13</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">04.372352</span>: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:<span class="number">1452</span>] Unable to <span class="keyword">register</span> cuBLAS factory: Attempting to <span class="keyword">register</span> factory <span class="keyword">for</span> plugin cuBLAS when one has already been registered</span><br><span class="line"><span class="number">2024</span><span class="number">-09</span><span class="number">-13</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">04.508856</span>: I tensorflow/core/platform/cpu_feature_guard.cc:<span class="number">210</span>] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.</span><br><span class="line">To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.</span><br><span class="line"><span class="number">2024</span><span class="number">-09</span><span class="number">-13</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">05.940357</span>: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:<span class="number">38</span>] TF-TRT Warning: Could not find TensorRT</span><br><span class="line">WARNING: All <span class="built_in">log</span> messages before <span class="title function_">absl::InitializeLog</span><span class="params">()</span> is called are written to STDERR</span><br><span class="line">I0000 00:00:1726156987.392321  125977 cuda_executor.cc:1001] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node</span><br><span class="line">Your kernel may have been built without NUMA support.</span><br><span class="line">I0000 00:00:1726156987.582220  125977 cuda_executor.cc:1001] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node</span><br><span class="line">Your kernel may have been built without NUMA support.</span><br><span class="line">I0000 00:00:1726156987.582324  125977 cuda_executor.cc:1001] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node</span><br><span class="line">Your kernel may have been built without NUMA support.</span><br><span class="line">Num GPUs Available:  1</span><br><span class="line">I0000 00:00:1726156987.588599  125977 cuda_executor.cc:1001] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node</span><br><span class="line">Your kernel may have been built without NUMA support.</span><br><span class="line">I0000 00:00:1726156987.588689  125977 cuda_executor.cc:1001] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node</span><br><span class="line">Your kernel may have been built without NUMA support.</span><br><span class="line">I0000 00:00:1726156987.588756  125977 cuda_executor.cc:1001] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node</span><br><span class="line">Your kernel may have been built without NUMA support.</span><br><span class="line">I0000 00:00:1726156988.000957  125977 cuda_executor.cc:1001] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node</span><br><span class="line">Your kernel may have been built without NUMA support.</span><br><span class="line">I0000 00:00:1726156988.001057  125977 cuda_executor.cc:1001] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node</span><br><span class="line">Your kernel may have been built without NUMA support.</span><br><span class="line">2024-09-13 00:03:08.001094: I tensorflow/core/common_runtime/gpu/gpu_device.cc:2112] Could not identify NUMA node of platform GPU id 0, defaulting to 0.  Your kernel may not have been built with NUMA support.</span><br><span class="line">I0000 00:00:1726156988.001174  125977 cuda_executor.cc:1001] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node</span><br><span class="line">Your kernel may have been built without NUMA support.</span><br><span class="line">2024-09-13 00:03:08.001553: I tensorflow/core/common_runtime/gpu/gpu_device.cc:2021] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 1767 MB memory:  -&gt; device: 0, name: NVIDIA GeForce RTX 3050 Laptop GPU, pci bus id: 0000:01:00.0, compute capability: 8.6</span><br><span class="line">tf.<span class="title function_">Tensor</span><span class="params">(</span></span><br><span class="line"><span class="params">[[<span class="number">1.</span> <span class="number">3.</span>]</span></span><br><span class="line"><span class="params"> [<span class="number">3.</span> <span class="number">7.</span>]], shape=(<span class="number">2</span>, <span class="number">2</span>), dtype=float32)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl配置使用notebook</title>
    <url>/2024/09/15/wsl%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8notebook/</url>
    <content><![CDATA[<p>一直使用linux终端比较习惯，这里展示wsl优雅启动notebook,以及基本使用</p>
<span id="more"></span>
<h3 id="jupyter配置"><a href="#jupyter配置" class="headerlink" title="jupyter配置"></a>jupyter配置</h3><h4 id="生成默认配置文件"><a href="#生成默认配置文件" class="headerlink" title="生成默认配置文件"></a>生成默认配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<p>会在用户目录下生成<code>.jupyter</code>文件夹，其中<code>jupyter_notebook_config.py</code>就是配置文件。</p>
<h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><p>终端输入<code>ipython</code>进入命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipython</span><br></pre></td></tr></table></figure>
<p>输入密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from jupyter_server.auth import passwd</span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure>
<p>or直接在shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jupyter server password</span><br></pre></td></tr></table></figure>
<p>如果采用方式1，直接在命令行打印了密钥，如果采用了方式二，会提示密钥写在了何处，我们查看并复制，下一步配置自动登录时会用到</p>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7mwzYiq30zod2xxZG?embed=1&width=940&height=253" width="940" height=" " /></p>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7mw7Yiq30zod2xxZG?embed=1&width=958&height=95" width="958" height=" " /></p>
<h4 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h4><p>默认自动登录，打开第一步生成的配置文件，把hash写入，仅手动登录一次后即可实现自动登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.jupyter/jupyter_notebook_config.py </span><br></pre></td></tr></table></figure>
<p>修改下面<code>c.ServerApp.password</code>的值为上面的密钥即可。</p>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7mw_Yiq30zod2xxZG?embed=1&width=958&height=1018" width="958" height=" " /></p>
<p>编辑默认生成的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>
<p>对下面这行解注释即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.open_browser = False     	#不自动打开浏览器</span><br></pre></td></tr></table></figure>
<h3 id="jupyter使用"><a href="#jupyter使用" class="headerlink" title="jupyter使用"></a>jupyter使用</h3><h4 id="nohup方式"><a href="#nohup方式" class="headerlink" title="nohup方式"></a>nohup方式</h4><p>我们用下面这行命令打开<code>notebook</code>没有额外输出，终端可以继续干别的事情</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup jupyter notebook&amp;</span><br></pre></td></tr></table></figure>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7mxDYiq30zod2xxZG?embed=1&width=958&height=202" width="958" height=" " /></p>
<p>该命令返回的一个pid,我们可以使用<code>kill</code>命令来杀死它，注意这里我们实际上是将输出写入了当前目录下的<code>nohup.out</code>,如果太大，记得删除。我们想要停止该进程可以使用<code>kill -9 pid</code>停止。</p>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7mxHYiq30zod2xxZG?embed=1&width=958&height=390" width="958" height=" " /></p>
<p>另一种方式是使用<code>tumx</code>启动<code>notebook</code></p>
<h4 id="tmux方式"><a href="#tmux方式" class="headerlink" title="tmux方式"></a><code>tmux</code>方式</h4><blockquote>
<p>会介绍的这些已经可以很优雅得使用nootbook了</p>
<p>实际上tmux相当好用，还有别的有趣功能</p>
</blockquote>
<p>安装：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure></p>
<p>进入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure>
<p>之后在终端上下左右切分切换即可。如下图所示。上方窗口在下方<code>notebook</code>启动后依旧可以执行其他命令。</p>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7mxLYiq30zod2xxZG?embed=1&width=1919&height=1018" width="1919" height=" " /></p>
<p>由于<code>tmux</code>快捷键设置较为阴间，我们配合neovim的窗口快捷键切换出一篇blog介绍统一方便的快捷键设置。可跳转至下面这篇文章:</p>
<p><a href="https://dingdingqiuqiu.github.io/2024/09/15/Neovim%E4%B8%8ETmux%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%BE%E7%BD%AE/#more">Neovim与Tmux快捷键设置[myblog]</a></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode-setting-bk</title>
    <url>/2024/10/27/vscode-setting-bk/</url>
    <content><![CDATA[<p>本文主要是对个人vs-code设置以及配置的备份，用于及其意外情况下的恢复（希望不会用到）</p>
<span id="more"></span>
<p><code>setting.json</code>和<code>keybinding.json</code>在<code>gitee</code>上也做了备份，地址：<a href="https://gitee.com/dingdingqiu/share">https://gitee.com/dingdingqiu/share</a></p>
<h3 id="CPP调试环境"><a href="#CPP调试环境" class="headerlink" title="CPP调试环境"></a>CPP调试环境</h3><ol>
<li><p>下载<code>mingw64</code>，解压到D盘</p>
<p>访问下面这个链接得到资源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://gitcode.com/open-source-toolkit/ee6ea/overview</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量</p>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VVX1YyaE5zX1oxUHJuamtHTzRhaXRZQm0yR2t3LTd0VDBRRUVGYmxGb0Z6U3c_ZT15dHY4VFo.png" width="1315" height=" "></p>
</li>
<li><p><code>vscode</code>下载<code>c/cpp</code>插件</p>
</li>
<li><p><code>ctrl-shift-p</code>，选中第一个<code>C/C++:Edit Configurations(UI)</code></p>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VZMW9rb0NxdjB4RXYwY3AyVVlVNG80QkpvRlVTTDExZ1ZXc2pHdWdNd3lxRFE_ZT1hVHhaM0k.png" width="1579" height=" ">5.配置信息如下：</p>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VUZ2ZHT0VCVXZ0Q21KMVdHZm5NUS0wQm1DQUxiY0tEdHVkdng0M2xvcHBDV2c_ZT0xTHhVTXU.png" width="1579" height=" "></p>
<p>其实不用改啥东西了，几乎所有选项在配置好环境变量后vscode都能自动识别，这里主要做对照用。关键是要下载<code>mingw64</code>,不要下载任何其他乱七八糟的。</p>
</li>
</ol>
<h3 id="VSCode-编辑配置"><a href="#VSCode-编辑配置" class="headerlink" title="VSCode_编辑配置"></a>VSCode_编辑配置</h3><h4 id="1-Setting-json"><a href="#1-Setting-json" class="headerlink" title="1.Setting.json"></a>1.Setting.json</h4><p>设置里直接搜索<code>setting.json</code>即可</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"security.allowedUNCHosts"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"wsl.localhost"</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">"git.openRepositoryInParentFolders"</span><span class="punctuation">:</span> <span class="string">"never"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"cmake.showOptionsMovedNotification"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"code-runner.runInTerminal"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"security.workspace.trust.untrustedFiles"</span><span class="punctuation">:</span> <span class="string">"open"</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span><span class="punctuation">:</span> <span class="string">"Tokyo Night Storm"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"vim.easymotion"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"vim.incsearch"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"vim.useSystemClipboard"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"vim.useCtrlKeys"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"vim.hlsearch"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"vim.leader"</span><span class="punctuation">:</span> <span class="string">"&lt;space&gt;"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"vim.insertModeKeyBindings"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"before"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"j"</span><span class="punctuation">,</span> <span class="string">"k"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"after"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"&lt;Esc&gt;"</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"before"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"&lt;C-j&gt;"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"commands"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"workbench.action.terminal.focus"</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"vim.normalModeKeyBindingsNonRecursive"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"before"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"&lt;leader&gt;"</span><span class="punctuation">,</span><span class="string">"c"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"commands"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"workbench.action.closeActiveEditor"</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"before"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"&lt;leader&gt;"</span><span class="punctuation">,</span> <span class="string">"n"</span><span class="punctuation">,</span> <span class="string">"h"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"commands"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">":nohl"</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"before"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"L"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"commands"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">":tabnex"</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"before"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"H"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"commands"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">":tabprev"</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"before"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"&lt;leader&gt;"</span><span class="punctuation">,</span> <span class="string">"f"</span><span class="punctuation">,</span> <span class="string">"o"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"commands"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"workbench.action.openRecent"</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"before"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"&lt;C-j&gt;"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"commands"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"workbench.action.terminal.focus"</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">"vim.handleKeys"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"&lt;C-a&gt;"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"&lt;C-f&gt;"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure>
<h4 id="2-keybinding-json"><a href="#2-keybinding-json" class="headerlink" title="2.keybinding.json"></a>2.keybinding.json</h4><p><code>ctrl-shift-p</code>,打开箭头指的这个<code>Preferences:Open Keyboard Shortcuts(JSON)</code>即可。</p>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VSeHJLS0gtX210T29DcnFUX1NYUW0wQlhoLVNLOW5XSVdFZ0lwS1QyWTg3TlE_ZT1MV0dMTnI.png" width="1092" height=" "></p>
<p>配置为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Place your key bindings in this file to override the defaults</span></span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"key"</span><span class="punctuation">:</span> <span class="string">"shift+alt+down"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"command"</span><span class="punctuation">:</span> <span class="string">"-editor.action.insertCursorBelow"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"when"</span><span class="punctuation">:</span> <span class="string">"editorTextFocus"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"key"</span><span class="punctuation">:</span> <span class="string">"shift+alt+down"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"command"</span><span class="punctuation">:</span> <span class="string">"editor.action.copyLinesDownAction"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"when"</span><span class="punctuation">:</span> <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"key"</span><span class="punctuation">:</span> <span class="string">"ctrl+shift+alt+down"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"command"</span><span class="punctuation">:</span> <span class="string">"-editor.action.copyLinesDownAction"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"when"</span><span class="punctuation">:</span> <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"key"</span><span class="punctuation">:</span> <span class="string">"ctrl+h"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"command"</span><span class="punctuation">:</span> <span class="string">"workbench.action.navigateLeft"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"key"</span><span class="punctuation">:</span> <span class="string">"ctrl+l"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"command"</span><span class="punctuation">:</span> <span class="string">"workbench.action.navigateRight"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"key"</span><span class="punctuation">:</span> <span class="string">"ctrl+k"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"command"</span><span class="punctuation">:</span> <span class="string">"workbench.action.focusActiveEditorGroup"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"when"</span><span class="punctuation">:</span> <span class="string">"terminalFocus"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>vim-tmux-navigator配置使用</title>
    <url>/2024/09/16/vim-tmux-navigator%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本文主要是对<code>vim-tmux-navigator</code>插件项目主页的汉化，主要为了练习英文能力。<br><span id="more"></span><br>原文链接：<br><a href="https://github.com/christoomey/vim-tmux-navigator">vim-tmux-navigator插件github原文</a></p>
<h1 id="Vim-Tmux-Navigator"><a href="#Vim-Tmux-Navigator" class="headerlink" title="Vim Tmux Navigator"></a>Vim Tmux Navigator</h1><p>navigator航海家</p>
<p>This plugin is a repackaging of Mislav Marohnić’s tmux-navigator configuration described in this gist. When combined with a set of tmux key bindings, the plugin will allow you to navigate seamlessly between vim and tmux splits using a consistent set of hotkeys.</p>
<p>combined 联合<br>a set of 一组<br>bindings 绑定<br>seam接缝 seamless无缝的<br>consistent 一致的</p>
<p>这个插件是概要中描述的Mislav Marohnić的tmux-navigator配置的重打包。当与一组tmux键绑定结合使用时，该插件将允许您使用一组一致的热键在vim和tmux分割之间无缝导航。</p>
<p>NOTE: This requires tmux v1.8 or higher.</p>
<p>注意:这个插件需要tmux版本在v1.8以上</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>This plugin provides the following mappings which allow you to move between Vim panes and tmux splits seamlessly.<br>这个插件提供以下按键映射，允许你在vim的panes（窗格）和tmux的splits（分割）间无缝切换</p>
<p><ctrl-h> =&gt; Left</p>
<p><ctrl-j> =&gt; Down</p>
<p><ctrl-k> =&gt; Up</p>
<p><ctrl-l> =&gt; Right</p>
<p><ctrl-\\> =&gt; Previous split（前一个分割）</p>
<p>Note - you don’t need to use your tmux prefix key sequence before using the mappings.<br>prefix前缀<br>注意，在使用这个映射之前你无需使用tmux的前缀键序列</p>
<p>If you want to use alternate key mappings, see the configuration section below.<br>如果你想使用可选的映射，看下面的配置那一段</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>If you don’t have a preferred installation method, I recommend using Vundle. Assuming you have Vundle installed and configured, the following steps will install the plugin:<br>如果你没有一个特别偏爱的安装方式，我推荐你使用Vundle。假定你已经安装了Vundle并且已经配置好了，下面这些步骤可以安装这个插件</p>
<p>Add the following line to your ~/.vimrc file</p>
<p>添加下面这些行到你的vimrc文件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Plugin &#x27;christoomey/vim-tmux-navigator&#x27;</span><br></pre></td></tr></table></figure><br>然后运行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PluginInstall</span><br></pre></td></tr></table></figure><br>If you are using Vim 8+, you don’t need any plugin manager. Simply clone this repository inside ~/.vim/pack/plugin/start/ directory and restart Vim.<br>如果你使用Vim8＋，你不需要任何插件管理器.只需要克隆这个仓库到<code>~/.vim/pack/plugin/start</code>目录然后重启Vim即可<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:christoomey/vim-tmux-navigator.git ~/.vim/pack/plugins/start/vim-tmux-navigator</span><br></pre></td></tr></table></figure></p>
<h3 id="Lazy-nvim"><a href="#Lazy-nvim" class="headerlink" title="Lazy.nvim"></a>Lazy.nvim</h3><p>If you are using lazy.nvim. Add the following plugin to your configuration.<br>如果你使用lazy.nvim.添加下面的插件到你的配置中<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;christoomey/vim-tmux-navigator&quot;,</span><br><span class="line">  cmd = &#123;</span><br><span class="line">    &quot;TmuxNavigateLeft&quot;,</span><br><span class="line">    &quot;TmuxNavigateDown&quot;,</span><br><span class="line">    &quot;TmuxNavigateUp&quot;,</span><br><span class="line">    &quot;TmuxNavigateRight&quot;,</span><br><span class="line">    &quot;TmuxNavigatePrevious&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  keys = &#123;</span><br><span class="line">    &#123; &quot;&lt;c-h&gt;&quot;, &quot;&lt;cmd&gt;&lt;C-U&gt;TmuxNavigateLeft&lt;cr&gt;&quot; &#125;,</span><br><span class="line">    &#123; &quot;&lt;c-j&gt;&quot;, &quot;&lt;cmd&gt;&lt;C-U&gt;TmuxNavigateDown&lt;cr&gt;&quot; &#125;,</span><br><span class="line">    &#123; &quot;&lt;c-k&gt;&quot;, &quot;&lt;cmd&gt;&lt;C-U&gt;TmuxNavigateUp&lt;cr&gt;&quot; &#125;,</span><br><span class="line">    &#123; &quot;&lt;c-l&gt;&quot;, &quot;&lt;cmd&gt;&lt;C-U&gt;TmuxNavigateRight&lt;cr&gt;&quot; &#125;,</span><br><span class="line">    &#123; &quot;&lt;c-\\&gt;&quot;, &quot;&lt;cmd&gt;&lt;C-U&gt;TmuxNavigatePrevious&lt;cr&gt;&quot; &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Then, restart Neovim and lazy.nvim will automatically install the plugin and configure the keybindings.<br>然后，重启Neovim，lazy.nvim会自动安装这个插件并且配置键位绑定</p>
<h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>To configure the tmux side of this customization there are two options:</p>
<p>customization 定制</p>
<p>配置该定制的tmux端有两个选择:</p>
<h3 id="Add-a-snippet"><a href="#Add-a-snippet" class="headerlink" title="Add a snippet"></a>Add a snippet</h3><p>snippet 片段</p>
<p>Add the following to your ~/.tmux.conf file:<br>添加下面这些到你的<code>~/.tmux.conf</code>文件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Smart pane switching with awareness of Vim splits.</span><br><span class="line"># See: https://github.com/christoomey/vim-tmux-navigator</span><br><span class="line">is_vim=&quot;ps -o state= -o comm= -t &#x27;#&#123;pane_tty&#125;&#x27; \</span><br><span class="line">    | grep -iqE &#x27;^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$&#x27;&quot;</span><br><span class="line">bind-key -n &#x27;C-h&#x27; if-shell &quot;$is_vim&quot; &#x27;send-keys C-h&#x27;  &#x27;select-pane -L&#x27;</span><br><span class="line">bind-key -n &#x27;C-j&#x27; if-shell &quot;$is_vim&quot; &#x27;send-keys C-j&#x27;  &#x27;select-pane -D&#x27;</span><br><span class="line">bind-key -n &#x27;C-k&#x27; if-shell &quot;$is_vim&quot; &#x27;send-keys C-k&#x27;  &#x27;select-pane -U&#x27;</span><br><span class="line">bind-key -n &#x27;C-l&#x27; if-shell &quot;$is_vim&quot; &#x27;send-keys C-l&#x27;  &#x27;select-pane -R&#x27;</span><br><span class="line">tmux_version=&#x27;$(tmux -V | sed -En &quot;s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p&quot;)&#x27;</span><br><span class="line">if-shell -b &#x27;[ &quot;$(echo &quot;$tmux_version &lt; 3.0&quot; | bc)&quot; = 1 ]&#x27; \</span><br><span class="line">    &quot;bind-key -n &#x27;C-\\&#x27; if-shell \&quot;$is_vim\&quot; &#x27;send-keys C-\\&#x27;  &#x27;select-pane -l&#x27;&quot;</span><br><span class="line">if-shell -b &#x27;[ &quot;$(echo &quot;$tmux_version &gt;= 3.0&quot; | bc)&quot; = 1 ]&#x27; \</span><br><span class="line">    &quot;bind-key -n &#x27;C-\\&#x27; if-shell \&quot;$is_vim\&quot; &#x27;send-keys C-\\\\&#x27;  &#x27;select-pane -l&#x27;&quot;</span><br><span class="line"></span><br><span class="line">bind-key -T copy-mode-vi &#x27;C-h&#x27; select-pane -L</span><br><span class="line">bind-key -T copy-mode-vi &#x27;C-j&#x27; select-pane -D</span><br><span class="line">bind-key -T copy-mode-vi &#x27;C-k&#x27; select-pane -U</span><br><span class="line">bind-key -T copy-mode-vi &#x27;C-l&#x27; select-pane -R</span><br><span class="line">bind-key -T copy-mode-vi &#x27;C-\&#x27; select-pane -l</span><br></pre></td></tr></table></figure></p>
<h3 id="TPM"><a href="#TPM" class="headerlink" title="TPM"></a>TPM</h3><blockquote>
<p>感觉不如第一种直接在<code>~/.tmux.config</code>里添加</p>
</blockquote>
<p>If you prefer, you can use the Tmux Plugin Manager (TPM) instead of copying the snippet. When using TPM, add the following lines to your ~/.tmux.conf:<br>如果你更喜欢，你可以使用Tmux插件管理器（TPM）代替复制这个片段。当你使用TPM时，添加下面这几行到你的<code>~/.tmux.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set -g @plugin &#x27;christoomey/vim-tmux-navigator&#x27;</span><br></pre></td></tr></table></figure>
<p>To set a different key-binding, use the plugin configuration settings (remember to update your vim config accordingly). Multiple key bindings are possible, use a space to separate.</p>
<p>为了设置不同的键位绑定，使用插件的配置设置（因此记得更新你的vim配置)。使用空格分割可以实现多个键位绑定。</p>
<p>不要忘记运行<code>tmp</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run &#x27;~/.tmux/plugins/tpm/tpm&#x27;</span><br></pre></td></tr></table></figure>
<p>Thanks to Christopher Sexton who provided the updated tmux configuration in <a href="http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits">this blog post</a>.</p>
<p>感谢Christopher Sexton在<a href="http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits">这篇博客</a>里提供的更新过的tmux配置。</p>
<p><strong>翻译至此，已经足够形成个人完整配置</strong></p>
<p><strong>如果想定制键位，看原文的Configuration部分</strong></p>
]]></content>
      <tags>
        <tag>vim,tmux，English</tag>
      </tags>
  </entry>
  <entry>
    <title>滑动窗口(双指针)</title>
    <url>/2024/08/25/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3-%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<p>本文讲解常见算法技巧-滑动窗口（双指针），附有三道题。</p>
<span id="more"></span>
<p>参考视频：滑动窗口【基础算法精讲 03】</p>
<p><a href="https://www.bilibili.com/video/BV1hd4y1r7Gq">https://www.bilibili.com/video/BV1hd4y1r7Gq</a></p>
<p>题单：</p>
<ol>
<li>长度最小的子数组 <a href="https://leetcode.cn/problems/minimum-size-subarray-sum/solution/biao-ti-xia-biao-zong-suan-cuo-qing-kan-k81nh/">https://leetcode.cn/problems/minimum-size-subarray-sum/solution/biao-ti-xia-biao-zong-suan-cuo-qing-kan-k81nh/</a> </li>
<li>无重复字符的最长子串 <a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/solution/xia-biao-zong-suan-cuo-qing-kan-zhe-by-e-iaks/">https://leetcode.cn/problems/longest-substring-without-repeating-characters/solution/xia-biao-zong-suan-cuo-qing-kan-zhe-by-e-iaks/</a> </li>
<li>乘积小于 K 的子数组 <a href="https://leetcode.cn/problems/subarray-product-less-than-k/solution/xia-biao-zong-suan-cuo-qing-kan-zhe-by-e-jebq/">https://leetcode.cn/problems/subarray-product-less-than-k/solution/xia-biao-zong-suan-cuo-qing-kan-zhe-by-e-jebq/</a></li>
</ol>
<p>重要思想是尽可能避免暴力破解时，第二个指针无法利用原先结果，只能从第一个指针处开始遍历的问题;</p>
<p>O(n^2)</p>
<p>利用滑动窗口后，两个指针分别过一次数组即可</p>
<p>O(n)</p>
]]></content>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2024/05/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>本文主要以01背包，最长共子序列，最大子数组和等问题讲解动态规划。</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">knapsackDP</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;wgt, vector&lt;<span class="type">int</span>&gt; &amp;val, <span class="type">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = wgt.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 初始化 dp 表</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cap + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// 初始化G表追踪状态，0表示未选，1表示选了</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">selected</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(cap + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">    <span class="comment">// 状态转移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c &lt;= cap; c++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wgt[i - <span class="number">1</span>] &gt; c) &#123;</span><br><span class="line">                <span class="comment">// 若超过背包容量，则不选物品 i</span></span><br><span class="line">                dp[i][c] = dp[i - <span class="number">1</span>][c];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 不选和选物品 i 这两种方案的较大值</span></span><br><span class="line">                dp[i][c] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][c], dp[i - <span class="number">1</span>][c - wgt[i - <span class="number">1</span>]] + val[i - <span class="number">1</span>]);</span><br><span class="line">                <span class="comment">// 选取状态更新</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i][c] == dp[i - <span class="number">1</span>][c - wgt[i - <span class="number">1</span>]] + val[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    selected[i][c] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最大数值</span></span><br><span class="line">    cout &lt;&lt; dp[n][cap] &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 打印最优方案</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; selectedItems;</span><br><span class="line">    <span class="type">int</span> i = n, c = cap;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (selected[i][c]) &#123;</span><br><span class="line">            selectedItems.<span class="built_in">push_back</span>(i - <span class="number">1</span>); <span class="comment">// 保存选中的物品索引</span></span><br><span class="line">            c -= wgt[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = selectedItems.<span class="built_in">size</span>() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; selectedItems[j] + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 物品数量</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">// 背包限制</span></span><br><span class="line">    <span class="type">int</span> cap;</span><br><span class="line">    <span class="comment">// 数据输入</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; cap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 长度数组，重量数组</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">wgt</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="comment">// 数组输入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; wgt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; val[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结果计算</span></span><br><span class="line">    <span class="built_in">knapsackDP</span>(wgt, val, cap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于这段代码，在通过一个数据集时，输出为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">42</span><br><span class="line">x1 x3 x4 x6 x8 x9 x10 </span><br></pre></td></tr></table></figure>
<p>然而期望输出为</p>
<p>分析原因，并修改代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">42</span><br><span class="line">x1 x3 x4 x6 x7 x8 x10</span><br></pre></td></tr></table></figure>
<p>在你的代码中，当你在追踪选取状态时，可能出现错误。在选取状态更新部分，你使用了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (dp[i][c] == dp[i - <span class="number">1</span>][c - wgt[i - <span class="number">1</span>]] + val[i - <span class="number">1</span>]) &#123;</span><br><span class="line">    selected[i][c] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的判断条件会导致在选择物品 i 时，只能考虑到上一行的状态，而忽略了之前已经选择的物品对当前状态的影响。这就是为什么你的输出结果与期望输出不同的原因。</p>
<p>修改的方法是，在状态转移时，考虑前一次迭代的状态，而不仅仅是上一行的状态。这样可以确保在更新选取状态时，考虑到之前已经选择的物品对当前状态的影响。</p>
<p>下面是修改后的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">knapsackDP</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;wgt, vector&lt;<span class="type">int</span>&gt; &amp;val, <span class="type">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = wgt.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 初始化 dp 表</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cap + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// 初始化G表追踪状态，0表示未选，1表示选了</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">selected</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(cap + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">    <span class="comment">// 状态转移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c &lt;= cap; c++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wgt[i - <span class="number">1</span>] &gt; c) &#123;</span><br><span class="line">                <span class="comment">// 若超过背包容量，则不选物品 i</span></span><br><span class="line">                dp[i][c] = dp[i - <span class="number">1</span>][c];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 不选和选物品 i 这两种方案的较大值</span></span><br><span class="line">                dp[i][c] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][c], dp[i - <span class="number">1</span>][c - wgt[i - <span class="number">1</span>]] + val[i - <span class="number">1</span>]);</span><br><span class="line">                <span class="comment">// 选取状态更新</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i][c] == dp[i - <span class="number">1</span>][c]) &#123;</span><br><span class="line">                    selected[i][c] = <span class="literal">false</span>; <span class="comment">// 不选物品 i</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    selected[i][c] = <span class="literal">true</span>; <span class="comment">// 选物品 i</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最大数值</span></span><br><span class="line">    cout &lt;&lt; dp[n][cap] &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 打印最优方案</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; selectedItems;</span><br><span class="line">    <span class="type">int</span> i = n, c = cap;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (selected[i][c]) &#123;</span><br><span class="line">            selectedItems.<span class="built_in">push_back</span>(i - <span class="number">1</span>); <span class="comment">// 保存选中的物品索引</span></span><br><span class="line">            c -= wgt[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = selectedItems.<span class="built_in">size</span>() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; selectedItems[j] + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 物品数量</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">// 背包限制</span></span><br><span class="line">    <span class="type">int</span> cap;</span><br><span class="line">    <span class="comment">// 数据输入</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; cap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 长度数组，重量数组</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">wgt</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="comment">// 数组输入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; wgt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; val[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结果计算</span></span><br><span class="line">    <span class="built_in">knapsackDP</span>(wgt, val, cap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的修改应该会使你的代码输出期望的结果。</p>
]]></content>
  </entry>
  <entry>
    <title>电脑是怎么开机的(x86)</title>
    <url>/2024/10/08/%E7%94%B5%E8%84%91%E6%98%AF%E6%80%8E%E4%B9%88%E5%BC%80%E6%9C%BA%E7%9A%84(x86)/</url>
    <content><![CDATA[<p>本文基于b站上一个视频，介绍x86架构电脑的开机流程。主要讲解分区格式，引导程序等相关概念。</p>
<span id="more"></span>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1jdtkeCEC5/">(x86)电脑是怎么开机的</a></p>
<h3 id="BIOS简介"><a href="#BIOS简介" class="headerlink" title="BIOS简介"></a>BIOS简介</h3><p>BIOS是一种firmware(存储在主板芯片上的固件)。购买IBM-PC(一个老古董电脑)时，BIOS会被预装在电脑上。作用为初始化硬件，并引导操作系统(当时的MS-DOS)的启动。WindowsXP(2001年发布)和windows Vista(2007年发布)时期，仍为主要固件接口。但2012年WIndows 8发布，微软要求新硬件必须支持UEFI安全启动(Secure Boot),才能获得Windows 8的认证，加速了UEFI取代BIOS的进程。2020年起，所有面向Intel平台的新PC均不再支持传统的Legacy BIOS……</p>
<p>BIOS启动电脑的流程：</p>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7m1DYiq30zod2xxZG?embed=1&width=1920&height=1011" width="1920" height=" " /></p>
<h3 id="UEFI简介"><a href="#UEFI简介" class="headerlink" title="UEFI简介"></a>UEFI简介</h3><p>UEFI也是一种firmware(存储在主板芯片上的固件)。始于Intel的EFI(Extensible Firmware Interface)，后由多个科技公司接手继续开发，饼更名为UEFI(Unified EFI)。相比BIOS，UEFI引入多项改进。例如，UEFI支持GPT(GUID Partition Table)，其与BIOS的MBR相比支持更大的磁盘容量和分区数，同时支持安全启动。同时UEFI支持CSM,提供Legacy BIOS兼容模式，来支持不支持UEFI的操作系统的启动。</p>
<p>UEFI启动电脑的流程：</p>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7m1PYiq30zod2xxZG?embed=1&width=1920&height=1000" width="1920" height=" " /></p>
<p>这里的bootloader在Windows下是Windows Boot Manager,在Linux下是GRUB(GRUB2)。这里根据NVRAM中的boot entries选择合适的EFI application。</p>
<h3 id="启动方案对比"><a href="#启动方案对比" class="headerlink" title="启动方案对比"></a>启动方案对比</h3><p>UEFI+GPT相对BIOS+MBR改进：</p>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7m07Yiq30zod2xxZG?embed=1&width=1902&height=909" width="1902" height=" " /></p>
<p>这里给出不同启动方案对于分区格式的支持：</p>
<p><img src="https://1drv.ms/i/s!Ai4kpDYGStT7m1HYiq30zod2xxZG?embed=1&width=1920&height=918" width="1920" height=" " /></p>
<p>这里注意windows无法从Legay BIOS方案的GPT下启动。</p>
]]></content>
  </entry>
  <entry>
    <title>数据库实验x</title>
    <url>/2024/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8Cx/</url>
    <content><![CDATA[<p>本文基于头歌平台的数据库实验X记录SQL语言的学习过程。</p>
<span id="more"></span>
<h2 id="数据库实验一"><a href="#数据库实验一" class="headerlink" title="数据库实验一"></a>数据库实验一</h2><h2 id="数据库实验二-数据表中数据的插入、修改和删除"><a href="#数据库实验二-数据表中数据的插入、修改和删除" class="headerlink" title="数据库实验二 数据表中数据的插入、修改和删除"></a>数据库实验二 数据表中数据的插入、修改和删除</h2><h3 id="第1关：数据表中插入一条记录-对指定字段赋值"><a href="#第1关：数据表中插入一条记录-对指定字段赋值" class="headerlink" title="第1关：数据表中插入一条记录,对指定字段赋值"></a>第1关：数据表中插入一条记录,对指定字段赋值</h3><h4 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span>  <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>  (<span class="operator">&lt;</span>字段<span class="number">1</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>字段<span class="number">2</span><span class="operator">&gt;</span>…]) <span class="keyword">VALUES</span> (<span class="operator">&lt;</span>表达式<span class="number">1</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>表达式<span class="number">2</span><span class="operator">&gt;</span>…])</span><br></pre></td></tr></table></figure>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>在library数据库的reader数据表中插入一条数据<br>姓名xm为林团团，电话号码dhhm为13507311234，其余字段取默认值<br>显示数据表的所有数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use library;</span><br><span class="line"> #代码开始</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> reader (xm,dhhm) <span class="keyword">values</span> (<span class="string">'林团团'</span>,<span class="string">'13507311234'</span>);</span><br><span class="line"></span><br><span class="line"># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> reader;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意这里字段名和值都要用括号包起来。</p>
</blockquote>
<h3 id="第2关：数据表中插入一条记录，对所有字段赋值"><a href="#第2关：数据表中插入一条记录，对所有字段赋值" class="headerlink" title="第2关：数据表中插入一条记录，对所有字段赋值"></a>第2关：数据表中插入一条记录，对所有字段赋值</h3><h4 id="对所有字段赋值的插入语句"><a href="#对所有字段赋值的插入语句" class="headerlink" title="对所有字段赋值的插入语句"></a>对所有字段赋值的插入语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span>  <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">VALUES</span> (<span class="operator">&lt;</span>表达式<span class="number">1</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>表达式<span class="number">2</span><span class="operator">&gt;</span>…])</span><br></pre></td></tr></table></figure>
<h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><p>在reader数据表中插入一位读者<br>读者证号是2，姓名是陈洁，性别是女，身份是教研人员，电话号码是13319551234</p>
<p>提示：reader数据表各个字段顺序为dzzh,xm,xb,sf,dhhm</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> use library;</span><br><span class="line"> #代码开始</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> reader (xm,xb,sf,dhhm) <span class="keyword">values</span>(<span class="string">'陈洁'</span>,<span class="string">'女'</span>,<span class="string">'教研人员'</span>,<span class="string">'13319551234'</span>);</span><br><span class="line"> #代码结束</span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> reader;</span><br></pre></td></tr></table></figure>
<h3 id="第3关：数据表中插入多条记录"><a href="#第3关：数据表中插入多条记录" class="headerlink" title="第3关：数据表中插入多条记录"></a>第3关：数据表中插入多条记录</h3><h4 id="插入多条数据"><a href="#插入多条数据" class="headerlink" title="插入多条数据"></a>插入多条数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span>  <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>  (<span class="operator">&lt;</span>字段<span class="number">1</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>字段<span class="number">2</span><span class="operator">&gt;</span>…])</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="operator">&lt;</span>表达式<span class="number">11</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>表达式<span class="number">12</span><span class="operator">&gt;</span>…])，</span><br><span class="line">   (<span class="operator">&lt;</span>表达式<span class="number">21</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>表达式<span class="number">22</span><span class="operator">&gt;</span>…])，</span><br><span class="line">   (<span class="operator">&lt;</span>表达式<span class="number">31</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>表达式<span class="number">32</span><span class="operator">&gt;</span>…])……</span><br></pre></td></tr></table></figure>
<h4 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h4><p>本关任务：在reader数据表中插入多条数据<br>姓名是黄小小，性别是男，身份是研究生，电话是13316789987<br>姓名是刘大任，性别是男，身份是工作人员，电话18012341234<br>姓名是邓朝阳，性别是女，身份是研究生，电话是17716554432<br>提示：数据表reader的姓名、性别、身份、电话号码字段是xm,xb,sf,dhhm<br>读者证号是自增字段，其值会自动产生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use library;</span><br><span class="line">#代码开始</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> reader (xm,xb,sf,dhhm) <span class="keyword">values</span>(<span class="string">'黄小小'</span>,<span class="string">'男'</span>,<span class="string">'研究生'</span>,<span class="string">'13316789987'</span>),(<span class="string">'刘大任'</span>,<span class="string">'男'</span>,<span class="string">'工作人员'</span>,<span class="string">'18012341234'</span>),(<span class="string">'邓朝阳'</span>,<span class="string">'女'</span>,<span class="string">'研究生'</span>,<span class="string">'17716554432'</span>);</span><br><span class="line"> #代码结束</span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> reader;</span><br></pre></td></tr></table></figure>
<h3 id="第4关：在数据表中修改单条数据记录的单个字段的值"><a href="#第4关：在数据表中修改单条数据记录的单个字段的值" class="headerlink" title="第4关：在数据表中修改单条数据记录的单个字段的值"></a>第4关：在数据表中修改单条数据记录的单个字段的值</h3><h4 id="更新字段"><a href="#更新字段" class="headerlink" title="更新字段"></a>更新字段</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>  <span class="keyword">SET</span><span class="operator">&lt;</span>字段<span class="number">1</span><span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="number">1</span><span class="operator">&gt;</span>  [,<span class="operator">&lt;</span>字段<span class="number">2</span><span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="number">1</span><span class="operator">&gt;</span>……]  [<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>]</span><br></pre></td></tr></table></figure>
<p>对于指定数据表中符合条件的记录，用指定的表达式的值来更新指定的字段。使用UPDATE命令可以一次更新多个字段的值。WHERE &lt;条件&gt;用来指定更新的条件。</p>
<h4 id="应用-3"><a href="#应用-3" class="headerlink" title="应用"></a>应用</h4><p>将reader数据表中林团团xm的电话号码dhhm修改为17718991989</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> use library;</span><br><span class="line">#代码开始</span><br><span class="line"><span class="keyword">update</span> reader <span class="keyword">set</span> dhhm<span class="operator">=</span><span class="number">17718991989</span> <span class="keyword">where</span> xm<span class="operator">=</span><span class="string">'林团团'</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> reader;</span><br></pre></td></tr></table></figure>
<h3 id="第五关：修改多字段信息"><a href="#第五关：修改多字段信息" class="headerlink" title="第五关：修改多字段信息"></a>第五关：修改多字段信息</h3><h4 id="应用-4"><a href="#应用-4" class="headerlink" title="应用"></a>应用</h4><p>修改读者表reader的陈洁xm的电话号码dhhm为13315667745，身份为工作人员。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use library;</span><br><span class="line">#代码开始</span><br><span class="line"><span class="keyword">update</span> reader <span class="keyword">set</span> dhhm <span class="operator">=</span><span class="number">13315667745</span>,sf<span class="operator">=</span><span class="string">'工作人员'</span><span class="keyword">where</span> xm<span class="operator">=</span><span class="string">'陈洁'</span>;</span><br><span class="line">#代码结束</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> reader;</span><br></pre></td></tr></table></figure>
<h3 id="第6关：修改数据表的多条记录"><a href="#第6关：修改数据表的多条记录" class="headerlink" title="第6关：修改数据表的多条记录"></a>第6关：修改数据表的多条记录</h3><h4 id="应用-5"><a href="#应用-5" class="headerlink" title="应用"></a>应用</h4><p>将每位读者reader的读者证dzzh号加十</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use library;</span><br><span class="line">#代码开始</span><br><span class="line"><span class="keyword">update</span> reader <span class="keyword">set</span> dzzh<span class="operator">=</span>dzzh<span class="operator">+</span><span class="number">10</span>;</span><br><span class="line">#代码结束</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> reader;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意SQL语言中不能使用<code>dzzh+=10</code></p>
</blockquote>
<h3 id="第7关：删除数据表的记录"><a href="#第7关：删除数据表的记录" class="headerlink" title="第7关：删除数据表的记录"></a>第7关：删除数据表的记录</h3><h4 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件表达式;</span><br></pre></td></tr></table></figure>
<h4 id="应用-6"><a href="#应用-6" class="headerlink" title="应用"></a>应用</h4><p>删除读者reader数据表中的陈洁xm</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> use library;</span><br><span class="line"> #代码开始</span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> reader <span class="keyword">where</span> xm<span class="operator">=</span><span class="string">'陈洁'</span>;</span><br><span class="line"> #代码结束</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> reader;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意是直接<code>delete from 表名</code></p>
</blockquote>
<h3 id="第8关：删除数据表的多条记录"><a href="#第8关：删除数据表的多条记录" class="headerlink" title="第8关：删除数据表的多条记录"></a>第8关：删除数据表的多条记录</h3><h4 id="应用-7"><a href="#应用-7" class="headerlink" title="应用"></a>应用</h4><p>删除读者reader中的所有研究生sf</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use library;</span><br><span class="line">#代码开始</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> reader <span class="keyword">where</span> sf<span class="operator">=</span><span class="string">'研究生'</span>;</span><br><span class="line">#代码结束</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> reader;</span><br></pre></td></tr></table></figure>
<h3 id="第9关：删除数据表的所有数据"><a href="#第9关：删除数据表的所有数据" class="headerlink" title="第9关：删除数据表的所有数据"></a>第9关：删除数据表的所有数据</h3><h4 id="应用-8"><a href="#应用-8" class="headerlink" title="应用"></a>应用</h4><p>删除所有读者reader</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use library;</span><br><span class="line">#代码开始</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> reader;</span><br><span class="line">#代码结束</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> reader;</span><br></pre></td></tr></table></figure>
<p>非常好第九关，使我删库跑路。</p>
<h2 id="数据库实验五-函数"><a href="#数据库实验五-函数" class="headerlink" title="数据库实验五 函数"></a>数据库实验五 函数</h2><h3 id="第1关：数值函数"><a href="#第1关：数值函数" class="headerlink" title="第1关：数值函数"></a>第1关：数值函数</h3><h4 id="函数用法"><a href="#函数用法" class="headerlink" title="函数用法"></a>函数用法</h4><p>四舍五入的函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ROUND(X,D)</span><br></pre></td></tr></table></figure>
<p>返回X，其值保留到小数点后D位，而第D位的保留方式为四舍五入。<br>若D的值为0,则对小数部分四舍五入。<br>若将D设为负值，保留X值小数点左边的D位</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span>(X,D)</span><br></pre></td></tr></table></figure>
<p>返回被舍去至小数点后D位的数字X。<br>若D的值为0,则不带有小数部分。<br>将D设为负数,则截X小数点左起第D位开始后面所有低位的值</p>
<p>总结：</p>
<p><code>ROUND</code>函数四舍五入，<code>TRUNCATE</code>函数直接舍去。</p>
<h4 id="应用-9"><a href="#应用-9" class="headerlink" title="应用"></a>应用</h4><p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VYOHhiUnVJU2VGTXVPbWtEUWJ2LWs0QnBIZ3l4b2l4S28yRXVyMVhVYjc4clE_ZT12ZGJhZko.png" alt="image-20241029185641134"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gyxm,round(gz<span class="operator">*</span><span class="number">0.005</span>,<span class="number">0</span>) <span class="keyword">as</span> kf <span class="keyword">FROM</span> gzry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> gyxm,<span class="keyword">truncate</span>(gz<span class="operator">*</span><span class="number">0.005</span>,<span class="number">0</span>) <span class="keyword">as</span> kf <span class="keyword">FROM</span> gzry;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>不知道为啥，0.05才给过。</p>
</blockquote>
<h3 id="第2关：字符串函数一"><a href="#第2关：字符串函数一" class="headerlink" title="第2关：字符串函数一"></a>第2关：字符串函数一</h3><h4 id="concat字符串拼接函数"><a href="#concat字符串拼接函数" class="headerlink" title="concat字符串拼接函数"></a><code>concat</code>字符串拼接函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">concat(<span class="operator">&lt;</span>字符串<span class="number">1</span><span class="operator">&gt;</span>,<span class="operator">&lt;</span>字符串<span class="number">2</span><span class="operator">&gt;</span>,<span class="operator">&lt;</span>字符串<span class="number">3</span><span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure>
<p>将各个字符串连接起来</p>
<h4 id="rpad填充字符串到指定长度后返回"><a href="#rpad填充字符串到指定长度后返回" class="headerlink" title="rpad填充字符串到指定长度后返回"></a><code>rpad</code>填充字符串到指定长度后返回</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">rpad(<span class="operator">&lt;</span>字符串<span class="operator">&gt;</span>,<span class="operator">&lt;</span>长度<span class="operator">&gt;</span>,<span class="operator">&lt;</span>填充字符<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure>
<p>返回字符串，右面用填充字符填补，直到指定长度的字符串</p>
<h4 id="left返回字符串左边的指定长度的字符"><a href="#left返回字符串左边的指定长度的字符" class="headerlink" title="left返回字符串左边的指定长度的字符"></a><code>left</code>返回字符串左边的指定长度的字符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LEFT</span>(<span class="operator">&lt;</span>字符串<span class="operator">&gt;</span>,<span class="operator">&lt;</span>长度<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure>
<p>返回字符串的最左边的指定长度的字符</p>
<h4 id="char-length返回字符串的长度"><a href="#char-length返回字符串的长度" class="headerlink" title="char_length返回字符串的长度"></a><code>char_length</code>返回字符串的长度</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char_length</span>(<span class="operator">&lt;</span>字符串<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure>
<p>返回字符串的长度，即字符个数。</p>
<h4 id="应用-10"><a href="#应用-10" class="headerlink" title="应用"></a>应用</h4><p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VlWGdxVFJSYzlsRGg2djZXdVltWllnQldoeHIwSHhaSFMzUm90THAzMFJzU1E_ZT16bWVoQlU.png" alt="image-20241029192950163"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use sale</span><br><span class="line"> #代码开始</span><br><span class="line"> #答案一</span><br><span class="line"> <span class="keyword">SELECT</span> concat(rpad(bm,<span class="number">4</span>,<span class="string">'　'</span>),rpad(gyxm,<span class="number">4</span>,<span class="string">'　'</span>),dh) <span class="keyword">as</span> <span class="string">'ygxx'</span> <span class="keyword">FROM</span> gzry <span class="keyword">ORDER</span> <span class="keyword">BY</span> bm;</span><br><span class="line"></span><br><span class="line"> #答案二</span><br><span class="line"> <span class="keyword">SELECT</span> gyxm,dh <span class="keyword">FROM</span> gzry <span class="keyword">WHERE</span> <span class="keyword">left</span>(gyxm,<span class="number">1</span>)<span class="operator">=</span><span class="string">'王'</span> <span class="keyword">and</span> <span class="keyword">char_length</span>(gyxm)<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="第3关：字符串函数二"><a href="#第3关：字符串函数二" class="headerlink" title="第3关：字符串函数二"></a>第3关：字符串函数二</h3><h4 id="insert字符串插入函数"><a href="#insert字符串插入函数" class="headerlink" title="insert字符串插入函数"></a><code>insert</code>字符串插入函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span>(<span class="operator">&lt;</span>字符串<span class="operator">&gt;</span>,<span class="operator">&lt;</span>位置<span class="operator">&gt;</span>,<span class="operator">&lt;</span>长度<span class="operator">&gt;</span>,<span class="operator">&lt;</span>插入的字符串<span class="operator">&gt;</span>) </span><br></pre></td></tr></table></figure>
<p>返回一个字符串，将字符串中指定位置的指定长度的字符删除，插入指定的字符串。</p>
<h4 id="space空格生成函数"><a href="#space空格生成函数" class="headerlink" title="space空格生成函数"></a><code>space</code>空格生成函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">space(<span class="operator">&lt;</span>整数<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure>
<p>返回指定整数的空格</p>
<h4 id="mid返回中间指定长度的字符串"><a href="#mid返回中间指定长度的字符串" class="headerlink" title="mid返回中间指定长度的字符串"></a><code>mid</code>返回中间指定长度的字符串</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mid(<span class="operator">&lt;</span>字符串<span class="operator">&gt;</span>,<span class="operator">&lt;</span>指定位置<span class="operator">&gt;</span>,<span class="operator">&lt;</span>指定长度<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure>
<p>返回字符串从指定位置开始的指定长度的字符串</p>
<h4 id="right返回右边指定长度的字符串"><a href="#right返回右边指定长度的字符串" class="headerlink" title="right返回右边指定长度的字符串"></a><code>right</code>返回右边指定长度的字符串</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">right</span>(<span class="operator">&lt;</span>字符串<span class="operator">&gt;</span>,<span class="operator">&lt;</span>指定长度<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure>
<p>返回字符串右边的指定长度的字符串</p>
<h4 id="replace字符串替换函数"><a href="#replace字符串替换函数" class="headerlink" title="replace字符串替换函数"></a><code>replace</code>字符串替换函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">replace(<span class="operator">&lt;</span>字符串<span class="operator">&gt;</span>,<span class="operator">&lt;</span>源字符串<span class="operator">&gt;</span>,<span class="operator">&lt;</span>目标字符串<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure>
<p>返回一个字符串，将字符串中所有的源字符串用目标字符串代替。</p>
<h4 id="应用-11"><a href="#应用-11" class="headerlink" title="应用"></a>应用</h4><p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0Vhbnpqb0FOM1BKTW9qYWswTmE2UDFvQjZuMDdoclpXLTJIYXVjUVFfTlR6ZUE_ZT1zbWlpbDY.png" alt="image-20241029201938073"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 第一问：显示每位顾客的姓名，两个字的中间插入两个空格，三个字的直接显示,列名为xm</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">case</span></span><br><span class="line">	<span class="keyword">when</span> <span class="keyword">char_length</span>(name)<span class="operator">=</span> <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">insert</span>(name,<span class="number">2</span>,<span class="number">0</span>,<span class="string">'  '</span>)</span><br><span class="line">	<span class="keyword">else</span> name</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">as</span> xm <span class="keyword">from</span> gk;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>​    这里关键点有三个：</p>
<ol>
<li><code>case- when - then - else - end</code>语句：注意不要漏掉任何一块，漏掉即无法运行</li>
</ol>
<p>​    2.注意<code>insert</code>函数可以在以上控制流中并非独立单元，而是返回一个处理好的字符串</p>
<p>​    3. 注意数据插入时，从角标2开始插入</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 第二问显示每位顾客的姓名和电话（dh)，电话按照<span class="number">999</span><span class="number">-9999</span><span class="number">-9999</span>的格式显示</span><br><span class="line"># 解法<span class="number">1</span></span><br><span class="line"># 使用插入实现</span><br><span class="line"><span class="keyword">select</span> name,<span class="keyword">insert</span>(<span class="keyword">insert</span>(tel,<span class="number">4</span>,<span class="number">0</span>,<span class="string">'-'</span>),<span class="number">9</span>,<span class="number">0</span>,<span class="string">'-'</span>)<span class="keyword">as</span> dh <span class="keyword">from</span> gk;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>还有就是不要忘了用as命名insert返回的字符串的字段名，不是原来的了</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 第二问显示每位顾客的姓名和电话（dh)，电话按照<span class="number">999</span><span class="number">-9999</span><span class="number">-9999</span>的格式显示</span><br><span class="line"># 解法<span class="number">2</span></span><br><span class="line"># 使用拼接实现</span><br><span class="line"><span class="keyword">select</span> name,concat(<span class="keyword">left</span>(tel,<span class="number">3</span>),<span class="string">'-'</span>,mid(tel,<span class="number">4</span>,<span class="number">4</span>),<span class="string">'-'</span>,<span class="keyword">right</span>(tel,<span class="number">4</span>)) <span class="keyword">as</span> dh <span class="keyword">from</span> gk;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 第三问将顾客数据表中单位(dept)中的新一佳用佳惠替换</span><br><span class="line"><span class="keyword">select</span> name,(replace(dept,<span class="string">'新一佳'</span>,<span class="string">'佳惠'</span>) <span class="keyword">as</span> dept) <span class="keyword">from</span> gk;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个很简单，直接替换源字符串为目的字符串即可</p>
</blockquote>
<h3 id="第4关：日期函数"><a href="#第4关：日期函数" class="headerlink" title="第4关：日期函数"></a>第4关：日期函数</h3><h4 id="year函数返回年号"><a href="#year函数返回年号" class="headerlink" title="year函数返回年号"></a><code>year</code>函数返回年号</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">year</span>(日期)</span><br></pre></td></tr></table></figure>
<p>返回日期的年号</p>
<h4 id="month函数返回月号"><a href="#month函数返回月号" class="headerlink" title="month函数返回月号"></a><code>month</code>函数返回月号</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">month</span>(日期)</span><br></pre></td></tr></table></figure>
<p>返回日期的月号</p>
<h4 id="datediff函数返回日期相差天数"><a href="#datediff函数返回日期相差天数" class="headerlink" title="datediff函数返回日期相差天数"></a><code>datediff</code>函数返回日期相差天数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">datediff(日期<span class="number">1</span>，日期<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>返回两个日期相差的天数</p>
<h4 id="应用-12"><a href="#应用-12" class="headerlink" title="应用"></a>应用</h4><p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VSLXphMERSa0U5SmpTcnAxaXR6RDhvQnlvSm04OHBZS1FMOHRfSTNHM2JqaXc_ZT1sajdPZUo.png" alt="image-20241029212324174"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">month</span>(xsrq) <span class="keyword">as</span> yf,<span class="built_in">sum</span>(sjfk) <span class="keyword">from</span> xsd <span class="keyword">group</span> <span class="keyword">by</span> yf;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>根本不会<code>group by</code>相关操作，要学下了</p>
</blockquote>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VlSEZoWEFTa0poTXU5Z0s4NmtzODVvQnFVaWtfMTYzb0dBV1NJZkc3eDl0dVE_ZT04NGh3TG4.png" alt="image-20241029214609547"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> borrow.dzzh,</span><br><span class="line">if(datediff(borrow.hsrq,borrow.jsrq)<span class="operator">&gt;</span><span class="number">30</span>,(datediff(borrow.hsrq,borrow.jsrq)<span class="number">-30</span>)<span class="operator">*</span>book.sj<span class="operator">*</span><span class="number">0.01</span>,<span class="number">0</span>) </span><br><span class="line"><span class="keyword">as</span> fk <span class="keyword">from</span> borrow <span class="keyword">join</span> book <span class="keyword">on</span> borrow.txm<span class="operator">=</span>book.txm</span><br><span class="line"><span class="keyword">where</span> datediff(borrow.hsrq,borrow.jsrq)<span class="operator">&gt;</span><span class="number">30</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>if语句块结构:</p>
<p>if(条件，条件为真时行为，条件为假时行为)</p>
<p>查询两个表<strong>必须</strong>首先进行连接：</p>
<p>表1 join 表2 on 表一表二的相同字段相等(连接条件)</p>
</blockquote>
<h3 id="第5关：条件函数"><a href="#第5关：条件函数" class="headerlink" title="第5关：条件函数"></a>第5关：条件函数</h3><h4 id="if条件函数"><a href="#if条件函数" class="headerlink" title="if条件函数"></a><code>if</code>条件函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(关系表达式,值<span class="number">1</span>,值<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>当条件表达式为真，返回值1，否则返回值2</p>
<h4 id="when条件函数"><a href="#when条件函数" class="headerlink" title="when条件函数"></a><code>when</code>条件函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span> <span class="keyword">when</span> <span class="operator">&lt;</span>条件<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">then</span> <span class="operator">&lt;</span>值<span class="number">1</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">when</span> <span class="operator">&lt;</span>条件<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">then</span> <span class="operator">&lt;</span>值<span class="number">2</span><span class="operator">&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span> <span class="operator">&lt;</span>值n<span class="operator">+</span><span class="number">1</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>若表达式的值为条件1则返回值1，否则若表达式的值为条件2则返回值1……若都不相同则返回值n+1</p>
<h4 id="应用-13"><a href="#应用-13" class="headerlink" title="应用"></a>应用</h4><p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0Vmc0R3VTc2UWN0Smdtb19wb2czaXQwQnV6Mk03SkRPY0I5WVhqekpOTDRTeHc_ZT1RZEs3UjI.png" alt="image-20241031140921423"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> gyxm,if(gz<span class="operator">&lt;</span><span class="number">2000</span>,<span class="number">50</span>,<span class="number">200</span>) <span class="keyword">as</span> fy <span class="keyword">from</span> gzry;</span><br></pre></td></tr></table></figure>
<p><img src="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL2kvYy9mYmQ0NGEwNjM2YTQyNDJlL0VWc2tMdnNpeDNsSG90eF84NEp4QUhzQjl1OGVfa2YzbjA3Q1BxNnZwREV2MGc_ZT1vaTV5SWc.png" alt="image-20241031140940789"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> gyxm,<span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> bm<span class="operator">=</span><span class="string">'销售部'</span> <span class="keyword">then</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">when</span> bm<span class="operator">=</span><span class="string">'办公室'</span> <span class="keyword">then</span> <span class="number">800</span></span><br><span class="line"><span class="keyword">when</span> bm<span class="operator">=</span><span class="string">'采购部'</span> <span class="keyword">then</span> <span class="number">500</span></span><br><span class="line"><span class="keyword">when</span> bm<span class="operator">=</span><span class="string">'仓库'</span>   <span class="keyword">then</span> <span class="number">300</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">as</span> jt <span class="keyword">from</span> gzry;</span><br></pre></td></tr></table></figure>
<h2 id="数据库实验六-索引"><a href="#数据库实验六-索引" class="headerlink" title="数据库实验六 索引"></a>数据库实验六 索引</h2><h4 id="建立数据表的同时建立索引"><a href="#建立数据表的同时建立索引" class="headerlink" title="建立数据表的同时建立索引"></a>建立数据表的同时建立索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TABLE</span>  table_name </span><br><span class="line">    ([col_name data_type]</span><br><span class="line">    [<span class="keyword">PRIMARY</span><span class="operator">|</span><span class="keyword">UNIQUE</span>][<span class="operator">|</span>INDEX<span class="operator">|</span>KEY]     </span><br><span class="line">    [index_name] (index_col_name [length])</span><br><span class="line">    [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]) </span><br></pre></td></tr></table></figure>
<p>table_name数据表的名称<br>primary主索引<br>unique唯一索引<br>index_name索引名<br>index_col_name索引列的名称</p>
<p>显示索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">SHOW</span> </span><br><span class="line">{INDEX<span class="operator">|</span>INDEXES<span class="operator">|</span>KEYS}</span><br><span class="line">{<span class="keyword">FROM</span><span class="operator">|</span><span class="keyword">IN</span>}   [db_name .]table_name </span><br><span class="line">[[<span class="keyword">FROM</span><span class="operator">|</span><span class="keyword">IN</span>] db_name ]</span><br><span class="line">[\G ]</span><br></pre></td></tr></table></figure>
<h4 id="应用-14"><a href="#应用-14" class="headerlink" title="应用"></a>应用</h4><p>在sale数据库中，建立供应商数据表gys，包括供应商号gysh 字符型4位、公司名称 可变长字符型20位、电话 可变长字符型11位、地址 可变长字符型20位、联系人 可变长字符型4位、手机 字符型11位 字段，同时根据供应商号字段建立主索引。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> gys(</span><br><span class="line">	gysh <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">primary</span> key,</span><br><span class="line">    gmsc <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    dh <span class="type">varchar</span>(<span class="number">11</span>),</span><br><span class="line">    dz <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    lxr <span class="type">varchar</span>(<span class="number">4</span>),</span><br><span class="line">    sj <span class="type">char</span>(<span class="number">11</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> gys;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>声明的多个类型间使用逗号分割</p>
<p>主索引的声明是<code>primary key</code></p>
<p>索引的查看是<code>show index from 表名</code>,不要漏掉<code>from</code></p>
<p><code>create</code>语句的<code>;</code>别忘了。</p>
</blockquote>
<h3 id="第2关：在已有的数据表建立索引"><a href="#第2关：在已有的数据表建立索引" class="headerlink" title="第2关：在已有的数据表建立索引"></a>第2关：在已有的数据表建立索引</h3><h4 id="主索引建立"><a href="#主索引建立" class="headerlink" title="主索引建立"></a>主索引建立</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 数据表名 <span class="keyword">add</span> <span class="keyword">primary</span> key 索引名(字段名)</span><br></pre></td></tr></table></figure>
<h4 id="其他索引建立"><a href="#其他索引建立" class="headerlink" title="其他索引建立"></a>其他索引建立</h4><h5 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名 <span class="keyword">on</span> 表名(字段名);</span><br></pre></td></tr></table></figure>
<h5 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index 索引名 <span class="keyword">on</span> 表名(字段名);</span><br></pre></td></tr></table></figure>
<h4 id="应用-15"><a href="#应用-15" class="headerlink" title="应用"></a>应用</h4><p>第一题<br>在xsdmx数据表根据销售单编号xsdh和序号xh两个字段建立主索引xsdxh</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> xsdmx <span class="keyword">add</span> <span class="keyword">primary</span> key xsdxh(xsdh,xh);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主索引建立方式区别其他索引</p>
</blockquote>
<p>第二题<br>在xsdmx数据表根据商品编号sph字段建立普通索引sphsy。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index sphsy <span class="keyword">on</span> xsdmx(sph);</span><br></pre></td></tr></table></figure>
<p>第三题<br>在商品sp数据表根据商品名spm字段建立唯一索引spmsy。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index <span class="keyword">on</span> sp(spm);</span><br></pre></td></tr></table></figure>
<h3 id="第3关：删除索引"><a href="#第3关：删除索引" class="headerlink" title="第3关：删除索引"></a>第3关：删除索引</h3><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index 索引名 <span class="keyword">on</span> 表名;</span><br></pre></td></tr></table></figure>
<h4 id="应用-16"><a href="#应用-16" class="headerlink" title="应用"></a>应用</h4><p>删除sp商品数据表的索引spmsy</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index spmsy <span class="keyword">on</span> sp;</span><br></pre></td></tr></table></figure>
<h2 id="实验七-数据完整性"><a href="#实验七-数据完整性" class="headerlink" title="实验七 数据完整性"></a>实验七 数据完整性</h2><h3 id="第1关：通过主索引设置实体完整性"><a href="#第1关：通过主索引设置实体完整性" class="headerlink" title="第1关：通过主索引设置实体完整性"></a>第1关：通过主索引设置实体完整性</h3><h4 id="主索引建立-1"><a href="#主索引建立-1" class="headerlink" title="主索引建立"></a>主索引建立</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 数据表名 <span class="keyword">add</span> <span class="keyword">primary</span> key 索引名(字段名)</span><br></pre></td></tr></table></figure>
<h4 id="应用-17"><a href="#应用-17" class="headerlink" title="应用"></a>应用</h4><p>对于图书数据表book（已经建立并插入记录），根据条形码（txm)、建立一个主索引,保证数据表中每本书的条形码是唯一的，即实体完整性</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">primary</span> key pk(txm);</span><br></pre></td></tr></table></figure>
<h3 id="第2关：通过check设置域完整性"><a href="#第2关：通过check设置域完整性" class="headerlink" title="第2关：通过check设置域完整性"></a>第2关：通过check设置域完整性</h3><h4 id="设置check约束"><a href="#设置check约束" class="headerlink" title="设置check约束"></a>设置<code>check</code>约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>数据表名<span class="operator">&gt;</span> <span class="keyword">add</span> <span class="keyword">constraint</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span> <span class="keyword">check</span> <span class="operator">&lt;</span>约束条件<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="应用-18"><a href="#应用-18" class="headerlink" title="应用"></a>应用</h4><p>对于图书数据表book（已经建立并插入记录），对于价格字段sj设置约束sjgd,要求价格必须大于0且小于等于5000</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">add</span> <span class="keyword">constraint</span> sjgd <span class="keyword">check</span> (<span class="number">0</span><span class="operator">&lt;</span>sj <span class="keyword">and</span> sj<span class="operator">&lt;=</span><span class="number">5000</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意这里的约束条件需要用小括号包裹</p>
</blockquote>
<h3 id="第3关：设置借阅表和读者表的参照完整性"><a href="#第3关：设置借阅表和读者表的参照完整性" class="headerlink" title="第3关：设置借阅表和读者表的参照完整性"></a>第3关：设置借阅表和读者表的参照完整性</h3><h4 id="设置参照完整性"><a href="#设置参照完整性" class="headerlink" title="设置参照完整性"></a>设置参照完整性</h4><p>在数据表之间增加参照完整性的命令如下所示</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 子表 <span class="keyword">add</span></span><br><span class="line">[<span class="keyword">CONSTRAINT</span> 外键名]</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (字段名) </span><br><span class="line"><span class="keyword">REFERENCES</span> 主表(主键列)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span> restrict<span class="operator">|</span>cascade<span class="operator">|</span><span class="keyword">set</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">delete</span> restrict<span class="operator">|</span>cascade<span class="operator">|</span><span class="keyword">set</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>constraint</code>约束</p>
</blockquote>
<p>在设置参照完整性后，当主表中没有相关数据时，子表中无法插入对应的记录。</p>
<p>如果delete设置为cascade,在删除主表数据的时候，子表的数据将同时被删除;<br>如果delete设置为restrit,子表中存在数据时，主表的数据将无法删除<br>如果delete设置为set null,在删除主表数据的时候，子表的数据被设置为null值<br>(该列可以设置为null值的情况下)</p>
<p>如果update设置为cascade,在修改主表的关键字段的值的时候，子表中相关数据的字段的值将同时被修改;<br>如果update被设置为restrit,子表中存在数据时，主表的相关数据的关键字段的值将无法修改<br>如果update设置为set null,在修改主表的关键字段的值的时候，子表中相关数据的字段的值将被设置为null<br>(该列可以设置为null值的情况下)</p>
<h4 id="应用-19"><a href="#应用-19" class="headerlink" title="应用"></a>应用</h4><p>在借阅表和读者表设置参照完整性<br>当删除读者表的数据时，借阅表的相关记录一起删除<br>当修改读者表的读者证号时，借阅表的相关记录的读者证号一起被修改</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  use library;</span><br><span class="line"> #代码开始</span><br><span class="line"> <span class="keyword">alter</span> <span class="keyword">table</span> borrow <span class="keyword">add</span> </span><br><span class="line"> <span class="keyword">foreign</span> key (dzzh) <span class="keyword">references</span> reader(dzzh)</span><br><span class="line"> <span class="keyword">on</span> <span class="keyword">delete</span> cascade <span class="keyword">on</span> <span class="keyword">update</span> cascade;</span><br><span class="line"> #代码结束</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> reader <span class="keyword">where</span> dzzh<span class="operator">=</span>"001";</span><br><span class="line"><span class="keyword">update</span> reader <span class="keyword">set</span> dzzh<span class="operator">=</span>"111" <span class="keyword">where</span> dzzh<span class="operator">=</span>"002";</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> borrow;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意所有字段名都要用括号包裹起来</p>
</blockquote>
<h3 id="第4关：设置借阅表和图书表的参照完整性"><a href="#第4关：设置借阅表和图书表的参照完整性" class="headerlink" title="第4关：设置借阅表和图书表的参照完整性*"></a>第4关：设置借阅表和图书表的参照完整性*</h3><h4 id="应用-20"><a href="#应用-20" class="headerlink" title="应用"></a>应用</h4><p>在借阅表和图书表设置参照完整性<br>当借阅表有某个条形码的记录，就不能删除图书表中相关的图书，也不能修改图书表中相关图书的条形码。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use library</span><br><span class="line">#代码开始</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> borrow <span class="keyword">ADD</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (txm) <span class="keyword">REFERENCES</span> book(txm) </span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT;</span><br><span class="line">#代码结束</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> book <span class="keyword">where</span> txm<span class="operator">=</span>"P0000001";</span><br></pre></td></tr></table></figure>
<h3 id="第5关：建立数据表并设置参照完整性"><a href="#第5关：建立数据表并设置参照完整性" class="headerlink" title="第5关：建立数据表并设置参照完整性*"></a>第5关：建立数据表并设置参照完整性*</h3><h4 id="应用-21"><a href="#应用-21" class="headerlink" title="应用"></a>应用</h4><p>建立期刊qk数据表和期刊借阅qkjy数据表<br>期刊qk数据表有6个字段，如下所示<br>期刊条码qktxm varchar 10<br>期刊名称qkmc varchar 20<br>刊号kh varchar 10<br>卷号jh varchar 10<br>出版单位cbdw varchar 20<br>价格jg decimal4,1字段<br>期刊借阅qkjy数据表有4个字段，如下所示<br>读者证号dzzh tinyint 3 unsigned zerofill<br>期刊条码qktm varchar 10<br>借阅日期jyrq date<br>还书日期 hsrq date<br>在建立期刊借阅数据表时，与读者表建立关联。<br>当修改读者表的读者证号，借阅期刊表的相关会删除。当删除读者表的读者证号，借阅期刊表的相关记录会删除。<br>在建立期刊借阅数据表时，同时与期刊表建立关联。不允许修改和删除期刊数据表的相关数据。<br>注意：期刊数据表需要根据期刊号建立主索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use library;</span><br><span class="line">#代码开始</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qk (</span><br><span class="line">  qktxm <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  qkmc <span class="type">VARCHAR</span>(<span class="number">20</span>) ,</span><br><span class="line">  kh <span class="type">VARCHAR</span>(<span class="number">10</span>) ,</span><br><span class="line">  jh <span class="type">VARCHAR</span>(<span class="number">10</span>) ,</span><br><span class="line">  cbdw <span class="type">VARCHAR</span>(<span class="number">20</span>) ,</span><br><span class="line">  jg <span class="type">DECIMAL</span>(<span class="number">4</span>,<span class="number">1</span>) );</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> qkjy (</span><br><span class="line">  dzzh TINYINT(<span class="number">3</span>) UNSIGNED ZEROFILL,</span><br><span class="line">  qktxm <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  jyrq <span class="type">DATE</span>,</span><br><span class="line">  hsrq <span class="type">DATE</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY (dzzh) <span class="keyword">REFERENCES</span> reader(dzzh) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE,</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY (qktxm) <span class="keyword">REFERENCES</span> qk(qktxm) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT</span><br><span class="line">) ;</span><br><span class="line">#代码结束</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> qkjy;</span><br></pre></td></tr></table></figure>
<h3 id="第6关：删除参照完整性"><a href="#第6关：删除参照完整性" class="headerlink" title="第6关：删除参照完整性"></a>第6关：删除参照完整性</h3><h4 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>数据表名<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">foreign</span> key <span class="operator">&lt;</span>外键名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="应用-22"><a href="#应用-22" class="headerlink" title="应用"></a>应用</h4><p>删除借阅数据表和图书数据表的外键，名字为<code>borrow_ibfk_1</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use library; </span><br><span class="line">#代码开始</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> borrow <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY borrow_ibfk_1;</span><br><span class="line">#代码结束</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> borrow;</span><br></pre></td></tr></table></figure>
<h2 id="实验八-视图"><a href="#实验八-视图" class="headerlink" title="实验八 视图"></a>实验八 视图</h2><h3 id="第一关：建立基于单表的视图，在视图中插入、删除和修改记录"><a href="#第一关：建立基于单表的视图，在视图中插入、删除和修改记录" class="headerlink" title="第一关：建立基于单表的视图，在视图中插入、删除和修改记录"></a>第一关：建立基于单表的视图，在视图中插入、删除和修改记录</h3><h4 id="应用-23"><a href="#应用-23" class="headerlink" title="应用"></a>应用</h4><p>第一题<br>建立视图ckyg，查询gzry数据表中部门bm为仓库的员工的所有字段的信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">crete <span class="keyword">view</span> ckyg <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> gzry <span class="keyword">where</span> bm<span class="operator">=</span><span class="string">'仓库'</span>;</span><br></pre></td></tr></table></figure>
<p>第二题<br>在视图ckyg中，插入gyh雇员号为019，姓名gyxm为李盛，部门bm为仓库的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ckyg(gyh,gyxm,bm)<span class="keyword">values</span>(<span class="string">'019'</span>,<span class="string">'李盛'</span>,<span class="string">'仓库'</span>);</span><br></pre></td></tr></table></figure>
<p>第三题<br>在视图ckyg中，删除姓名为赵国庆的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> ckyg <span class="keyword">where</span> gyxm<span class="operator">=</span><span class="string">'赵国庆'</span>;</span><br></pre></td></tr></table></figure>
<p>第四题<br>在视图ckyg中，将王文武的电话改为13319660678</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> ckyg <span class="keyword">set</span> dh<span class="operator">=</span><span class="string">'13319660678'</span> <span class="keyword">where</span> gyxm<span class="operator">=</span><span class="string">'王文武'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="第2关：根据多个数据表建立视图"><a href="#第2关：根据多个数据表建立视图" class="headerlink" title="第2关：根据多个数据表建立视图"></a>第2关：根据多个数据表建立视图</h3><h4 id="应用-24"><a href="#应用-24" class="headerlink" title="应用"></a>应用</h4><p>建立xsdxx视图，包含销售单号xsdh、雇员号gyh、雇员姓名gyxm、会员号hyh、会员姓名name、销售日期xsrq、实际付款sjfk字段。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> use sale;</span><br><span class="line"> #代码开始</span><br><span class="line"> # <span class="keyword">describe</span> gzry;</span><br><span class="line"> # <span class="keyword">describe</span> xsd;</span><br><span class="line"> # <span class="keyword">describe</span> gk;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> xsdxx <span class="keyword">as</span> <span class="keyword">select</span> xsd.xsdh,xsd.gyh,gzry.gyxm,xsd.hyh,gk.name,xsd.xsrq,xsd.sjfk</span><br><span class="line"><span class="keyword">from</span> xsd</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> gzry <span class="keyword">on</span>  gzry.gyh<span class="operator">=</span>xsd.gyh</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> gk <span class="keyword">on</span>  gk.hyh<span class="operator">=</span>xsd.hyh;</span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> xsdxx;</span><br></pre></td></tr></table></figure>
<h3 id="第3关：根据视图建立视图"><a href="#第3关：根据视图建立视图" class="headerlink" title="第3关：根据视图建立视图*"></a>第3关：根据视图建立视图*</h3><h4 id="应用-25"><a href="#应用-25" class="headerlink" title="应用"></a>应用</h4><p>第一题：<br>根据xsdxx视图建立视图xsdhytj,显示会员号hyh，姓名name和实际付款sjfk的合计金额(命名为hjje)<br>按合计金额的降序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> hytjcx <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> hyh, name, <span class="built_in">SUM</span>(sjfk) <span class="keyword">AS</span> hjje</span><br><span class="line"><span class="keyword">FROM</span> xsdxx</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> hyh, name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hjje <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意这里用到了sum函数，因此需要使用<code>group by</code>分组</p>
</blockquote>
<p>第二题：<br>根据xsdxx视图建立视图xsdgytj,显示雇员号gyh，姓名xm和实际付款sjfk的合计金额(命名为hjje)<br>按合计金额的降序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> gytjcx <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> gyh, gyxm, <span class="built_in">SUM</span>(sjfk) <span class="keyword">AS</span> hjje</span><br><span class="line"><span class="keyword">FROM</span> xsdxx</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> gyh</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hjje <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<h3 id="第4关：更新视图"><a href="#第4关：更新视图" class="headerlink" title="第4关：更新视图"></a>第4关：更新视图</h3><h4 id="应用-26"><a href="#应用-26" class="headerlink" title="应用"></a>应用</h4><p>在视图xsdxx中，将工作人员gyxm王强的销售日期xsrq2015-6-3的会员名name刘海东的订单的实际付款sjfk设置为800<br>观察视图xsdgytj和xsdhytj的变化</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use sale;</span><br><span class="line">#代码开始</span><br><span class="line"> </span><br><span class="line"><span class="keyword">UPDATE</span> xsdxx</span><br><span class="line"><span class="keyword">SET</span> sjfk <span class="operator">=</span> <span class="number">800</span></span><br><span class="line"><span class="keyword">WHERE</span> gyxm <span class="operator">=</span> <span class="string">'王强'</span> <span class="keyword">AND</span> xsrq <span class="operator">=</span> <span class="string">'2015-6-3'</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">'刘海东'</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #代码结束</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> xsdhytj;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> xsdgytj;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>编译原理</title>
    <url>/2024/03/29/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>本文主要是对编译语言各个部分的导航。</p>
<span id="more"></span>
<p>词法分析，语法分析，语义分析，抽象语法树生成</p>
<p>说明什么的都在这里了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:dingdingqiuqiu/PL0.git</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>计算机系统基础NJU</title>
    <url>/2023/11/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80NJU/</url>
    <content><![CDATA[<p>本文是对《计算机系统基础》一书中第一章C语言中字面量数据类型认定实验的复现,主要涉及C语言字面量数据类型，gcc编译32位程序两个知识点。重点在于计算机在进行比较时不会先看正负号认定数据类型，而是根据数据绝对值的大小认定。<br><span id="more"></span></p>
<h2 id="c语言数值常量的类型"><a href="#c语言数值常量的类型" class="headerlink" title="c语言数值常量的类型"></a>c语言数值常量的类型</h2><p>安装<code>gcc</code>多平台编译工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S gcc-multilib    </span><br></pre></td></tr></table></figure>
<p>安装32位程序所需的<code>libc</code>库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S lib32-glibc lib32-gcc-libs</span><br></pre></td></tr></table></figure>
<p>实验代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-2147483648</span>&gt;<span class="number">2147483647</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;false!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;true!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实验结果</p>
<p><img src="https://onedrive.live.com/embed?resid=FBD44A0636A4242E%212635&authkey=%21ANiKrfTOh3bHFkY&width=1914&height=374" width="1914" height="" /></p>
<p>关键点在于理解计算机先不管符号，根据<code>2127483648</code>确定类型为<code>unsigned int</code>，再加上符号，对<code>0x80000000</code>进行补码转换又得到<code>0x80000000</code>，由于先前已经确定<code>unsigned int</code>类型，所以比较时，以<code>2147483648(0x80000000)</code>和<code>2147483647(0x7fffffff)</code>比较，满足大于条件，输出<code>false</code>。</p>
<p>参考下文：</p>
<p><a href="https://blog.csdn.net/gzxb1995/article/details/104334278">计算机系统基础读书笔记摘要</a></p>
]]></content>
      <categories>
        <category>OS</category>
        <category>date</category>
      </categories>
      <tags>
        <tag>C语言字面量的数据类型</tag>
        <tag>gcc编译32位程序</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理(一).词法分析</title>
    <url>/2024/03/29/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E4%B8%80-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>本文介绍了正则表达式</p>
<span id="more"></span>
<p>github.com/riscv/riscv-gcc</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><blockquote>
<p>正则表达式是语法</p>
<p> 正则语言是语义</p>
<p>正则表达式定义了一个正则语言，为集合</p>
<p>形如L(正则表达式)</p>
</blockquote>
<p>eg.C语言标识符的正则表达式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">^[a-zA-Z_](a-zA-Z\d)*$</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>^</code>和<code>$</code>限定在一行中匹配</p>
<p><code>[a-zA-Z_]</code>表示以下划线或大小写字母开头</p>
<p><code>(a-zA-Z\d)*</code>表示开头跟着0个或多个字母或数字</p>
</blockquote>
<p>eg.C语言单行注释</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">\/\/.</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>\/</code>匹配<code>/</code>的字面值</p>
<p><code>.</code>匹配除了换行外的所有</p>
<p>无需加<code>^</code>匹配开头</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>; <span class="comment">//这里的注释并非从开头写的也有效</span></span><br></pre></td></tr></table></figure>
<p>eg.C语言多行注释</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">\/\*[\s\S]*?\*/\</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>\/\*\*\/</code>是多行注释的字面形式</p>
<p><code>[\s\S]*?</code>的作用是匹配任意字符</p>
<p><code>\s</code> 表示空白字符（包括空格、制表符、换行符等）</p>
<p><code>\S</code> 则表示非空白字符。</p>
<p><code>*</code>表示匹配一次或多次</p>
<p><code>?</code>用来尽可能减少匹配次数，遇到第一个<code>*/</code>停止</p>
</blockquote>
<p>eg.三的倍数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(<span class="number">0</span>|(<span class="number">1</span>(<span class="number">01</span>*<span class="number">0</span>)*<span class="number">1</span>))*</span><br></pre></td></tr></table></figure>
<h3 id="Flex代码编写"><a href="#Flex代码编写" class="headerlink" title="Flex代码编写"></a>Flex代码编写</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="手撸代码"><a href="#手撸代码" class="headerlink" title="手撸代码"></a>手撸代码</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// PL/0 demo</span><br><span class="line"></span><br><span class="line">(*</span><br><span class="line">	This is a multi-line</span><br><span class="line">	comment</span><br><span class="line">*)</span><br><span class="line"></span><br><span class="line">const limit=10;</span><br><span class="line">var n, f, test, t1, t2;</span><br><span class="line">begin</span><br><span class="line">     n := 0;</span><br><span class="line">     f := 1;</span><br><span class="line">     while n # limit do</span><br><span class="line">     begin</span><br><span class="line">          n := n + 1;</span><br><span class="line">          f := f * n;</span><br><span class="line">     end;</span><br><span class="line">     test := 1+2-3*4/(5-6)+-7;</span><br><span class="line">	t1:=test*2;</span><br><span class="line">	t2:=t1+test;</span><br><span class="line">     call print;	// print all var</span><br><span class="line">end.</span><br></pre></td></tr></table></figure>
<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p><strong>实验要求：</strong></p>
<p>1.合并空白符：把原始程序中相邻的空格、制表符、回车等空白符合并成一个空格，便于后续处理</p>
<p>2.消除注释：消除原始程序中的注释内容；PL/0语法中没有规定注释的格式，参照Pascal语言规定如下两种注释格式：</p>
<ul>
<li><p>单行注释：“//”引导内容，与C++语言中单行注释一致。</p>
</li>
<li><p>多行注释：“(*”和“*)”之间内容，具体参见后面示例程序。</p>
</li>
</ul>
<h4 id="删除注释"><a href="#删除注释" class="headerlink" title="删除注释"></a>删除注释</h4><p>代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">removeComments</span><span class="params">(<span class="type">char</span> *source, <span class="type">char</span> *destination)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(source);</span><br><span class="line">    <span class="type">int</span> inSingleLineComment = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> inMultiLineComment = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!inSingleLineComment &amp;&amp; !inMultiLineComment) &#123;</span><br><span class="line">            <span class="keyword">if</span> (source[i] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; source[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                inSingleLineComment = <span class="number">1</span>;</span><br><span class="line">                i++; <span class="comment">// 跳过第二个斜杠</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source[i] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; source[i + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                inMultiLineComment = <span class="number">1</span>;</span><br><span class="line">                i++; <span class="comment">// 跳过第二个星号</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                destination[j++] = source[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inSingleLineComment &amp;&amp; source[i] == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            inSingleLineComment = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inMultiLineComment &amp;&amp; source[i] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; source[i + <span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            inMultiLineComment = <span class="number">0</span>;</span><br><span class="line">            i++; <span class="comment">// 跳过第二个括号</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    destination[j] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 在目标字符串末尾添加结束符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="合并空白符"><a href="#合并空白符" class="headerlink" title="合并空白符"></a>合并空白符</h4><p>代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">mergeWhitespace</span><span class="params">(<span class="type">char</span> *source, <span class="type">char</span> *destination)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(source);</span><br><span class="line">    <span class="type">int</span> isWhitespace = <span class="number">0</span>; <span class="comment">// 用于标记前一个字符是否是空白符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source[i] == <span class="string">&#x27; &#x27;</span> || source[i] == <span class="string">&#x27;\t&#x27;</span> || source[i] == <span class="string">&#x27;\n&#x27;</span> || source[i] == <span class="string">&#x27;\r&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isWhitespace) &#123;</span><br><span class="line">                destination[j++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                isWhitespace = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            destination[j++] = source[i];</span><br><span class="line">            isWhitespace = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    destination[j] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 在目标字符串末尾添加结束符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><blockquote>
<p>计划采取命令行和直接无参输入文件名两种方式，先写个架子，架子</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXFILENAME 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFERSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> inSingleLineComment = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> inMultiLineComment = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消除注释</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">removeComments</span><span class="params">(<span class="type">char</span> *source, <span class="type">char</span> *destination)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(source);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!inSingleLineComment &amp;&amp; !inMultiLineComment) &#123;</span><br><span class="line">            <span class="keyword">if</span> (source[i] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; source[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                inSingleLineComment = <span class="number">1</span>;</span><br><span class="line">                i++; <span class="comment">// 跳过第二个斜杠</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source[i] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; source[i + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                inMultiLineComment = <span class="number">1</span>;</span><br><span class="line">                i++; <span class="comment">// 跳过第二个星号</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                destination[j++] = source[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inSingleLineComment &amp;&amp; source[i] == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            inSingleLineComment = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inMultiLineComment &amp;&amp; source[i] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; source[i + <span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            inMultiLineComment = <span class="number">0</span>;</span><br><span class="line">            i++; <span class="comment">// 跳过第二个括号</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    destination[j] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 在目标字符串末尾添加结束符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并空白符</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mergeWhitespace</span><span class="params">(<span class="type">char</span> *source, <span class="type">char</span> *destination)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(source);</span><br><span class="line">    <span class="type">int</span> isWhitespace = <span class="number">0</span>; <span class="comment">// 用于标记前一个字符是否是空白符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source[i] == <span class="string">&#x27; &#x27;</span> || source[i] == <span class="string">&#x27;\t&#x27;</span> || source[i] == <span class="string">&#x27;\n&#x27;</span> || source[i] == <span class="string">&#x27;\r&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isWhitespace) &#123;</span><br><span class="line">                destination[j++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                isWhitespace = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            destination[j++] = source[i];</span><br><span class="line">            isWhitespace = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    destination[j] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 在目标字符串末尾添加结束符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="comment">//得到文件名</span></span><br><span class="line">    FILE *file;</span><br><span class="line">    FILE *preFile;</span><br><span class="line">    <span class="type">char</span> fileName[MAXFILENAME];</span><br><span class="line">    <span class="type">char</span> preFileName[MAXFILENAME+<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(fileName, argv[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入要分析的文件名:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%99s&quot;</span>,fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//puts(fileName);</span></span><br><span class="line">    <span class="comment">//printf(&quot;%s&quot;,fileName);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开获取的文件</span></span><br><span class="line">    file = fopen(fileName,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法打开文件 %s\n&quot;</span>,fileName);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造输出文件名</span></span><br><span class="line">    <span class="type">char</span> *lastDot = <span class="built_in">strrchr</span>(fileName, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(lastDot != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 将最后一个点以及后面的内容替换为&quot;.i&quot;</span></span><br><span class="line">        <span class="built_in">sprintf</span>(preFileName, <span class="string">&quot;%.*s.i&quot;</span>, (<span class="type">int</span>)(lastDot - fileName), fileName);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//没找到直接追加&quot;.i&quot;</span></span><br><span class="line">        <span class="built_in">sprintf</span>(preFileName, <span class="string">&quot;%s.i&quot;</span>, fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//puts(preFileName);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开输出文件</span></span><br><span class="line">    preFile = fopen(preFileName,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="comment">//preFile =</span></span><br><span class="line">    <span class="comment">//fopen(&quot;11&quot;,&quot;w&quot;);灵异事件，不知道为什么执行过一遍这条语句后，所有文件均能以写入打开了！？</span></span><br><span class="line">    <span class="keyword">if</span> (preFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法创建输出文件 %s\n&quot;</span>,preFileName);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;成功创建了文件&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行不断从文件中读入数据到内存中处理，预处理的主要步骤</span></span><br><span class="line">    <span class="comment">//主要进行注释删除以及空格合并</span></span><br><span class="line">    <span class="comment">//这里fgets函数是整行读取，与注释格式冲突，出现bug</span></span><br><span class="line">    <span class="comment">/*char inputBuffer[1024],outputBuffer[1024];</span></span><br><span class="line"><span class="comment">    int BUFFER_SIZE = 1024;</span></span><br><span class="line"><span class="comment">    while (fgets(inputBuffer, BUFFER_SIZE, file) != NULL) &#123;</span></span><br><span class="line"><span class="comment">        removeComments(inputBuffer,outputBuffer);</span></span><br><span class="line"><span class="comment">        mergeWhitespace(outputBuffer,outputBuffer);</span></span><br><span class="line"><span class="comment">        fputs(outputBuffer, preFile);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> inputBuffer[BUFFERSIZE],outputBuffer[BUFFERSIZE];</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch = fgetc(file)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == BUFFERSIZE) &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            removeComments(inputBuffer,outputBuffer);</span><br><span class="line">            mergeWhitespace(outputBuffer,outputBuffer);</span><br><span class="line">            <span class="built_in">fputs</span>(outputBuffer,preFile);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == EOF)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            removeComments(inputBuffer,outputBuffer);</span><br><span class="line">            mergeWhitespace(outputBuffer,outputBuffer);</span><br><span class="line">            <span class="built_in">fputs</span>(outputBuffer,preFile);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            inputBuffer[index++] = ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件流</span></span><br><span class="line">    fclose(file);</span><br><span class="line">    fclose(preFile);</span><br><span class="line">    <span class="comment">//printf(&quot;预处理完成,处理结果已写入文件 %s\n&quot;,preFileName);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数据类型定义"><a href="#数据类型定义" class="headerlink" title="数据类型定义"></a>数据类型定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义单词种别的字符串表示数组</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *categoryStrings[] = &#123;</span><br><span class="line">    <span class="string">&quot;IDENTIFIER&quot;</span>,    <span class="comment">// 标识符</span></span><br><span class="line">    <span class="string">&quot;CONSTANT&quot;</span>,      <span class="comment">// 常数</span></span><br><span class="line">    <span class="string">&quot;OPERATOR_ADD&quot;</span>,  <span class="comment">// 加法运算符 &#x27;+&#x27;</span></span><br><span class="line">    <span class="string">&quot;OPERATOR_SUB&quot;</span>,  <span class="comment">// 减法运算符 &#x27;-&#x27;</span></span><br><span class="line">    <span class="string">&quot;OPERATOR_MUL&quot;</span>,  <span class="comment">// 乘法运算符 &#x27;*&#x27;</span></span><br><span class="line">    <span class="string">&quot;OPERATOR_DIV&quot;</span>,  <span class="comment">// 除法运算符 &#x27;/&#x27;</span></span><br><span class="line">    <span class="string">&quot;OPERATOR_EQ&quot;</span>,   <span class="comment">// 等号 &#x27;=&#x27;</span></span><br><span class="line">    <span class="string">&quot;OPERATOR_NE&quot;</span>,   <span class="comment">// 不等号 &#x27;#&#x27;</span></span><br><span class="line">    <span class="string">&quot;OPERATOR_LT&quot;</span>,   <span class="comment">// 小于 &#x27;&lt;&#x27;</span></span><br><span class="line">    <span class="string">&quot;OPERATOR_GT&quot;</span>,   <span class="comment">// 大于 &#x27;&gt;&#x27;</span></span><br><span class="line">    <span class="string">&quot;OPERATOR_ASSIGN&quot;</span>, <span class="comment">// 赋值运算符 &#x27;:=&#x27;</span></span><br><span class="line">    <span class="string">&quot;DELIMITER_LPAREN&quot;</span>, <span class="comment">// 左括号 &#x27;(&#x27;</span></span><br><span class="line">    <span class="string">&quot;DELIMITER_RPAREN&quot;</span>, <span class="comment">// 右括号 &#x27;)&#x27;</span></span><br><span class="line">    <span class="string">&quot;DELIMITER_COMMA&quot;</span>,  <span class="comment">// 逗号 &#x27;,&#x27;</span></span><br><span class="line">    <span class="string">&quot;DELIMITER_PERIOD&quot;</span>, <span class="comment">// 句号 &#x27;.&#x27;</span></span><br><span class="line">    <span class="string">&quot;DELIMITER_SEMICOLON&quot;</span>, <span class="comment">// 分号 &#x27;;&#x27;</span></span><br><span class="line">    <span class="string">&quot;KEYWORD_BEGIN&quot;</span>,   <span class="comment">// begin</span></span><br><span class="line">    <span class="string">&quot;KEYWORD_END&quot;</span>,     <span class="comment">// end</span></span><br><span class="line">    <span class="string">&quot;KEYWORD_IF&quot;</span>,      <span class="comment">// if</span></span><br><span class="line">    <span class="string">&quot;KEYWORD_THEN&quot;</span>,    <span class="comment">// then</span></span><br><span class="line">    <span class="string">&quot;KEYWORD_WHILE&quot;</span>,   <span class="comment">// while</span></span><br><span class="line">    <span class="string">&quot;KEYWORD_DO&quot;</span>,      <span class="comment">// do</span></span><br><span class="line">    <span class="string">&quot;KEYWORD_CONST&quot;</span>,   <span class="comment">// const</span></span><br><span class="line">    <span class="string">&quot;KEYWORD_VAR&quot;</span>,     <span class="comment">// var</span></span><br><span class="line">    <span class="string">&quot;KEYWORD_CALL&quot;</span>,    <span class="comment">// call</span></span><br><span class="line">    <span class="string">&quot;KEYWORD_PROCEDURE&quot;</span>, <span class="comment">// procedure</span></span><br><span class="line">    <span class="string">&quot;KEYWORD_ODD&quot;</span>      <span class="comment">// odd</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义单词种别</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IDENTIFIER,       <span class="comment">// 标识符</span></span><br><span class="line">    CONSTANT,         <span class="comment">// 常数</span></span><br><span class="line">    OPERATOR_ADD,     <span class="comment">// 加法运算符 &#x27;+&#x27;</span></span><br><span class="line">    OPERATOR_SUB,     <span class="comment">// 减法运算符 &#x27;-&#x27;</span></span><br><span class="line">    OPERATOR_MUL,     <span class="comment">// 乘法运算符 &#x27;*&#x27;</span></span><br><span class="line">    OPERATOR_DIV,     <span class="comment">// 除法运算符 &#x27;/&#x27;</span></span><br><span class="line">    OPERATOR_EQ,      <span class="comment">// 等号 &#x27;=&#x27;</span></span><br><span class="line">    OPERATOR_NE,      <span class="comment">// 不等号 &#x27;#&#x27;</span></span><br><span class="line">    OPERATOR_LT,      <span class="comment">// 小于 &#x27;&lt;&#x27;</span></span><br><span class="line">    OPERATOR_GT,      <span class="comment">// 大于 &#x27;&gt;&#x27;</span></span><br><span class="line">    OPERATOR_ASSIGN,  <span class="comment">// 赋值运算符 &#x27;:=&#x27;</span></span><br><span class="line">    DELIMITER_LPAREN, <span class="comment">// 左括号 &#x27;(&#x27;</span></span><br><span class="line">    DELIMITER_RPAREN, <span class="comment">// 右括号 &#x27;)&#x27;</span></span><br><span class="line">    DELIMITER_COMMA,  <span class="comment">// 逗号 &#x27;,&#x27;</span></span><br><span class="line">    DELIMITER_PERIOD, <span class="comment">// 句号 &#x27;.&#x27;</span></span><br><span class="line">    DELIMITER_SEMICOLON, <span class="comment">// 分号 &#x27;;&#x27;</span></span><br><span class="line">    KEYWORD_BEGIN,    <span class="comment">// begin</span></span><br><span class="line">    KEYWORD_END,      <span class="comment">// end</span></span><br><span class="line">    KEYWORD_IF,       <span class="comment">// if</span></span><br><span class="line">    KEYWORD_THEN,     <span class="comment">// then</span></span><br><span class="line">    KEYWORD_WHILE,    <span class="comment">// while</span></span><br><span class="line">    KEYWORD_DO,       <span class="comment">// do</span></span><br><span class="line">    KEYWORD_CONST,    <span class="comment">// const</span></span><br><span class="line">    KEYWORD_VAR,      <span class="comment">// var</span></span><br><span class="line">    KEYWORD_CALL,     <span class="comment">// call</span></span><br><span class="line">    KEYWORD_PROCEDURE,<span class="comment">// procedure</span></span><br><span class="line">    KEYWORD_ODD       <span class="comment">// odd</span></span><br><span class="line">&#125; Category;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义单词符号结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Category category;  <span class="comment">// 单词的种别</span></span><br><span class="line">    <span class="type">int</span> attribute;      <span class="comment">// 属性值，可以根据需要选择合适的数据类型</span></span><br><span class="line">&#125; Token;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义打印单词符号的函数</span></span><br><span class="line"><span class="comment">/*void printToken(Token token) &#123;</span></span><br><span class="line"><span class="comment">    printf(&quot;(%d, %d)\n&quot;, token.category, token.attribute);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">// 定义打印单词符号的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printToken</span><span class="params">(Token token)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(%s, %d)\n&quot;</span>, categoryStrings[token.category], token.attribute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.保留字提示改成关键字</p>
<p>2.最后为什么输出<code>ERRO</code></p>
<p>3.以命令行参数的形式传入参数</p>
<p>4.各种输出显示仍然有点问题</p>
]]></content>
  </entry>
</search>
